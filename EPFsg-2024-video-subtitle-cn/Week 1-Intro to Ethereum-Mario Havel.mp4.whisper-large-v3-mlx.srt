1
00:00:30,000 --> 00:00:50,840
谢谢。

2
00:01:00,000 --> 00:01:02,000
所以

3
00:02:00,000 --> 00:02:29,979
©BF-Watch TV 2021

4
00:03:30,000 --> 00:03:59,979
谢谢。

5
00:04:30,000 --> 00:04:59,980
谢谢。

6
00:06:00,000 --> 00:06:10,040
谢谢。

7
00:07:00,000 --> 00:07:29,980
©BF-Watch TV 2021

8
00:07:30,000 --> 00:07:59,980
小提琴演奏

9
00:08:30,000 --> 00:08:56,759
谢谢。

10
00:09:00,000 --> 00:09:13,000
好吧。欢迎参与协议奖学金研究小组特别版。

11
00:09:13,000 --> 00:09:23,000
Mario在此处撰写的以太坊介绍的Redux版本。

12
00:09:23,000 --> 00:09:26,000
所以我想...我不知道，马里奥。你想要_____吗...

13
00:09:26,000 --> 00:09:29,000
您想像我们对最后一个一样进行一些介绍吗？

14
00:09:29,000 --> 00:09:30,659
一个还是只是进入它？

15
00:09:30,659 --> 00:09:38,740
我认为我们可以为研究小组迅速说几句话

16
00:09:38,740 --> 00:09:44,019
录音，然后有机会捕捉第一个。

17
00:09:44,019 --> 00:09:50,559
我想只是重申我们在市政厅所说的话。

18
00:09:50,559 --> 00:09:51,559
是的。

19
00:09:51,559 --> 00:09:52,559
欢迎来到研究小组。

20
00:09:52,559 --> 00:09:56,360
欢迎来到协议奖学金研究小组，大家。

21
00:09:56,360 --> 00:10:03,500
是的，在我们进行第一次演讲之前，请说，好吧，我们很高兴能拥有

22
00:10:03,500 --> 00:10:03,800
你在这里。

23
00:10:03,919 --> 00:10:05,620
我们很高兴您想了解以太坊。

24
00:10:06,300 --> 00:10:13,379
我们根据以太坊协议奖学金的经验创建了这个程序，

25
00:10:13,379 --> 00:10:16,620
有关动手发展的更多信息。

26
00:10:16,960 --> 00:10:23,039
随着人们开始在以太坊上工作，作为实际软件零件的贡献

27
00:10:23,039 --> 00:10:28,179
其中，我们看到存在很大的信息差距，一个很大的教育差距。

28
00:10:28,179 --> 00:10:32,679
即使您来自编程计算机，这是一个非常陡峭的学习曲线

29
00:10:32,679 --> 00:10:35,039
了解以太坊背景的科学背景。

30
00:10:35,539 --> 00:10:41,919
因此，我们创建了这个程序来弥合差距，提供一些教育材料和

31
00:10:41,919 --> 00:10:45,579
另外，只需帮助您在特定路径上浏览即可。

32
00:10:45,919 --> 00:10:50,879
就像我们仍然试图模仿核心开发人员的这种经历一样，正在潜水的人

33
00:10:50,879 --> 00:10:55,279
在协议中，我们没有提供所有资源，因为它取决于您

34
00:10:55,279 --> 00:11:01,919
感兴趣和您想学的内容。我们有一些程序的基本结构

35
00:11:02,639 --> 00:11:11,019
在最初的五周里

36
00:11:11,019 --> 00:11:17,600
今天对协议的一般介绍，然后我们将介绍执行层

37
00:11:17,600 --> 00:11:22,420
共识层，测试和安全性，最后是研究和路线图概述。

38
00:11:22,420 --> 00:11:24,680
这是头五个星期。

39
00:11:24,680 --> 00:11:30,759
在下半场，在其他五周内，我们每周将有两个电话

40
00:11:30,759 --> 00:11:34,940
在两条曲目中，是发展和研究。

41
00:11:34,940 --> 00:11:38,540
因此有两个不同的域。

42
00:11:38,540 --> 00:11:44,960
您可以选择其中之一，也可以在它们之间切换，也可以同时关注两者。

43
00:11:44,960 --> 00:11:53,300
遵循两者。这些将在开发方面覆盖，更深入地了解实际客户

44
00:11:53,300 --> 00:11:59,360
代码库和规范。我们将向您展示您如何真正作为程序员参与

45
00:11:59,360 --> 00:12:06,080
在研究方面。您将了解以太坊的未来，有关改进

46
00:12:06,080 --> 00:12:14,120
正在研究和开发。是的。因此，这是该程序的概述。我们跟随

47
00:12:14,120 --> 00:12:20,759
我们提供这些演示文稿，提供某些资源。但是我们的目标是激发您的灵感

48
00:12:20,759 --> 00:12:28,120
并向您展示所有这些域，并给您一些起点，以便您实际上可以

49
00:12:28,120 --> 00:12:35,639
深入潜水。有一个带有此程序的Wiki.wiki.com网站，如您所在

50
00:12:35,639 --> 00:12:40,840
注意到，该程序是协调的。我们在那里发布了这些电话，以提供一些资源。

51
00:12:40,840 --> 00:12:50,200
但是我们希望创建此Wiki作为实际资源UH实际实际资源

52
00:12:50,200 --> 00:12:55,720
知识基础UH uh与生态系统周围的所有资源一起收集的资源，因为如果您已经

53
00:12:55,720 --> 00:13:00,680
开始研究一些主题，您可能会注意到它确实散布在那里

54
00:13:00,680 --> 00:13:07,800
各种HackMD的研究帖子和论文等等，依此类推。

55
00:13:07,799 --> 00:13:16,039
这些动手协议主题。当然，还有许多其他伟大的维基人

56
00:13:16,039 --> 00:13:22,199
想复制。我们只想拥有一个上下文，并链接到所有可用资源

57
00:13:22,199 --> 00:13:29,559
正在学习成为协议核心开发人员的协议的人。所以请随意

58
00:13:29,559 --> 00:13:36,199
贡献。如果您对我今天提到的这些主题之一感兴趣，否则我们将学习

59
00:13:36,200 --> 00:13:44,060
在接下来的几周内了解有关它的信息，您知道Google了解有关它的更多详细信息

60
00:13:44,060 --> 00:13:52,280
然后，它将其贡献回到Wiki是的，是的，它是该程序的概述

61
00:13:52,280 --> 00:14:01,520
花了五分钟，希望它不会太长，是的，让我们摧毁它，所以我忘记了乔什

62
00:14:01,519 --> 00:14:04,120
还是我应该添加一些东西？

63
00:14:04,120 --> 00:14:06,659
您想添加一些东西吗？

64
00:14:06,659 --> 00:14:09,379
不，我认为这足够了。

65
00:14:09,379 --> 00:14:16,799
我只想重申，大多数对话都将在我们的

66
00:14:16,799 --> 00:14:17,799
Discord服务器。

67
00:14:17,799 --> 00:14:22,079
因此，如果您不是其中的一部分，请加入Discord服务器。

68
00:14:22,079 --> 00:14:26,840
在这些电话期间，我们想尝试将其多大的对话保留到该服务器

69
00:14:26,840 --> 00:14:27,840
尽可能。

70
00:14:27,840 --> 00:14:34,560
研究组渠道中有一个线程。每个不同的都会有一个

71
00:14:34,560 --> 00:14:41,120
我们可以在该线程上保持对话，问题和评论的会议

72
00:14:41,120 --> 00:14:48,160
一切都位于一种集中位置，我们不会将其丢给流中的聊天

73
00:14:48,159 --> 00:14:59,079
平台。是的。除此之外，我和马里奥（Mario）在这里为大家提供了这一过程。

74
00:14:59,360 --> 00:15:05,759
因此，如果您有疑问或评论，请随时在该服务器中ping我们。但是，是的，

75
00:15:05,759 --> 00:15:11,339
期待马里奥的演讲。我已经看过几次了

76
00:15:11,339 --> 00:15:17,579
每次都更好。是的。只是看到了很多次。下次应该这样做时，

77
00:15:17,580 --> 00:15:25,020
伙计，是的，是的，非常感谢乔什，是的，嗯，您可以使用请使用

78
00:15:25,020 --> 00:15:29,580
正如乔什所说的那样，不和谐的话题，因为我可能会在演讲期间提出一些问题

79
00:15:29,580 --> 00:15:35,180
嗯，你应该问我问题，所以请随时将它们放在那里，所以我们将其全部放在一个地方

80
00:15:35,740 --> 00:15:39,340
嗯，我应该分享我的屏幕和嗯

81
00:15:39,340 --> 00:15:44,480
我会告诉你我的演讲。

82
00:15:44,480 --> 00:15:47,200
哦，在这里。

83
00:15:47,200 --> 00:15:48,200
好的。

84
00:15:48,200 --> 00:15:50,259
我希望你知道。

85
00:15:50,259 --> 00:15:53,420
如果您能看到一切，我想是这样。

86
00:15:53,420 --> 00:15:56,620
我相信这比以前比Jitsi更好。

87
00:15:56,620 --> 00:15:57,620
是的。

88
00:15:57,620 --> 00:16:03,960
顺便说一下，如果您在星期一惨败之后您在这里，我对此感到非常抱歉。

89
00:16:03,960 --> 00:16:09,560
问题没有服务器uh，它不是软件，而是服务器，因为我们只是

90
00:16:09,560 --> 00:16:15,320
没有将机器的带宽和CPU缩放给我们非常激动的许多人

91
00:16:15,320 --> 00:16:22,840
看到嗯很多人来参加这个研究小组，所以嗯，很高兴有你们和

92
00:16:22,840 --> 00:16:31,879
兴奋地与您一起研究协议101，所以在这次演讲中，我将为您概述

93
00:16:31,879 --> 00:16:40,939
以太坊协议uh的技术部分是设计，嗯，嗯

94
00:16:40,939 --> 00:16:50,000
嗯，我们与许多协议主题的UH同事一起工作的方式，但我相信

95
00:16:50,000 --> 00:16:56,779
要了解协议开发现在的以太坊和方式

96
00:16:56,779 --> 00:17:01,519
开发了，它的设计方式。您需要了解某些哲学和

97
00:17:01,519 --> 00:17:07,160
它的基本原理。因此，在标题中，您可以看到史前史，因为我想谈谈

98
00:17:07,160 --> 00:17:11,399
还有关于历史，不仅是以太坊进化的方式，而且实际上是在哪里

99
00:17:11,399 --> 00:17:24,139
它来自。在这些价值的地方，这些基本原理已经创建了

100
00:17:24,140 --> 00:17:30,140
这些想法并不新鲜。他们一路回溯了很多年。

101
00:17:30,140 --> 00:17:38,140
因此，要拥有一个良好的背景并能够掌握生态系统中真正重要的内容，

102
00:17:38,140 --> 00:17:44,140
我想从Unix Creation开始，一路跳入60年代，

103
00:17:44,140 --> 00:17:53,140
然后自由软件移动。当然，现代密码学的曙光，

104
00:17:53,140 --> 00:17:59,140
Cypherpunk运动是因为我相信所有这些，当然还有更多影响

105
00:17:59,140 --> 00:18:05,540
以太坊设计我们今天使用以太坊的方式以及如何看待加密货币景观

106
00:18:05,540 --> 00:18:12,900
今天，是的，让我们从我想开始的，让我只是向您展示演示文稿，因为

107
00:18:12,900 --> 00:18:20,500
我的脸甚至看到我的脸是在这里清晨，是的，所以让我们从Unix开始

108
00:18:20,500 --> 00:18:32,079
对于那些不记得Unix是什么的人，这基本上是两件事。首先是一个操作系统，但这也是一种哲学。

109
00:18:32,079 --> 00:18:46,480
因此，自60年代（70年代）以来，在贝尔实验室（Bell Labs）开发了UNIX。

110
00:18:46,480 --> 00:18:51,019
它是由Ri​​chie和Ken Thompson创建的。

111
00:18:51,019 --> 00:18:55,079
如果您还记得这个名字，那就是Richie和Ken Thompson。

112
00:18:55,079 --> 00:18:57,199
他们是C语言的创造者。

113
00:18:57,199 --> 00:19:01,439
甚至在C之前，B语言。

114
00:19:01,440 --> 00:19:06,360
但是今天，C当然可以为我们周围的一切提供动力，

115
00:19:06,460 --> 00:19:10,039
就像您使用的操作系统一样，您正在使用的浏览器。

116
00:19:10,220 --> 00:19:12,620
一切都深处C.

117
00:19:12,860 --> 00:19:15,299
今天被认为是低级语言，

118
00:19:15,640 --> 00:19:22,559
这成为现代软件中最重要的建筑部分之一。

119
00:19:23,759 --> 00:19:26,299
以及C语言，

120
00:19:26,299 --> 00:19:30,019
这两个人创建了UNIX操作系统。

121
00:19:30,019 --> 00:19:36,019
实际上，不仅是他们。贝尔实验室中的研究人员是许多开发人员。

122
00:19:36,019 --> 00:19:42,019
但是Unix以某种方式与C语言一起设计。

123
00:19:42,019 --> 00:19:52,019
当我们谈论这种Unix哲学时，我们主要是什么意思，其中的主要部分是模块化。

124
00:19:52,019 --> 00:20:02,400
因为该操作系统无法以一个单一的程序来执行，正如我们所说的那样，它试图完成包括厨房水槽在内的所有操作。

125
00:20:03,599 --> 00:20:08,379
但是它不是单独的模块，而是单独的程序。

126
00:20:08,940 --> 00:20:14,339
每个程序都可以做到最好的事情，并且具有可以连接到他人的干净界面。

127
00:20:14,339 --> 00:20:23,740
如果您今天是Linux用户，如果您今天可能是Mac用户，那么这就是系统的核心。

128
00:20:24,859 --> 00:20:33,119
如果使用管道，则可以将一个程序输出并直接用作另一个程序的输入。

129
00:20:33,539 --> 00:20:36,159
这为您提供了非常强大的工具。

130
00:20:36,519 --> 00:20:37,339
这确实是授权的。

131
00:20:37,339 --> 00:20:40,119
对于用户的角度来看，这是一个强大的工具。

132
00:20:40,119 --> 00:20:43,839
但是从开发人员的角度来看，这是非常实用和安全的

133
00:20:43,839 --> 00:20:48,679
因为使系统在这些模块中分开，而不仅仅是一个程序，所以

134
00:20:49,079 --> 00:20:51,879
它为您带来了优势。

135
00:20:51,879 --> 00:20:56,179
因此，如果存在问题，则在一个模块中，您可以解决这个问题，

136
00:20:56,439 --> 00:20:58,179
而且它不会破坏系统的其余部分。

137
00:21:00,019 --> 00:21:03,939
您可以将复杂性封装在这些模块中。

138
00:21:04,679 --> 00:21:08,299
我在这里链接的纪录片，您可以在Wiki中找到它。

139
00:21:08,299 --> 00:21:13,039
这是惊人的。我真的建议看它。这些真是太神奇了

140
00:21:13,039 --> 00:21:17,359
旧的AT＆T档案纪录片能够表达

141
00:21:17,359 --> 00:21:20,980
一些可能复杂的话题，但真的很干净

142
00:21:20,980 --> 00:21:24,440
优雅地解释了。您可以看到那里的人。肯·汤普森

143
00:21:24,440 --> 00:21:29,460
在早期的Unix中输入管道，解释了它的方式

144
00:21:29,460 --> 00:21:33,000
作品。看到真的很美。它确实抓住了

145
00:21:33,000 --> 00:21:36,480
也是这个精神

146
00:21:36,480 --> 00:21:40,400
我相信，这种环境在70年代初。

147
00:21:40,860 --> 00:21:46,960
因为一个学院，贝尔实验室，

148
00:21:47,099 --> 00:21:51,059
但实际上也像麻省理工学院或世界各地的类似机构

149
00:21:51,319 --> 00:21:56,299
就像早期的程序员一样，他们的合作也是如此。

150
00:21:56,740 --> 00:21:59,620
另外，使用这些不同的模块创建UNIX的方式

151
00:21:59,620 --> 00:22:01,839
和不同的人工作，

152
00:22:02,019 --> 00:22:05,019
他们需要互相交谈并进行协作。

153
00:22:05,019 --> 00:22:08,420
您知道，他们总是打开办公室的门。

154
00:22:08,579 --> 00:22:09,660
他们可以见面并聊天。

155
00:22:09,900 --> 00:22:19,599
这是一个强大的协作环境，人们将基本上像一件大事一样建立。

156
00:22:19,779 --> 00:22:25,200
但是最终，每个人​​都在尽力而为，彼此合作。

157
00:22:25,819 --> 00:22:33,000
因此，我看到这种文化的很大一部分在当今的以太坊开发中也反映在不同的规模中。

158
00:22:33,559 --> 00:22:34,259
所以，是的。

159
00:22:34,259 --> 00:22:35,599
我真的推荐这部纪录片。

160
00:22:36,240 --> 00:22:40,359
就像，是的，它确实很好地解释了Unix。

161
00:22:40,460 --> 00:22:44,680
就像它是50年前发明的计算范式一样。

162
00:22:44,740 --> 00:22:45,819
我们今天仍然使用它。

163
00:22:45,940 --> 00:22:47,640
这是我们今天使用计算机的方式。

164
00:22:47,720 --> 00:22:49,240
我们没有得到更好的东西。

165
00:22:49,240 --> 00:22:55,940
就像从电视作家到今天在外壳中拥有的TTY一样。

166
00:22:56,140 --> 00:22:57,759
实际上是同一件事。

167
00:22:58,779 --> 00:22:59,299
好的。

168
00:23:00,220 --> 00:23:03,960
继续讲这个故事，我们去了80年代。

169
00:23:04,259 --> 00:23:07,879
随着免费软件的曙光。

170
00:23:07,879 --> 00:23:14,599
因此，正如我提到的，人们，早期的程序员，他们合作。

171
00:23:15,259 --> 00:23:19,059
他们的软件是开放的，但这是因为

172
00:23:19,420 --> 00:23:22,480
能够运行软件，编译它，

173
00:23:22,579 --> 00:23:25,900
为了为您的计算机进行修复，每个人都刚刚获得了源代码。

174
00:23:26,559 --> 00:23:30,660
这些早期的黑客称自己为

175
00:23:30,660 --> 00:23:38,519
这是他们的运营方式。这就是他们合作的方式。但是，当然，

176
00:23:38,519 --> 00:23:44,700
然后在80年代，软件的商业化来了，军队来了，

177
00:23:44,700 --> 00:23:52,620
他们创建了专有软件。他们关闭了用户的软件。现在，

178
00:23:52,619 --> 00:23:57,439
现在，这有一定的后果。

179
00:23:57,439 --> 00:23:59,319
专有软件是...

180
00:23:59,319 --> 00:24:05,500
好吧，这限制了您作为用户的自由。

181
00:24:05,500 --> 00:24:15,299
因此，现在我将其与您购买或已建造的房屋进行比较。

182
00:24:15,299 --> 00:24:21,759
但是要更改某些东西，打开窗户，去地下室并修复加热，什么

183
00:24:21,759 --> 00:24:27,119
需要询问许可您需要从所有者或建筑商左右从地下室获取钥匙

184
00:24:27,119 --> 00:24:31,420
在上面，问题就像如果您购买这样的东西，您是否真的拥有房子

185
00:24:31,420 --> 00:24:38,339
现在您没有权限去做自己想做的事情，但创造者正在控制它

186
00:24:38,339 --> 00:24:42,480
就像您是否真的是您的，因为这就是正在发生的事情

187
00:24:42,480 --> 00:24:46,740
现在，使用计算机，您在您面前有手机前面有电脑

188
00:24:46,740 --> 00:24:49,420
是一种多功能设备。

189
00:24:49,519 --> 00:24:50,559
这是一种通用设备。

190
00:24:50,759 --> 00:24:55,559
这是一个计算器，可以以任何方式计算任何数量的操作。

191
00:24:55,940 --> 00:24:58,000
而且您应该能够控制它。

192
00:24:58,039 --> 00:25:00,700
您应该能够告诉它您想用这台计算机做什么。

193
00:25:01,259 --> 00:25:04,220
但是，如果您运行专有软件，

194
00:25:04,859 --> 00:25:07,559
是开发人员，软件的创建者，

195
00:25:08,259 --> 00:25:11,079
控制机器，您实际上没有输入。

196
00:25:11,259 --> 00:25:14,039
您甚至都不知道发生了什么。

197
00:25:14,039 --> 00:25:18,920
您不知道专有操作系统是否正在打电话回家

198
00:25:18,920 --> 00:25:27,240
我相信，发送您的私人数据或或计算无限十进制数字的UH UH PI

199
00:25:27,240 --> 00:25:34,359
Windows Vista正在为何为什么不像我们没有我们的时候那样慢。

200
00:25:34,359 --> 00:25:39,879
我们不想做自由，嗯，我们非常有限，这就是这就是什么

201
00:25:39,880 --> 00:25:45,480
理查德·史塔曼（Richard Stallman）意识到。因此，理查德·史塔尔曼（Richard Stallman）通常被称为麻省理工学院的最后黑客

202
00:25:46,120 --> 00:25:51,960
因为他为此献出了生命。他现在已经70多岁了，他一生只使用了免费软件。

203
00:25:51,960 --> 00:26:00,200
他一生致力于保持这种原始的黑客文化，以分享

204
00:26:00,200 --> 00:26:07,240
软件。他在1983年9月开始了自由软件运动的GNU项目

205
00:26:07,240 --> 00:26:11,839
定义了软件的四个基本自由。

206
00:26:11,839 --> 00:26:17,980
您想要以任何方式运行它，研究源代码，修改并重新分配它的能力。

207
00:26:19,200 --> 00:26:21,480
因此，他给用户提供了自由。

208
00:26:22,519 --> 00:26:26,019
他一直在倡导他的一生。

209
00:26:27,220 --> 00:26:31,640
他启动的项目是GNU项目，听起来很熟悉。

210
00:26:32,039 --> 00:26:36,380
如果您使用的是Linux，则可能会看到GNU Slash Linux，因为它是操作系统。

211
00:26:36,380 --> 00:26:43,520
GNU的目标是重新创建UNIX体验，但可以完全免费的软件。

212
00:26:43,520 --> 00:26:49,960
因为即使人们在UNIX上有些公开合作，但这并不是真正的免费。

213
00:26:49,960 --> 00:26:53,660
GNU项目创建了许可。

214
00:26:53,660 --> 00:26:57,940
如果您去Github，如果您在那里寻找一些您喜欢的程序，

215
00:26:57,940 --> 00:27:03,740
您可能会看到它是由Stallman创建的GPL或GNU通用公共许可证的许可

216
00:27:03,740 --> 00:27:11,000
为程序员提供一种简单的方法，如何将其程序许可为免费软件。

217
00:27:12,460 --> 00:27:15,839
GNU项目创建了许多核心公用事业。

218
00:27:16,779 --> 00:27:21,059
也许如果您学习C，则使用GCC，GNU编译器集合，

219
00:27:21,059 --> 00:27:27,700
如今，这可能是最常用的C编译器。

220
00:27:28,859 --> 00:27:32,980
这些核心实用程序中的许多是我们所说的外壳。

221
00:27:32,980 --> 00:27:38,380
操作系统的外壳，但操作系统的核心是一项巨大的任务

222
00:27:38,380 --> 00:27:47,019
花很长时间，直到90年代初UM Linus Torvalds释放Linux UH作为核的内核

223
00:27:47,019 --> 00:27:53,680
GPL许可证下的操作系统，这可以与GNU外壳相结合

224
00:27:53,680 --> 00:28:00,339
您今天使用的GNU Slash Linux操作系统，因此所有这些都是由Stollman发起的

225
00:28:00,339 --> 00:28:08,199
真的推荐来自TEDX日内瓦的这次演讲，他真的很好地解释了它

226
00:28:08,199 --> 00:28:15,039
在上下文中，为什么软件在所有加密货币中保持自由和以太坊很重要

227
00:28:15,039 --> 00:28:21,399
这是基本的，因为以太坊的重点是使用户自由

228
00:28:21,399 --> 00:28:29,199
透明地保持无信任并做到这一点，我们需要知道我跑步时发生了什么

229
00:28:29,200 --> 00:28:33,660
以太坊软件。我需要意识到它正是在做应该做的事情，

230
00:28:33,660 --> 00:28:42,120
它遵守规范，我同意的是以太坊网络的规则。

231
00:28:43,900 --> 00:28:48,779
然后在90年代，有开源的移动即将到来。现在，您可能会注意到到现在，

232
00:28:48,840 --> 00:28:54,640
我只谈论免费软件，但开源是其中的另一部分。开源是

233
00:28:54,640 --> 00:29:01,680
由自由软件社区的某些人创建的，他们不喜欢品牌

234
00:29:01,680 --> 00:29:08,220
因为自由软件听起来像免费的啤酒

235
00:29:08,220 --> 00:29:14,660
人言论自由，但是如果您想和您开展业务，那不是一个很好的词

236
00:29:14,660 --> 00:29:20,980
知道赠送免费软件，因此开源是一种重塑，也是其基本面

237
00:29:20,980 --> 00:29:28,819
说这是嗯，它的价值是写出来的，但是开源运动更多地谈论了

238
00:29:28,819 --> 00:29:35,460
它的务实一面更多地是关于嗯，您知道开放是很好的，因为您可以更多

239
00:29:35,460 --> 00:29:40,579
经审核的安全性有更多的安全性，您可以带来更多的贡献者等等，因此更像是

240
00:29:40,579 --> 00:29:46,819
这种业务务实的方法还可以，但忽略了它忘记了自由的重要性

241
00:29:46,819 --> 00:29:53,059
那里。这件事的重点是赋予用户自由。所以我们说自由和开放

242
00:29:53,059 --> 00:29:58,980
源软件或福斯。那就是您看到此首字母缩写词的地方。所以对于以太坊，我相信所有这些

243
00:29:58,980 --> 00:30:03,460
零件对于自由和开源软件很重要，以实现协作并赋予自由

244
00:30:03,460 --> 00:30:11,299
给用户。好的。我去过...我应该继续。那里有几分钟。是的。接下来，很重要

245
00:30:11,299 --> 00:30:20,500
1976年重要的发明重要部分，呃，密码学的新方向本文

246
00:30:20,500 --> 00:30:28,180
由Diffian Hellman uh创建了一个新的范式，在现代密码学上基本上是

247
00:30:28,180 --> 00:30:35,559
如果是的，那是这里大多数人的基础知识，我想这是创造的

248
00:30:35,559 --> 00:30:40,419
非对称密码学或我们也称为公共密钥密码学或钥匙对

249
00:30:40,420 --> 00:30:45,220
因为在此之前，在本文之前，

250
00:30:45,840 --> 00:30:49,840
加密仅以一种单向的对称方式进行。

251
00:30:49,840 --> 00:31:00,740
因此，由于我不知道，凯撒（Caesar）以来，几千年前

252
00:31:00,840 --> 00:31:04,940
人们以我接听消息的方式加密消息

253
00:31:04,940 --> 00:31:09,700
我以某种方式拼命了单词，我更改了字母

254
00:31:09,700 --> 00:31:12,019
根据一些钥匙，根据某些规则。

255
00:31:12,600 --> 00:31:15,279
如果我将其传递给另一方，

256
00:31:15,759 --> 00:31:19,140
我需要给他密文，

257
00:31:19,279 --> 00:31:21,759
还有规则，钥匙，如何解密它。

258
00:31:22,500 --> 00:31:24,700
因此，我们有一个键和一个加密文本。

259
00:31:24,900 --> 00:31:27,240
但是有了不对称的密码学，

260
00:31:27,240 --> 00:31:31,539
我们有一个非常强大的工具，使我们能够使用一个密钥。

261
00:31:31,700 --> 00:31:34,819
我们称其为公钥来加密某些内容。

262
00:31:36,120 --> 00:31:37,700
它是对应的私钥，

263
00:31:37,700 --> 00:31:42,660
仅由其所有者持有，以解密它。

264
00:31:42,759 --> 00:31:45,319
只有私钥才能使用解密，

265
00:31:45,440 --> 00:31:48,220
但是任何人都可以使用公共密钥来加密消息。

266
00:31:48,600 --> 00:31:51,819
这意味着我可以在名片上有此公共密钥，

267
00:31:52,000 --> 00:31:55,640
在我的网站上，任何人都可以向我发送加密电子邮件。

268
00:31:56,220 --> 00:31:58,680
这是加密电子邮件的曙光，

269
00:31:59,259 --> 00:32:01,200
主要是PGP的实施。

270
00:32:02,819 --> 00:32:05,460
当然，如果这响了，

271
00:32:05,460 --> 00:32:08,360
因此，这就是所有加密货币的使用。

272
00:32:08,360 --> 00:32:14,140
如果您曾经使用以太坊，如果您曾经使用过比特币，则使用了公共密钥或一些推导

273
00:32:14,140 --> 00:32:20,559
公钥作为地址。

274
00:32:20,559 --> 00:32:22,700
私钥就是让您花费的钱。

275
00:32:22,700 --> 00:32:29,799
由于该关键对密码学的另一个独特功能，即数字签名。

276
00:32:29,799 --> 00:32:37,659
签名是一种数学证明，以我们签名的私钥的方式工作

277
00:32:37,659 --> 00:32:39,759
数据。我们可以签署任何数据。

278
00:32:39,759 --> 00:32:41,559
它可以是一个trabyte文件。

279
00:32:41,680 --> 00:32:43,519
这可能是一个简单的消息。

280
00:32:44,039 --> 00:32:51,180
我们签署此数据，签名是一些可以验证的数学证明

281
00:32:51,680 --> 00:32:52,919
反对公钥。

282
00:32:52,960 --> 00:32:59,799
因此，任何看到此签名并拥有您的公共密钥的人都可以验证

283
00:32:59,799 --> 00:33:02,700
私钥的所有者可以产生此签名。

284
00:33:02,700 --> 00:33:05,799
这是在以太坊完成交易的方式。

285
00:33:05,799 --> 00:33:10,319
当我发送交易时，我创建了我是该地址的所有者的证明，我正在签署

286
00:33:10,319 --> 00:33:14,859
我希望这笔资金在此处转移的信息。

287
00:33:14,859 --> 00:33:18,919
因此，对于另一个公共密钥，到另一个地址。

288
00:33:18,919 --> 00:33:23,079
是的，今天我们认为这是理所当然的。

289
00:33:23,079 --> 00:33:24,079
无处不在。

290
00:33:24,079 --> 00:33:29,220
使用TLS连接，在此处浏览器中的HTTPS连接。那是端到端

291
00:33:29,220 --> 00:33:33,639
使用此技术准确加密。当您使用

292
00:33:33,639 --> 00:33:39,019
信号或WhatsApp使用此密码学的某种形式。就是这样

293
00:33:39,019 --> 00:33:44,720
今天到处都到处都是，但在70年代和80年代并不是真的

294
00:33:44,720 --> 00:33:50,419
随着PGP加密电子邮件的曙光，非常好的隐私

295
00:33:50,420 --> 00:34:02,900
工具。这被认为是危险的，它被认为是一种武器。所以事情是

296
00:34:02,900 --> 00:34:16,159
您知道，在计算机和互联网蔓延到房屋之前

297
00:34:16,159 --> 00:34:22,339
到处都是。它实际上仅由军队使用。现在任何人都可以加密，

298
00:34:22,420 --> 00:34:27,299
任何人都可以实现其数字隐私。政府没有，我不想说他们

299
00:34:27,299 --> 00:34:30,940
不喜欢它。他们没有框架。他们只是不明白。这是什么

300
00:34:30,940 --> 00:34:37,920
全新。他们认为密码学是军事武器库，一种武器

301
00:34:37,920 --> 00:34:42,359
平民使用，必须受到监管，不能出口。

302
00:34:42,360 --> 00:34:51,120
它。对不起。这些早期的密码学家中有许多陷入困境，因为它们是开源的，

303
00:34:51,120 --> 00:35:00,880
免费软件密码学被导出。因此，例如，创造者菲尔·齐默尔曼（Phil Zimmerman）

304
00:35:00,880 --> 00:35:10,900
PGP的威胁要威胁他要因叛国罪而进行审判，因为

305
00:35:10,900 --> 00:35:18,160
他创建了此电子邮件加密，这只是软件中编程的数学。

306
00:35:18,300 --> 00:35:18,680
就是这样。

307
00:35:19,260 --> 00:35:28,220
他著名地创作了一本由麻省理工学院出版的书，其中包含一本

308
00:35:28,220 --> 00:35:33,420
整个源代码，包括PGP版本的制作文件，例如2.7之类的。

309
00:35:33,980 --> 00:35:36,320
然后他们可以导出这本书。

310
00:35:36,960 --> 00:35:40,639
而且，美国没有任何反对出口书籍的法规。

311
00:35:40,639 --> 00:35:44,039
所以现在，他保护了自己。

312
00:35:44,259 --> 00:35:54,839
但是我们也可以看到，这是一种自由演讲，您知道，谈论数学规则，并用软件的语言编写它们，或者实际上是一种编程语言，只是一种语言形式。

313
00:35:54,980 --> 00:35:55,159
正确的？

314
00:35:55,480 --> 00:36:02,819
因此，有一个人社区一直在做这些事情，构建软件，并根据它提倡。

315
00:36:03,819 --> 00:36:07,319
这是一个非常受欢迎的运动，称为Cypherpunks。

316
00:36:07,320 --> 00:36:14,580
这张照片上看起来有点害怕，但我们可以揭露它们

317
00:36:14,580 --> 00:36:22,800
有很多不同的人来自商务uh计算机科学家的不同ACEMIA

318
00:36:22,800 --> 00:36:33,280
程序员或只是uh uh uh构建这些工具的研究人员，他们启动了一个cypherpunk

319
00:36:33,280 --> 00:36:38,880
邮件列表是宣布许多这些工具的著名地方，例如宣布SSH

320
00:36:38,880 --> 00:36:45,360
我相信在那里，比特币在这里宣布了um，嗯，右边是um

321
00:36:47,840 --> 00:36:55,760
吉尔莫尔·乌姆（Gilmore um

322
00:36:56,560 --> 00:37:03,680
EFF，一个非常重要的组织，直到今天。在中间，埃里克·休斯（Eric Hughes）的作者

323
00:37:03,680 --> 00:37:10,160
Cypherpunk宣言。他实际上写下了Cypherpunks的这些原则

324
00:37:10,160 --> 00:37:17,280
相信一份摘要的宣言，在幻灯片上，他谈论

325
00:37:17,280 --> 00:37:26,640
我们构建了一些分布式开放的免费软件的那部分

326
00:37:28,160 --> 00:37:30,640
以某种方式禁止被遗忘，因为它确实是

327
00:37:34,480 --> 00:37:38,880
因为它是免费的，它只是一个演讲形式的形式

328
00:37:40,320 --> 00:37:46,880
例如，数学的解释也是著名的

329
00:37:46,880 --> 00:37:52,320
加密代码。就像你知道，我的T恤上有非法的话。这是

330
00:37:52,880 --> 00:38:00,320
在这里非法数学符号。是的，我真的建议您受到启发

331
00:38:00,320 --> 00:38:07,519
Cypherpunk宣言。我认为，左边是蒂莫西·C·梅（Timothy C. May）

332
00:38:07,519 --> 00:38:15,200
英特尔。他那里有一些有趣的发明。但是在这种情况下，他作为创始人之一

333
00:38:15,199 --> 00:38:22,480
对于Cypherpunk，男性会因Cypherpunk运动而增加。他将这个想法进一步。他创造了

334
00:38:22,480 --> 00:38:31,199
他在谈论这些工具的宣言中，不仅像我们能够一样

335
00:38:31,199 --> 00:38:37,599
创建它们并拥有隐私并保护自己，但实际上我们可以创建一个数字领域。

336
00:38:37,599 --> 00:38:47,039
这个数字世界，我们可以完全自由保护我们可以将数字资金匿名

337
00:38:48,960 --> 00:38:59,199
匿名证书我们自己的市场等我们自己的市场等，所以像这样的人

338
00:38:59,199 --> 00:39:07,279
已经设想了基于90年代初期密码学的数字货币，并且

339
00:39:07,599 --> 00:39:13,199
在80年代后期，我们已经有了这个主意

340
00:39:13,199 --> 00:39:20,400
cypherpunk也是如此，所以我们看到了这些尝试，我们看到了这些想法

341
00:39:20,400 --> 00:39:29,360
喜欢这样的东西，就像一些无法予以审查的免费数字平台uh是的

342
00:39:29,360 --> 00:39:37,220
是像以太坊如何适合所有这些问题的问题

343
00:39:37,220 --> 00:39:42,320
我有点主观的观点，我不想影响您的意见，我

344
00:39:42,320 --> 00:39:48,440
想问你们像呃，我我在这个观点中描述了我如何看以太坊的地方

345
00:39:48,440 --> 00:39:53,300
我看到它来自于此，它的价值和uh是什么

346
00:39:53,300 --> 00:39:59,240
我想问你你认为以太坊是什么

347
00:39:59,239 --> 00:40:09,859
我已经将其写入Discord聊天，我将在线程中检查一下

348
00:40:09,860 --> 00:40:27,140
世界电脑酷酷

349
00:40:29,480 --> 00:40:35,720
是的，约翰·吉尔莫尔（John Gilmore）

350
00:40:35,719 --> 00:40:41,839
不稳定的可爱计算机。哦，我喜欢那个。是的，我们有很多，我们有很多不同的意见。

351
00:40:42,079 --> 00:40:47,099
分散的网络，分散计算机，无信任的信任。世界计算机也是如此。

352
00:40:47,279 --> 00:40:50,519
和无信任。状态机。哦，我喜欢那个。酷，很酷。

353
00:40:51,139 --> 00:40:55,779
好吧，我们有许多不同的意见，但是我必须说你们所有人都是正确的。

354
00:40:55,980 --> 00:41:01,719
当然。我认为没有单一的方法可以定义以太坊

355
00:41:01,719 --> 00:41:06,059
因为每个人都看到其中的不同部分。

356
00:41:06,139 --> 00:41:06,779
哦，新互联网。

357
00:41:07,019 --> 00:41:07,799
这也很酷。

358
00:41:08,099 --> 00:41:09,379
我相信所有这些都是正确的。

359
00:41:09,379 --> 00:41:14,519
我相信以太坊就是这个数字领域

360
00:41:14,519 --> 00:41:18,379
任何人都可以找到自己的位置。

361
00:41:18,699 --> 00:41:22,559
任何人都可以从不同的角度看到它。

362
00:41:23,539 --> 00:41:26,799
这取决于您的动力，

363
00:41:26,959 --> 00:41:27,859
你来自哪里，

364
00:41:27,980 --> 00:41:28,819
你感兴趣的

365
00:41:28,879 --> 00:41:29,779
您正在从事的工作。

366
00:41:29,939 --> 00:41:31,519
您有一定的隧道视野

367
00:41:31,519 --> 00:41:37,920
像以太坊对你来说是什么

368
00:41:37,920 --> 00:41:43,280
是我们在谈论的话，当然我需要专注于整个大象

369
00:41:43,280 --> 00:41:50,639
关于协议本身的技术部分，我需要更多地谈论

370
00:41:50,639 --> 00:42:02,879
动手什么是以太坊嗯，呃，是的，因为即使我们有什么共同点

371
00:42:02,879 --> 00:42:08,319
像对此有不同的看法一样，我们想实现这些目标，我们想实现这些目标

372
00:42:08,319 --> 00:42:16,239
异象，这意味着我们需要使用UH并改善以太坊才能到达那里

373
00:42:16,239 --> 00:42:18,699
要回答，什么是定理？

374
00:42:20,000 --> 00:42:20,279
是的。

375
00:42:20,279 --> 00:42:23,379
而且有很多简单的术语。

376
00:42:23,379 --> 00:42:25,539
关于什么是定理的另一个描述。

377
00:42:25,539 --> 00:42:28,199
当然，您可以将人们指向白皮书

378
00:42:28,199 --> 00:42:31,639
如果有人问什么定理是一个定理的描述

379
00:42:32,299 --> 00:42:34,179
从十年前。

380
00:42:34,179 --> 00:42:37,639
在Vitalik，在比特币中揭示它，

381
00:42:37,639 --> 00:42:40,500
迈阿密，一次会议发生了很大变化。

382
00:42:42,379 --> 00:42:43,599
是的。所以。

383
00:42:44,239 --> 00:42:45,279
就是这样。

384
00:42:45,280 --> 00:42:53,640
这是一种方式。白皮书更像是一般的高级描述。这更多是

385
00:42:53,640 --> 00:42:59,680
该网络应如何工作的想法。但是我们可以将其进一步到黄纸，那就是

386
00:42:59,680 --> 00:43:09,740
以太坊的实际正式规范。它是由联合创始人之一加文·伍德（Gavin Wood）撰写的

387
00:43:09,739 --> 00:43:16,239
以太坊，也是原始C ++实现的创造者，他们实际上坐下

388
00:43:16,239 --> 00:43:25,199
写下它应该如何工作，不仅在理论上，而且实际使用数学，

389
00:43:27,019 --> 00:43:34,239
使用正式表达式，应该如何根据以太坊实施

390
00:43:34,239 --> 00:43:34,719
规格。

391
00:43:35,379 --> 00:43:37,019
所以这是一种方式。

392
00:43:37,179 --> 00:43:39,339
您在这里看到它是Verlin版本。

393
00:43:39,340 --> 00:43:45,420
当前版本是巴黎，所以已经过时了，但是这总是因为以太坊

394
00:43:45,420 --> 00:43:51,100
改变这就像原始的一样，就像某个原始愿景一样，但不是

395
00:43:51,100 --> 00:43:56,220
唯一仅指定定理的位置的方法不仅是斜体或gavin或

396
00:43:56,220 --> 00:44:01,660
鲁宾或这些定义以太坊的创始人，但这是社区，所以使用此过程

397
00:44:01,660 --> 00:44:08,539
以太坊改进的建议，任何人都可以提出更改以太坊改进或

398
00:44:09,340 --> 00:44:14,539
他们认为的改变对此很重要。

399
00:44:15,059 --> 00:44:19,380
EAP过程受BIP过程的启发

400
00:44:19,380 --> 00:44:21,100
来自比特币改进建议

401
00:44:21,100 --> 00:44:22,320
由Amir Taki发起，

402
00:44:22,920 --> 00:44:25,620
这是受Python中类似过程的启发。

403
00:44:25,620 --> 00:44:29,340
这通常是一种社区工作方式

404
00:44:29,340 --> 00:44:34,039
在这个大分布式项目上。

405
00:44:35,519 --> 00:44:39,039
但是有黄纸和EAP

406
00:44:39,039 --> 00:44:41,719
而且您应该基于它来实现一些东西。

407
00:44:41,779 --> 00:44:42,880
有点混乱，对吗？

408
00:44:42,940 --> 00:44:44,500
像所有这些不同的文档一样。

409
00:44:44,820 --> 00:44:48,300
因此，在这两个回购故事中，我们实际上有适当的规范。

410
00:44:48,820 --> 00:44:51,639
这就是执行规格和共识规格。

411
00:44:52,139 --> 00:44:54,300
还有这里的API。

412
00:44:55,179 --> 00:45:00,159
这就是真正定义所有以太坊及其应该使用的方式的原因。

413
00:45:01,659 --> 00:45:03,000
实际上是Python。

414
00:45:03,679 --> 00:45:06,539
对于某些人，像我这样的人，

415
00:45:06,539 --> 00:45:10,679
我很难阅读黄纸中的数学符号。

416
00:45:11,000 --> 00:45:14,259
在Python中，它实际上更可读。

417
00:45:14,739 --> 00:45:17,500
当然，您可以基于此生成测试。

418
00:45:17,619 --> 00:45:20,579
您可以根据规范测试实施。

419
00:45:21,380 --> 00:45:28,559
因此，这是一种非常实用的，非常非常有用的方式，我们在此处指定了定理。

420
00:45:29,279 --> 00:45:31,960
当然，如果您不是程序员，

421
00:45:32,079 --> 00:45:34,480
或者，如果您只想了解其工作方式，

422
00:45:34,480 --> 00:45:41,619
阅读代码非常沉重。我建议阅读带有解释的注释规范

423
00:45:41,619 --> 00:45:49,000
它的工作原理，为什么它以这种方式工作并为您提供上下文。因此，例如，本笃会的那个

424
00:45:49,000 --> 00:45:51,760
和E2书。

425
00:45:51,760 --> 00:45:55,000
对不起。

426
00:45:55,000 --> 00:46:03,019
因此，有此规范的版本，以太坊的不同版本。

427
00:46:03,019 --> 00:46:28,039
我们也称其为硬叉。以太坊升级已经进行了10年，并且从许多年前的边境宅基地开始。现在，您可以看到所有历史记录，以及以太坊组织中的所有升级，您可以看到哪些EIP，每个升级中的升级都耦合在一起。

428
00:46:28,039 --> 00:46:42,199
但是，即使以太坊发生了很大变化，但在十年中，它始终遵守某些原则。

429
00:46:42,779 --> 00:46:47,219
以太坊设计必须遵循基本的原则。

430
00:46:47,779 --> 00:46:52,880
它在现在不存在的网站档案中概述了它。

431
00:46:52,880 --> 00:46:55,900
这是一个非常不错的解释。我建议您潜入其中。

432
00:46:55,900 --> 00:47:01,220
但关键是这些开发人员需要具有一定的价值

433
00:47:02,599 --> 00:47:09,240
需要遵守某些规则，一些设计决策，

434
00:47:09,820 --> 00:47:15,740
而且我们不能取舍这会反驳这一点。

435
00:47:16,019 --> 00:47:18,900
所以，是的，简单，普遍性，模块化，

436
00:47:19,139 --> 00:47:23,639
非歧视，敏捷性，这些是基本原理

437
00:47:23,639 --> 00:47:28,059
以以太坊需要尽可能简单的方式

438
00:47:28,199 --> 00:47:34,119
以某种方式可以轻松实施它。

439
00:47:34,159 --> 00:47:36,639
它需要重新实现。

440
00:47:37,219 --> 00:47:40,980
如果您将其比较，我不知道，Linux内核，

441
00:47:40,980 --> 00:47:45,379
我无法想象有人只是写另一个版本。

442
00:47:47,099 --> 00:47:47,779
普遍性。

443
00:47:47,780 --> 00:47:55,780
因此，以太坊也喜欢概括，后来没有特征。

444
00:47:55,780 --> 00:48:03,780
普遍性和非普通化意味着以太坊没有歧视。

445
00:48:03,780 --> 00:48:07,780
它不偏向某些功能。

446
00:48:07,780 --> 00:48:14,780
以太坊不应该做一件事情，而是成为人们想要使用的任何一般平台。

447
00:48:14,780 --> 00:48:29,860
这意味着核心协议无法包含可以定义某些用户行为或更高级别的功能。

448
00:48:29,860 --> 00:48:37,260
例如，核心协议中无法实现令牌标准。

449
00:48:37,260 --> 00:48:47,500
它与以太坊之上创造的ERCS人建立了

450
00:48:47,500 --> 00:48:52,460
协议本身是我已经谈论过的模块化，您将看到它

451
00:48:52,460 --> 00:48:59,340
正如我稍后向您展示协议的那样，但是我们在以太坊中所关注的是UH

452
00:48:59,340 --> 00:49:04,620
在这里提到的封装复杂性，我们封装了不同的部分

453
00:49:04,619 --> 00:49:08,859
以太坊，网络的不同部分。

454
00:49:09,440 --> 00:49:13,920
他们在一些相对简单的API中互相交谈。

455
00:49:13,920 --> 00:49:16,539
因此，我们可以调试它。

456
00:49:16,659 --> 00:49:21,259
如果只有其中一个失败，我们就能拥有更多的安全性。

457
00:49:22,839 --> 00:49:27,859
是的，我想阐述的一件事是非风险厌恶

458
00:49:27,860 --> 00:49:30,760
随着以太坊的变化，

459
00:49:30,760 --> 00:49:38,460
这些变化取决于它们带来的好处。

460
00:49:38,760 --> 00:49:42,240
因此，开发人员愿意冒险

461
00:49:42,240 --> 00:49:43,720
为了一定的好处，对吗？

462
00:49:44,079 --> 00:49:47,460
如果有很小的变化给我们带来巨大的好处，

463
00:49:47,700 --> 00:49:49,380
绝对值得这样做。

464
00:49:50,180 --> 00:49:53,160
这就是原则。

465
00:49:55,220 --> 00:49:55,220
466

466
00:49:55,220 --> 00:49:57,680
对不起，伙计们。

467
00:49:57,860 --> 00:50:04,740
对我来说很早就嗯，现在我想问你什么时候谈论不同的模块不同的部分

468
00:50:04,740 --> 00:50:09,860
我一直提到的理论就像协议的一部分一样，您认为什么是

469
00:50:09,860 --> 00:50:16,340
以太坊的心脏是我们从我们建立以太坊的最重要部分

470
00:50:16,340 --> 00:50:25,220
在一起，嗯，让我们看看你会认为是什么是大脑

471
00:50:25,219 --> 00:50:30,819
以太坊的心是的

472
00:50:35,459 --> 00:50:39,779
好吧，我们看到EVM共识的人哦，很好嗯

473
00:50:42,500 --> 00:50:48,899
那么，还有什么可以随意写哲学，没关系，我谈论的是

474
00:50:48,899 --> 00:50:52,579
看到人或哲学真是太好了，我的意思是技术上的模块化

475
00:50:52,579 --> 00:50:59,840
对于数据结构的一部分，您现在什么都看不到，因为我在等待

476
00:50:59,840 --> 00:51:09,079
您要透露它是点对点网络，好的数字树好吧，我相信我

477
00:51:09,079 --> 00:51:15,500
相信你是对的，我相信你们所有人都是对的，因为这些都是重要的

478
00:51:15,500 --> 00:51:21,380
以太坊的一部分。我希望它从某个地方开始。

479
00:51:21,380 --> 00:51:25,699
因此，当我询问以太坊的心脏时，我希望它从EVM开始。

480
00:51:26,420 --> 00:51:30,559
通常，通常提到以太坊的重要组成部分。

481
00:51:30,559 --> 00:51:37,159
这几乎是所有核心，非常具体的功能。

482
00:51:37,159 --> 00:51:38,500
那么什么是EVM？

483
00:51:38,500 --> 00:51:48,880
现在，如果您在这里使用计算机，这基本上是一个虚拟化的CPU

484
00:51:48,880 --> 00:51:58,000
具有X86或基于ARM的CPU，具有特定于体系结构的类似指令集，这是硬件

485
00:51:58,000 --> 00:52:04,360
实施一些指令设置了一些基本组件的一些基本说明

486
00:52:04,360 --> 00:52:12,519
逻辑算术并与数据一起工作，以做任何事情，例如计算机可以做任何事情

487
00:52:12,519 --> 00:52:18,599
或一切都成为通用机器，所以这就是硬件级别

488
00:52:18,599 --> 00:52:25,240
但是在计算机科学编程中的软件中，我们经常做的是虚拟化这些

489
00:52:25,240 --> 00:52:30,760
指令集我们创建虚拟机，例如，如果您再次是开发人员，也许您

490
00:52:30,760 --> 00:52:40,440
与JAVA虚拟机JVM合作。这些机器是创建的，以便如果您编写

491
00:52:40,440 --> 00:52:47,080
某些代码与不同制造商的不同机器上的行为可能有所不同

492
00:52:47,080 --> 00:52:53,960
可以理解某些说明的略有不同。就像它在我的机器上工作一样。

493
00:52:53,960 --> 00:52:58,760
因此，现在，如果我想复制这种体验，它在我的机器上有效。我创建一个虚拟

494
00:52:58,760 --> 00:53:04,520
每台机器上总是相同的环境，因为如果我在此执行某些内容

495
00:53:04,520 --> 00:53:11,080
虚拟环境嗯，它总是会以EVM的相同结果而最终出现

496
00:53:11,080 --> 00:53:16,600
虚拟机有其自己的指令设置，其中有30个

497
00:53:16,600 --> 00:53:26,120
嗯，嗯，这些可以完全巡回演出，他们可以做任何事情

498
00:53:26,119 --> 00:53:32,039
EVM是实际执行引擎，

499
00:53:32,199 --> 00:53:37,099
以太坊程序运行的环境。

500
00:53:37,539 --> 00:53:39,440
现在，如果所有计算机，

501
00:53:39,579 --> 00:53:40,880
每台运行以太坊的计算机

502
00:53:40,880 --> 00:53:42,819
具有同一虚拟机

503
00:53:42,819 --> 00:53:45,159
或不仅是相同的实现，

504
00:53:45,299 --> 00:53:48,299
但是它是通过相同规范实现的

505
00:53:48,299 --> 00:53:50,159
现在可以用不同的语言实施

506
00:53:50,159 --> 00:53:51,019
和不同的方式。

507
00:53:51,519 --> 00:53:54,839
如果仍然遵循规格，

508
00:53:54,840 --> 00:53:58,820
执行的结果是程序运行的结果

509
00:53:58,820 --> 00:54:01,539
在这个虚拟机中，总是相同的。

510
00:54:01,539 --> 00:54:04,720
这意味着所有这些以太坊客户都可以就某事达成共识。

511
00:54:05,460 --> 00:54:09,579
我也会在这里提到三明治的复杂性

512
00:54:09,579 --> 00:54:11,380
我在以前的幻灯片中有。

513
00:54:12,960 --> 00:54:14,460
这就是以太坊的工作方式。

514
00:54:14,680 --> 00:54:18,180
因此，您可能有，您可能会听说过牢固性或毒蛇

515
00:54:18,180 --> 00:54:20,660
或其他一些高级语言，

516
00:54:20,980 --> 00:54:22,800
可读性和可审核。

517
00:54:22,800 --> 00:54:30,660
然后我们有一个非常复杂的编译器，这是一个很大的部分，它是野兽。

518
00:54:31,580 --> 00:54:32,660
非常复杂。

519
00:54:32,920 --> 00:54:37,260
在底部，我们具有EVM字节码，该虚拟机的指令。

520
00:54:37,260 --> 00:54:39,420
再说一次，没有那么多。

521
00:54:39,780 --> 00:54:44,560
它是可以阅读的，以某种方式可以正式验证。

522
00:54:45,120 --> 00:54:46,980
实际虚拟机的作用。

523
00:54:47,180 --> 00:54:51,720
因此，当我们有这两个非复合件具有中间的复杂性时，

524
00:54:51,719 --> 00:54:58,919
使用EVM在底部创建一个复杂的测试图像，但要使EVM起作用，它需要一些数据

525
00:54:58,919 --> 00:55:09,719
需要输入和输出一些数据，因此我们已经拥有状态，因此以太坊中的数据

526
00:55:09,719 --> 00:55:16,279
数据结构数据库，该数据库持有所有uh所有地址的余额

527
00:55:16,280 --> 00:55:23,320
其当前状态UH所有合同的网络的当前状态

528
00:55:23,320 --> 00:55:32,040
所有合同的代码和所有合同的数据正确，这就是我们所说的状态

529
00:55:32,040 --> 00:55:36,840
我知道你们中的许多人是您不喜欢以太坊的州的无政府主义者，因为以太坊

530
00:55:36,840 --> 00:55:43,640
是州立机器的状态机器是我们拥有的计算机科学的UH原理

531
00:55:43,639 --> 00:55:51,000
再次可以导致不同状态和不同输入的机器。因此，EVM过程

532
00:55:51,719 --> 00:55:57,960
输出一些数据，更新状态，创建我们称其为状态过渡，该输入的某些输入

533
00:55:57,960 --> 00:56:05,559
是交易。这样的交易就是这些有关状态过渡的说明

534
00:56:05,559 --> 00:56:11,000
应该发生，如果是正确的话，如果它在EVM规则中有效

535
00:56:11,000 --> 00:56:17,320
它创建成功的状态过渡的网络我们更新以太坊的状态

536
00:56:17,320 --> 00:56:25,159
如果您熟悉比特币设计，如果您或类似的基于UTXO的UH加密货币，这是

537
00:56:25,159 --> 00:56:31,559
以太坊的主要差异具有一个单一的全球状态，基本上是一个数据库

538
00:56:31,559 --> 00:56:37,880
当前状态在比特币或其他货币中使用UTXOS的当前价值

539
00:56:37,880 --> 00:56:47,840
我们只有每个交易的无填充输出，而不是单个股份。

540
00:56:48,660 --> 00:56:53,579
因此，这就是以太坊的设计决策之一。

541
00:56:54,320 --> 00:56:58,300
它起作用的一种方式，该状态是一棵大默克尔树，一棵默克尔·帕特里夏树。

542
00:56:58,920 --> 00:57:05,240
交易存储在另一棵树中，但更新此状态。

543
00:57:05,239 --> 00:57:14,079
当然，交易来自Mempool，这是进入网络的所有交易的池。

544
00:57:14,539 --> 00:57:20,399
这些是通过对等网络闲聊的。

545
00:57:21,339 --> 00:57:33,459
因此，点对点是与其他客户的通信接口，网络中的其他节点可以广播交易。

546
00:57:33,460 --> 00:57:40,619
因此，您的交易通过此点对点网络，

547
00:57:40,900 --> 00:57:44,780
每个接收它的客户验证它是否正确。

548
00:57:45,420 --> 00:57:50,340
然后，如果这是正确的话，请再次将其广播给所有这些同行。

549
00:57:50,800 --> 00:57:53,599
因此，即使网络大又分散，

550
00:57:54,179 --> 00:57:56,619
交易扩展到所有网络。

551
00:57:57,400 --> 00:58:01,780
所有这些，还有更多，但是可以说，

552
00:58:01,780 --> 00:58:03,680
是执行层。

553
00:58:04,680 --> 00:58:06,780
这就是我们所说的以太坊的执行部分。

554
00:58:08,080 --> 00:58:12,940
如果您正在使用一些以太坊钱包

555
00:58:12,940 --> 00:58:15,540
或者，如果您正在使用一些DAPP，

556
00:58:15,760 --> 00:58:17,340
一些远端应用，

557
00:58:18,180 --> 00:58:20,200
你在谈论这个，

558
00:58:20,320 --> 00:58:21,620
到以太坊的执行层

559
00:58:21,620 --> 00:58:24,380
使用一些标准化的API。

560
00:58:25,060 --> 00:58:27,140
这是RPC，JSON RPC API，

561
00:58:27,680 --> 00:58:31,140
可以读取当前数据

562
00:58:31,139 --> 00:58:36,739
如果您想知道此帐户中有多少ETH。您需要阅读状态。所以你

563
00:58:36,739 --> 00:58:42,739
从执行层读取数据。或者，如果您想编写，如果要发送交易，

564
00:58:42,739 --> 00:58:47,460
您的钱包签名，然后将其发送给该客户端将其广播到网络。

565
00:58:48,819 --> 00:58:52,179
客户接收它，验证它并将其发送到对等层。

566
00:58:52,179 --> 00:59:00,099
因此，这是执行部分。现在，客户实施的另一个API是引擎API。

567
00:59:01,139 --> 00:59:05,559
这与共识的一部分交谈。

568
00:59:05,559 --> 00:59:09,460
那么，该执行如何知道正确的呢？

569
00:59:09,460 --> 00:59:10,819
链的头是什么？

570
00:59:10,819 --> 00:59:15,379
所有其他节点都同意什么？

571
00:59:15,379 --> 00:59:19,259
在BFT的输入链接中，

572
00:59:19,259 --> 00:59:24,259
文档中呈现的容错问题。

573
00:59:24,900 --> 00:59:26,299
这就是它的到来。

574
00:59:26,299 --> 00:59:30,940
就像我们需要就当前状态达成共识

575
00:59:30,940 --> 00:59:37,420
整个以太坊不仅像我看到的那一块网络一样，嗯，这是嗯

576
00:59:37,420 --> 00:59:46,780
通过叉选择向执行客户端或该执行层指示，这当然是uh uh

577
00:59:46,780 --> 00:59:53,579
由以太坊的共识算法管理的LMD幽灵或最新消息驱动的uh管理

578
00:59:53,579 --> 00:59:56,480
最清楚，最重的观察到的子树。

579
00:59:56,480 --> 01:00:02,880
这是解释这一叉子轨道规则的一种非常术语的方式

580
01:00:02,880 --> 01:00:06,940
以及这种共识机制。

581
01:00:06,940 --> 01:00:11,699
因此，基于哪个...基于许多...

582
01:00:11,699 --> 01:00:17,039
最多的证明，叉子或树，链

583
01:00:17,039 --> 01:00:20,199
船上最多的证明

584
01:00:20,199 --> 01:00:22,599
是被认为是规范的。

585
01:00:22,599 --> 01:00:27,519
然后，它是由fork选择向客户决定的。

586
01:00:27,519 --> 01:00:32,219
这是其自己的点对点网络以及其他一些部分以及当前的

587
01:00:32,219 --> 01:00:33,219
硬叉。

588
01:00:33,219 --> 01:00:35,639
我们的斑点的随机性决定了随机性。

589
01:00:35,639 --> 01:00:38,659
所有这些都是共识层。

590
01:00:38,659 --> 01:00:46,259
因此，以太坊现在是这两层相互连接的两层

591
01:00:46,259 --> 01:00:49,960
API。

592
01:00:49,960 --> 01:00:56,039
嗯，是的，共识也有自己的API，您也可以再次与此客户进行通信

593
01:00:56,039 --> 01:01:01,720
现在了解状态，而不是定理本身，而不是像帐户和交易一样

594
01:01:01,720 --> 01:01:08,679
但是关于共识状态有多少验证器有多少uh uh验证器做什么是什么

595
01:01:08,679 --> 01:01:16,760
电台我们从链条API中要求的最终确定的UH负责人等是什么

596
01:01:16,760 --> 01:01:21,720
共识层。如果您正在运行验证者，如果您参与共识，

597
01:01:22,440 --> 01:01:28,520
您的信标节点或此共识层验证最新块，将其发送到

598
01:01:28,520 --> 01:01:36,040
执行层以验证块的完整性。然后，如果被认为有效，

599
01:01:36,040 --> 01:01:41,880
验证者使用其键签署证明。好吧，我相信这个网络，

600
01:01:41,880 --> 01:01:48,920
这个块是正确的。我证明了这一点，并将此数据（该签名）发送到共识层

601
01:01:48,920 --> 01:01:53,800
它通过自己的点对点网络广播的位置。因此共识有自己的

602
01:01:53,800 --> 01:02:00,680
点对点。与执行层不同。所以这是...所以整个事情就像

603
01:02:00,680 --> 01:02:05,079
简化协议不同部分的概述。再次从我说的话

604
01:02:05,079 --> 01:02:12,360
真的就像这些盒子中的每个盒子都是巨大的兔子孔，您可以潜入其中的每个盒子

605
01:02:12,360 --> 01:02:20,519
在这里的每个盒子上，成为UH的专家

606
01:02:20,519 --> 01:02:24,920
将在执行引擎中的客户端中进行抽象，以便这些实现这些执行

607
01:02:24,920 --> 01:02:30,039
客户端或执行层客户端和信标节点或控制台的客户端以及

608
01:02:30,039 --> 01:02:34,679
业务层客户端，为这些客户提供不同的单词。每个人都有自己的点对点

609
01:02:34,679 --> 01:02:39,559
右侧网络。执行客户只与执行客户端交谈，

610
01:02:39,559 --> 01:02:44,519
信标节点只是在与信标节点交谈。他们有自己的沟通协议。

611
01:02:45,559 --> 01:02:52,039
这是执行的开发点对点，并且对信标的对等点。

612
01:02:53,079 --> 01:02:57,400
他们有自己的API，可以提供不同的API

613
01:02:58,039 --> 01:03:04,519
不同的数据，它们需要在引擎API上连接，所以是的，这就是嗯

614
01:03:05,320 --> 01:03:11,559
嗯，这就像uh的高级概述是什么构成以太坊节点或以太坊客户端

615
01:03:11,559 --> 01:03:20,680
这两个部分连接了，但是当然这是一个新的嗯，但这是嗯

616
01:03:20,679 --> 01:03:28,359
那是在合并之后发生的，所以向您展示点对点网络呃，这就是如何

617
01:03:28,359 --> 01:03:33,399
以太坊看起来很正确，只是为了再次给出基本的东西，而只是为了让您了解

618
01:03:33,399 --> 01:03:38,119
在左边，如果您现在正在观看此流，或者您正在观看

619
01:03:38,119 --> 01:03:45,159
记录您的计算机正在连接到单个服务器，该服务器正在将数据发送到所有

620
01:03:45,159 --> 01:03:51,799
你们嗯，但在以太坊中，这类似于右边的更多内容，也许在图表中

621
01:03:51,799 --> 01:03:57,960
每个人都与每个人都联系，这并不是真正的真实，您与某些节点相连

622
01:03:57,960 --> 01:04:03,719
这些连接到某些等，您可以连接到每个人，但是每个节点可以是

623
01:04:03,719 --> 01:04:09,000
连接到数十个或数百个不同的同龄人，我们称他们为同龄人，因为他们在同一

624
01:04:09,000 --> 01:04:16,840
像这样，这个以太坊网络没有任何主人没有任何主人

625
01:04:16,840 --> 01:04:23,639
正如我们所说的那样，失败了

626
01:04:23,639 --> 01:04:31,719
peer和uh可以互相交谈并可以连接，因此您的客户会发现节点

627
01:04:31,719 --> 01:04:38,039
他周围连接到他们并将八卦数据交换在特定的订单上，这

628
01:04:38,039 --> 01:04:44,440
是的，是的，向您展示块的样子

629
01:04:44,440 --> 01:04:49,880
嗯

630
01:04:49,880 --> 01:04:56,360
合并了以太坊的工作证明，信标链和以太坊基本上是

631
01:04:56,360 --> 01:05:02,599
他们是单独的网络，信标连锁店正在研究以太坊的

632
01:05:02,599 --> 01:05:09,159
那里有验证的数据的存款合同，但是以太坊本身没有学习

633
01:05:09,880 --> 01:05:17,000
无论如何，嗯，这是合并的时刻

634
01:05:17,960 --> 01:05:23,960
执行层的块成为信标链块的一部分，因此

635
01:05:23,960 --> 01:05:28,599
执行层我们拥有UH，我们拥有您看到所有交易的交易数据

636
01:05:28,599 --> 01:05:34,519
从0到n，它们在默克尔树上，它们的根在标题中。

637
01:05:35,639 --> 01:05:41,799
这个标题的哈希是整个块的哈希。信标连锁店现在

638
01:05:43,719 --> 01:05:53,719
您会看到它拥有所有证明0至n。因此确认的签名

639
01:05:53,719 --> 01:06:00,599
该执行层阻止了此交易数据，该块已验证

640
01:06:00,599 --> 01:06:07,079
嗯，然后将其存入并从验证器中退出UH，是的

641
01:06:08,119 --> 01:06:14,759
这就是右侧的方式，是的，箭头指向左侧

642
01:06:14,759 --> 01:06:19,639
现在我意识到它看起来可能有些混乱，但这当然是区块链

643
01:06:19,639 --> 01:06:26,359
在区块链中，我们哈希先前我们包括上一个块的哈希，所以这个块

644
01:06:26,359 --> 01:06:31,400
引用上一篇嗯

645
01:06:31,400 --> 01:06:35,960
在信标内的交易数据的执行数据中看起来像今天

646
01:06:35,960 --> 01:06:44,279
链，现在是的，所以这是这个灯塔和执行节点的小东西

647
01:06:44,280 --> 01:06:52,040
这些客户中实现的端口实际上是用某些语言编写的实际程序

648
01:06:52,600 --> 01:06:57,800
您可以正确运行这就是重点，所以这就是它在一起的地方，这就是您的方式

649
01:06:57,800 --> 01:07:05,000
使用以太坊，因此，如果您想成为以太坊用户，这意味着私下使用以太坊

650
01:07:05,000 --> 01:07:11,640
您可以安全地运行其中一些客户端，以验证网络中的数据

651
01:07:11,639 --> 01:07:17,179
让您与之互动，让您连接到实际以太坊网络，

652
01:07:17,319 --> 01:07:19,359
发送交易，阅读其数据，

653
01:07:19,359 --> 01:07:20,739
这是互动方。

654
01:07:20,940 --> 01:07:22,599
这是实际的以太坊。

655
01:07:23,059 --> 01:07:28,059
因此，我图表中最底部的执行层的执行层的实现

656
01:07:28,059 --> 01:07:33,339
是Goetherum的Go，没关系，在.net，C尖锐，

657
01:07:34,539 --> 01:07:35,420
besu在爪哇。

658
01:07:36,199 --> 01:07:39,359
Go中的Aragon最初被存储为turbogat，

659
01:07:39,360 --> 01:07:46,260
turbogat是一个以太坊的叉子，但后来发展起来就像非常独特的建筑

660
01:07:46,260 --> 01:07:54,240
但是，仍然保留一部分Go代码基础uh或仍然喜欢在RUST上写红色时仍在Go中

661
01:07:54,240 --> 01:08:02,400
它基本上使用了aragon建筑蚕，uh uh休息是一个像这样的α红色

662
01:08:02,400 --> 01:08:08,400
最上面的四个已经准备就绪，他们正在运行网络，网络由实例组成

663
01:08:08,400 --> 01:08:11,700
因此，计算机在第一行中运行软件。

664
01:08:12,059 --> 01:08:15,400
在第二行中，RET在Alpha中。

665
01:08:15,559 --> 01:08:16,840
有些人正在运行它，

666
01:08:16,920 --> 01:08:19,460
但不建议用于生产。

667
01:08:19,819 --> 01:08:21,180
蚕仍在开发中。

668
01:08:21,619 --> 01:08:23,960
它也是ERGO体系结构的实现

669
01:08:23,960 --> 01:08:25,279
以更模块化的方式。

670
01:08:25,940 --> 01:08:27,399
然后是以太坊。

671
01:08:27,520 --> 01:08:28,980
在JavaScript，打字稿中。

672
01:08:29,539 --> 01:08:31,960
这更多是一个实验客户

673
01:08:32,739 --> 01:08:35,760
用于测试，

674
01:08:35,760 --> 01:08:38,579
用于验证规格，等等。

675
01:08:39,220 --> 01:08:41,159
然后在共识层侧，

676
01:08:41,360 --> 01:08:45,380
驱动共识的上部，

677
01:08:45,380 --> 01:08:46,039
验证者，

678
01:08:46,480 --> 01:08:48,520
这些都是准备生产的客户

679
01:08:48,520 --> 01:08:50,500
再次运行网络。

680
01:08:52,220 --> 01:08:54,079
Go中的棱镜，Rust的灯塔，

681
01:08:54,239 --> 01:08:58,140
Nimbus和Nim的Java的Teku

682
01:08:58,140 --> 01:08:59,820
and Roadster in TypeScript.

683
01:09:00,280 --> 01:09:03,340
还有其他不准备生产的客户，

684
01:09:03,400 --> 01:09:04,260
which are in development

685
01:09:04,260 --> 01:09:06,159
还有一个专有客户，

686
01:09:06,159 --> 01:09:08,159
the RAINDAIN that I mentioned.

687
01:09:08,159 --> 01:09:11,020
Lambda Plus开发的Elixir中有一个客户，

688
01:09:11,020 --> 01:09:12,539
就像在生产中一样。

689
01:09:12,539 --> 01:09:15,560
但是还有其他人正在发展。

690
01:09:15,560 --> 01:09:18,460
但是这些就是已经存在的。

691
01:09:18,460 --> 01:09:20,720
您实际上可以去他们的存储库，

692
01:09:20,720 --> 01:09:21,539
了解它们。

693
01:09:21,539 --> 01:09:24,239
正如我之前所说，所有这些都是免费的开源。

694
01:09:24,239 --> 01:09:27,800
因此，您实际上可以查看客户端代码库

695
01:09:27,800 --> 01:09:30,520
为了确保它们遵循规格。

696
01:09:30,520 --> 01:09:31,980
您可以在那里做出贡献。

697
01:09:31,979 --> 01:09:40,179
为了确保网络的安全稳定性，所有这些客户都需要进行测试。

698
01:09:40,179 --> 01:09:47,959
需要进行大量测试，因为好的，网络在那里运行，就像大量的金钱和人们的资金等。

699
01:09:47,959 --> 01:09:51,719
因此，您知道，您知道，鲁ck地接受它。

700
01:09:51,719 --> 01:09:56,359
我们对这些客户进行了大量测试。

701
01:09:56,359 --> 01:10:02,699
客户团队，开发人员和其他测试团队专门用于测试和

702
01:10:02,699 --> 01:10:09,739
安全总是，尤其是在这些人难以为人们的困难之前，这些升级是大量的

703
01:10:09,739 --> 01:10:15,779
测试客户。因此，首先是以太坊斜线测试，这只是一个基本

704
01:10:15,779 --> 01:10:23,339
国家过渡测试以及客户应通过的基本测试集。即将到来

705
01:10:23,340 --> 01:10:29,900
从原始以太坊设计中，只有一层不是共识层，所以测试

706
01:10:29,900 --> 01:10:37,420
just the execution layer similar to execution spec tests which are which are based on the

707
01:10:38,779 --> 01:10:46,140
根据规格非常有趣的规格，非常重要的是Hive

708
01:10:46,140 --> 01:10:56,060
中下部中间A Hive是一个端到端线束工具，它就像一个巨大的工具，可以让您

709
01:10:56,060 --> 01:11:03,260
做所有可以与其中不同客户端旋转网络的一切，并将它们一起运行

710
01:11:03,260 --> 01:11:09,500
不同的测试嗯，您可以使用它来运行许多模拟，并且它创建了

711
01:11:09,500 --> 01:11:17,180
真的很像复杂且强壮的UH测试工具UH Kurtosis，uh也可以让您喜欢创建一个

712
01:11:17,979 --> 01:11:22,539
与不同客户端的本地测试网，然后有模糊性

713
01:11:23,579 --> 01:11:29,979
大量测试不同的边缘案例UH Mario正在进行模糊

714
01:11:29,979 --> 01:11:34,380
客户，然后像您知道基准应力测试一样的其他测试，确保

715
01:11:34,380 --> 01:11:40,380
例如，如果我们部署大量验证者或大量验证者或其中该怎么办？

716
01:11:40,380 --> 01:11:42,579
像，它会腹部吗？它可以生存吗？

717
01:11:42,880 --> 01:11:44,340
如果我们创建一个巨大的区块怎么办？

718
01:11:44,340 --> 01:11:46,680
像，客户可以处理吗？

719
01:11:46,680 --> 01:11:50,180
因此，就像测试实际性能一样，客户的功能

720
01:11:51,140 --> 01:11:53,039
应该的作品非常重要。

721
01:11:53,039 --> 01:11:53,680
为我们进行测试。

722
01:11:53,680 --> 01:11:56,880
这些就像是一个脱衣舞

723
01:11:58,180 --> 01:12:03,579
像我们参与网络的一部分一样，更高级别的测试。

724
01:12:03,579 --> 01:12:08,100
我们采用同步的20个客户。

725
01:12:08,399 --> 01:12:16,420
然后，我们将它们固定在生产中，将它们固定在硬叉上。

726
01:12:16,640 --> 01:12:22,800
但是他们只是像自己的叉子网络一样创建。

727
01:12:22,880 --> 01:12:24,680
我们看到发生了什么。

728
01:12:25,140 --> 01:12:30,819
在这种情况下，我们在左侧看到，您会看到这些客户中的两个或四个

729
01:12:30,819 --> 01:12:42,340
客户对在工作的阴影下倒下了。是的，客户测试当然

730
01:12:42,340 --> 01:12:49,380
就像客户自己测试客户一样。并像连续整合一样

731
01:12:51,219 --> 01:13:00,259
他们可以测试每个PR，每个对代码的提交。因此，要重申我在这里描述的内容，

732
01:13:00,260 --> 01:13:06,980
以太坊的创造是如何创建的，以及uh的一切都在以太坊之外

733
01:13:06,980 --> 01:13:12,340
理论工作中的过程是，我们从某个想法开始了一些一般描述，然后

734
01:13:12,340 --> 01:13:19,619
需要研究UH的可​​行性，以达到情感性我们如何弄清楚如何

735
01:13:19,619 --> 01:13:26,579
为了使这个想法实际上以某种可行的方式实现，uh是根据它指定的

736
01:13:26,579 --> 01:13:30,779
它。该规范在软件中实现。

737
01:13:30,779 --> 01:13:33,779
该软件被测试，然后被拒绝，因为

738
01:13:33,779 --> 01:13:34,779
没有人喜欢它。

739
01:13:35,880 --> 01:13:37,279
真的是一件事。

740
01:13:39,779 --> 01:13:42,779
当然，像许多这些事情一样，有些事情被采用了

741
01:13:42,779 --> 01:13:45,079
在主网上。但这确实是一回事。

742
01:13:45,079 --> 01:13:48,479
如果您是研究人员，则可以

743
01:13:48,479 --> 01:13:49,779
从字面上度过几年。

744
01:13:49,779 --> 01:13:53,939
就像我知道花费三年或更长时间的人

745
01:13:53,939 --> 01:13:58,139
一件事情，一个以太坊的一次升级，这确实是一个很好且有用的

746
01:13:58,139 --> 01:14:02,359
某些边缘案件或其他东西，因此仍未采用，它仍然被拒绝，并且

747
01:14:02,359 --> 01:14:03,559
你必须回来。

748
01:14:03,559 --> 01:14:07,659
您从此图表上的任何点回来。

749
01:14:07,659 --> 01:14:11,279
您可能会被拒绝，然后回到研究自己的想法。

750
01:14:11,279 --> 01:14:15,299
您可能无法测试，需要修复实施。

751
01:14:15,299 --> 01:14:21,299
否则实施不正确遵循规格，您需要解决此问题。

752
01:14:21,300 --> 01:14:27,300
是的，这就像一个非常互动的周期。

753
01:14:27,300 --> 01:14:31,500
就像它永远是向前迈出的一步，向前一步。

754
01:14:31,500 --> 01:14:34,500
而且这并不容易。

755
01:14:34,500 --> 01:14:42,900
因此，现在您可能会问，好吧，所有这些不同的开发人员的整个过程如何，所有这些不同的团队都可以工作。

756
01:14:42,900 --> 01:14:45,600
所以我向您展示了这里的不同客户。

757
01:14:45,600 --> 01:14:48,659
正确的。有五个。有。

758
01:14:48,659 --> 01:14:53,479
此页面上的七个客户在这里我提到了其他一些客户

759
01:14:53,479 --> 01:14:58,279
被开发，因此我们拥有这些测试团队客户团队研究团队

760
01:14:58,279 --> 01:15:02,319
在一起基本上就像20个不同的团队大约有20个不同的团队

761
01:15:02,319 --> 01:15:06,779
团队，也许是200名来自这些不同团队的人，

762
01:15:06,779 --> 01:15:11,579
独立研究定理，所以问题是它们如何协调

763
01:15:11,579 --> 01:15:15,779
我们如何运送我们如何就一个定理达成共识

764
01:15:15,779 --> 01:15:22,739
应该看起来像。因此，首先，有很多部分。我可能会从底部开始。

765
01:15:22,739 --> 01:15:32,099
ETH Research是一个论坛，人们发布了他们的想法。人们首先发布一些东西

766
01:15:32,099 --> 01:15:39,219
两类。因此，当我想看到一些问题或一些缺少功能时，

767
01:15:39,220 --> 01:15:45,619
以太坊或应该更改的内容，我可以在研究上发布我的发布

768
01:15:45,619 --> 01:15:53,300
在我展示我的研究结果的地方，我的想法和我的方式，我以此的方式测试了它

769
01:15:53,300 --> 01:16:02,260
我提出了它的建议，并在那里进行了大量讨论

770
01:16:02,260 --> 01:16:09,780
正如我之前提到的eips，eips uh uh uh uh uh un fut魔术师

771
01:16:09,780 --> 01:16:16,020
论坛另一个论坛不喜欢像一般研究思想，例如饮食研究，而是

772
01:16:16,020 --> 01:16:24,739
特定的eips和uh他们的方式是指定的，然后像EAP AP一样

773
01:16:24,739 --> 01:16:30,579
关于EIP本身，所以我们也有像社区一样，您知道编辑EIP并制作

774
01:16:30,579 --> 01:16:35,140
当然，您知道他们是有道理的，他们是正式正确的，这主要是由

775
01:16:35,140 --> 01:16:43,939
CAD Heritage Community嗯，他们也有这个UH窥视EAP系列，并带有视频

776
01:16:43,939 --> 01:16:52,420
喜欢UH EAP UH冠军的空间喜欢UH谈论他们的建议，所以这些是论坛

777
01:16:52,420 --> 01:16:56,899
讨论公众讨论很多讨论正在发生许多UH协调

778
01:16:56,899 --> 01:17:05,539
在研发和不和谐中。研发不和谐是类似于我们的EPS的服务器

779
01:17:05,539 --> 01:17:10,899
许多不同的团队参与讨论和更新等。这里

780
01:17:13,379 --> 01:17:19,219
在研发中，您也可以看到开发呼叫的发布。所以现在有

781
01:17:19,219 --> 01:17:26,019
开发人员的不同调用是规则的，也许是最重要的部分

782
01:17:26,020 --> 01:17:32,180
关注如果您想学习像现在正在发生的事情一样，所以我们称之为

783
01:17:32,180 --> 01:17:38,180
ACD调用所有核心应用程序，这些应用集中在执行层或共识层上

784
01:17:38,180 --> 01:17:45,380
总是像今天这样的星期四，所以今天晚些时候他们会像我不知道一样被召唤

785
01:17:45,380 --> 01:17:54,020
50个人代表的不同团队的代表讨论了当前的改变之前的行动

786
01:17:54,020 --> 01:18:00,580
呃，在硬叉之前，现在最大的主题主题是计划即将到来

787
01:18:00,580 --> 01:18:08,340
10升级，我相信今天是客户发行的截止日期，所以如果有人

788
01:18:08,340 --> 01:18:16,340
不是这样，所以在这些电话中，他们同意了，这是一个合理的

789
01:18:16,340 --> 01:18:23,700
我们每个团队中每个团队都会运送此功能的截止日期，以便他们交谈，他们

790
01:18:23,699 --> 01:18:29,699
能够使用它协调，然后它们并非所有核心开发人员，而是像特定的开发

791
01:18:29,699 --> 01:18:36,099
uh功能uh uh uh call of to to to to to an for It for It for to

792
01:18:36,099 --> 01:18:44,099
四个或我们测试UH测试网时，或者我错过了uh uh the uh defece defece defeceed the u u

793
01:18:44,099 --> 01:18:50,019
嗯，我们正在部署测试网或EF是一个讨论的功能

794
01:18:50,020 --> 01:18:55,220
嗯，还有钱包选项卡的协调呼吁，以供您的钱包标准类似的标准

795
01:18:55,220 --> 01:19:01,060
在协议之外，值得一提的是，是的，这些都是常规电话

796
01:19:01,060 --> 01:19:06,660
值得关注，这是一个实际发生的协调

797
01:19:06,660 --> 01:19:12,340
人们喜欢一些想法，而不是那么简单，你知道我会喜欢的

798
01:19:12,340 --> 01:19:17,380
之所以说是因为像文明的讨论一样，但仍然可以是一个热情的讨论

799
01:19:17,380 --> 01:19:23,159
有时需要数周和几个月才能达成共识。

800
01:19:23,699 --> 01:19:27,400
从不同的角度来看，这一点非常重要

801
01:19:27,600 --> 01:19:30,900
不同的背景和不同的团队表达了他们的意见。

802
01:19:31,380 --> 01:19:32,440
这都是公开的。

803
01:19:33,000 --> 01:19:34,300
它是在YouTube上流式传输的。

804
01:19:34,720 --> 01:19:37,500
您甚至可以通过加入研发不和谐来参加。

805
01:19:37,739 --> 01:19:41,180
因此，任何人都可以对以太坊核心表达自己的看法。

806
01:19:42,739 --> 01:19:45,819
是的，这是在PM回购中协调的。

807
01:19:45,819 --> 01:19:50,960
因此，您可以看到所有这些电话。他们是安排的。它们是要讨论的主题。

808
01:19:50,960 --> 01:20:04,939
他们将提出一个主题，依此类推。您可以看到录音，以太坊中所有以前的会议的记录。pm项目管理存储库。

809
01:20:05,819 --> 01:20:07,079
这就是它的样子。

810
01:20:07,079 --> 01:20:14,760
嗯，一个生命的黑客是，如果你是嗯，如果你假装自己在工作，你就知道某个地方

811
01:20:14,760 --> 01:20:22,119
您可以将其放在您的屏幕上，然后像您已经打电话给UM一样行动，是的

812
01:20:22,119 --> 01:20:27,079
除此之外，人们还亲自见面，因为有时候你更知道说话

813
01:20:27,079 --> 01:20:33,720
面对面，只是弄清楚呃，就像动手动手一样，这是一张著名的照片

814
01:20:33,720 --> 01:20:39,320
嗯，人们正在拍手到第一个UH商品

815
01:20:39,320 --> 01:20:47,880
实际测试的UH实际上尝试了在希腊中实施的实施，这是20 20 20 i

816
01:20:47,880 --> 01:20:56,840
认为嗯，没有2021年。然后是一年前在奥地利的去年

817
01:20:56,840 --> 01:21:02,920
完成UH提款的工作，再次为4个工作，就像100人见面

818
01:21:04,199 --> 01:21:11,239
在不同的会议中，呃，呃，专注于uh运送下一件事，所以

819
01:21:12,840 --> 01:21:16,600
是的，这就是开发人员的协调方式，但问题就像可以的

820
01:21:16,600 --> 01:21:20,680
这些开发人员实际上正在开发他们正在从事的工作

821
01:21:20,680 --> 01:21:26,520
好吧，有研究人员，人们建议这些新升级的新功能

822
01:21:26,520 --> 01:21:32,680
呃，嗯

823
01:21:32,680 --> 01:21:41,320
宽松的路线图，您也许看到了这个嗯，这就像Uh Vitalik的路线图UH

824
01:21:41,320 --> 01:21:50,680
美丽的美丽图表，但是，这不像您知道最终的以太坊路线图

825
01:21:50,680 --> 01:21:56,360
不是这样，这将发生，这只是对当前事物的枚举

826
01:21:56,359 --> 01:22:03,239
在当前的想法上工作，嗯，现在是R D的景观，因为它改变了

827
01:22:03,239 --> 01:22:08,199
呃，也许我们会弄清楚其中一些盒子实际上不符合以太坊的视觉或

828
01:22:08,199 --> 01:22:14,920
随着我们的前进，请进行一些权衡，依此类推，以便让您了解正确的事情

829
01:22:14,920 --> 01:22:22,599
现在，就像我在我的可视化图表中对盒子说的话一样

830
01:22:22,600 --> 01:22:30,920
以太坊再次您可以深入潜水并成为这些盒子中的任何一个，基本上是呃，呃

831
01:22:30,920 --> 01:22:38,680
第一大部分是成功完成的合并UM，我们合并了以太坊

832
01:22:38,680 --> 01:22:44,920
但是，有了股份证明，UH有一些升级到股份的证明

833
01:22:44,920 --> 01:22:50,840
单倍最终确定最终确定速度，因此我们仍然可以改善原因协议

834
01:22:50,840 --> 01:22:58,279
嗯，在这种情况下，搜索UH专注于可扩展性，以便启用吞吐量

835
01:22:58,279 --> 01:23:05,640
更多的交易UH，包括实施同行破折号实施数据可用性

836
01:23:05,640 --> 01:23:12,119
碎片和444即将进行的升级UH Scourge的斑点是集中的

837
01:23:12,119 --> 01:23:20,680
关于经济学，这是可能的一部分

838
01:23:20,680 --> 01:23:28,840
问题可能会引起网络中的某些问题，例如集中化或UM或问题

839
01:23:28,840 --> 01:23:35,079
从这些构建基块中，有一些建议，例如UH协议构建器分离

840
01:23:35,079 --> 01:23:43,159
在协议中包含，并且在UH上有一些审查制度等等

841
01:23:43,159 --> 01:23:49,079
此外，还有提到的Staking经济学，也像UH的股份改善证明UH的证明

842
01:23:49,079 --> 01:23:54,760
探索我们如何更有效地使用UH的经济学

843
01:23:56,840 --> 01:24:02,840
边缘是垂直的尝试

844
01:24:02,840 --> 01:24:10,359
帕特里夏（Patricia）uh三，就像我们已经这样做了10年的一种方式，但现在有

845
01:24:10,359 --> 01:24:16,920
在开发过程中的提议矢量承诺奇迹树的提议正在使用向量

846
01:24:16,920 --> 01:24:23,960
呃，可以创建一棵树，可以像UH见证人一样，更简单的证明证明了

847
01:24:23,960 --> 01:24:30,920
可以是可以启用无状态或更轻的客户的UH

848
01:24:33,239 --> 01:24:41,000
清除意味着摆脱技术深度和所有数据，所以像一堆状态一样

849
01:24:41,000 --> 01:24:49,319
一堆永远不会使用的旧数据，但客户必须持有该节点

850
01:24:49,319 --> 01:24:57,319
嗯，所以我们实际上可以对UH进行一些改进，使旧数据过期

851
01:24:57,319 --> 01:25:05,800
uh挥霍在那里，uh uh evm改进了uh vdfs等，是的，这就像一个

852
01:25:05,800 --> 01:25:10,680
简短的概述，让您了解不同轨道上发生了什么以太坊的冲动

853
01:25:11,000 --> 01:25:17,699
最终，所有这些都试图与这个三角形的怪物作斗争。

854
01:25:17,699 --> 01:25:19,359
也许您以前看到了。

855
01:25:19,359 --> 01:25:23,460
这是区块链本身的问题。

856
01:25:23,460 --> 01:25:33,180
因为，以太坊的全部要点是是安全的分散分散网络。

857
01:25:33,180 --> 01:25:39,039
我以前说的是使权力下放，以经营其中一个客户，

858
01:25:39,039 --> 01:25:45,199
实际使用以太坊以一种无信任和安全的方式运营这些客户之一，并且

859
01:25:45,199 --> 01:25:52,399
可以使用UH验证UH，因此这意味着您需要实际验证交易

860
01:25:52,399 --> 01:25:59,199
网络中的数据，因此，如果我想使用以太坊，我会使用自己的客户端，该客户端验证了所有

861
01:25:59,199 --> 01:26:06,800
然而，历史和当前状态UM需要数百GB的数据以及如何

862
01:26:06,800 --> 01:26:13,600
CPU时间的数十个或数百小时，因此在笔记本电脑上运行非常沉重

863
01:26:14,320 --> 01:26:20,720
如果我们放置更多需要验证的数据，当然会变得越来越重，并且

864
01:26:20,720 --> 01:26:26,480
如果我们继续这样做，它会成倍重重，最终只有少数

865
01:26:27,039 --> 01:26:34,159
嗯，有几个单一的UH机构运行这些节点，这将是集中的

866
01:26:34,159 --> 01:26:35,819
给我们一个失败点。

867
01:26:35,819 --> 01:26:38,760
因此，以太坊需要分散。

868
01:26:38,760 --> 01:26:40,819
以太坊正在限制自己。

869
01:26:40,819 --> 01:26:43,119
它限制了它的链

870
01:26:44,119 --> 01:26:47,399
活动到您可以运行的程度。

871
01:26:47,399 --> 01:26:51,300
这些客户之一是在覆盆子Pi上，非常便宜，

872
01:26:51,300 --> 01:26:54,599
低功率的100，200磅设备加上SSD。

873
01:26:55,399 --> 01:26:59,059
所以。所以，是的，这就是重点。

874
01:26:59,059 --> 01:27:03,300
现在，我们这些研究人员的战斗是什么，当然是不同的

875
01:27:03,300 --> 01:27:10,100
问题，但这是能够无信任地运行以太坊的重要组成部分

876
01:27:10,100 --> 01:27:17,380
时间允许处理更多的数据，这是一种困境中的矛盾，但是

877
01:27:17,940 --> 01:27:26,100
这里概述的有多种方式可以改善它的边缘搜索um是的，是的

878
01:27:26,100 --> 01:27:30,900
专注于此，是的，所以以太坊有许多不同的改进

879
01:27:30,899 --> 01:27:37,939
我们可以解决的不同事物，最终您可能会认为这很好

880
01:27:37,939 --> 01:27:44,259
一场无限的战斗是一个无限的花园，嗯

881
01:27:44,259 --> 01:27:50,179
总是被修剪和维护的花园和嗯，这是一个更真实的，就像我相信以太坊

882
01:27:50,179 --> 01:27:55,779
核心协议是一个花园，总是需要一些园丁来照顾它

883
01:27:55,779 --> 01:28:05,819
它。现在，它需要扩展和修复许多东西，并且您知道，修复了一堆

884
01:28:05,819 --> 01:28:11,539
要达到更好状态的问题。但是，在某一时刻将有一个美丽的花园

885
01:28:11,539 --> 01:28:17,559
只需要维护。在那一刻，将会有骨化。那是我

886
01:28:17,560 --> 01:28:26,680
希望我相信我们的目标是要与Uh Ethereum更喜欢的最终设计，UH不允许

887
01:28:26,680 --> 01:28:32,760
任何重大的更改都只能对更新进行少量维护，这就是

888
01:28:32,760 --> 01:28:38,760
理想的结束游戏，嗯，这仍然是一个婴儿角落，从未真正结束

889
01:28:39,880 --> 01:28:46,520
呃，但是如果我们到达骨化的一点并没有真正改变以太坊，那将是美丽的

890
01:28:46,520 --> 01:28:52,360
那将是一个美丽的世界，不是，维塔利克会很高兴我们需要我们需要

891
01:28:52,360 --> 01:28:57,640
让他快乐的家伙，是的，如果您对以太坊对此感到兴奋，请

892
01:28:57,640 --> 01:29:05,480
所有的进展正在发生，否则客户的发展

893
01:29:05,480 --> 01:29:11,080
嗯，您在正确的地方，您可以在EPF学习小组中学习所有有关它的知识

894
01:29:11,079 --> 01:29:17,239
但是，是的，现在到达这里时，您能做什么，所以我相信我

895
01:29:17,239 --> 01:29:24,680
现在提供了很多资源，您可以从本演示文稿中看到一些资源

896
01:29:24,680 --> 01:29:33,319
我相信他们所有人都在Wiki中的UH中，一个Wiki，当我看到时

897
01:29:33,319 --> 01:29:39,880
资源我也是说，只是您知道我向您展示的图表并正在解释的图片

898
01:29:39,880 --> 01:29:45,560
您可以开始潜入这些客户的不同部分，您可以了解更多有关它的信息

899
01:29:45,560 --> 01:29:52,359
查找更多相关的相关连接文档并分享它们来分享不和谐

900
01:29:52,359 --> 01:30:04,520
并在Wiki中更新它们，以便您可以找到使您更感兴趣的原因

901
01:30:04,520 --> 01:30:11,160
您的利基市场是您的专业知识是什么

902
01:30:11,160 --> 01:30:16,680
当您看到这个机器的怪物时，都正确提及

903
01:30:16,680 --> 01:30:24,600
不同的路线图点，或者如果您看到以太坊，呃，这里有很多部分

904
01:30:24,600 --> 01:30:30,120
测试等等，没有一个人会在所有这些方面都是专家

905
01:30:30,119 --> 01:30:34,359
一个将成为整个以太坊的开发商的人。

906
01:30:34,760 --> 01:30:40,420
但这始终是其中一些部分或执行或共识中的专家。

907
01:30:41,119 --> 01:30:44,640
这就是模块化使我们喜欢关注的目标。

908
01:30:44,739 --> 01:30:45,680
您更喜欢什么？

909
01:30:45,779 --> 01:30:48,300
您发现最重要，令人兴奋的是什么？

910
01:30:48,300 --> 01:30:51,779
也许您有一些才能。

911
01:30:52,300 --> 01:30:54,800
是的，专注于此。

912
01:30:54,960 --> 01:30:56,180
找到您的利基市场并做出贡献。

913
01:30:56,380 --> 01:30:57,220
找到这些资源。

914
01:30:57,220 --> 01:31:03,300
编写更多文档并将其上传到Wiki打开PR学习如何使用git学习如何

915
01:31:03,300 --> 01:31:10,539
实际上，通过UH为我们的免费开放Wiki UH做出贡献，为开源项目做出了贡献

916
01:31:10,539 --> 01:31:15,380
如果您在这里开放的人，已经开放了一些公关

917
01:31:15,380 --> 01:31:21,079
知道慢慢地回顾了您可以看到已经打开并在那里做出贡献的PRS

918
01:31:21,079 --> 01:31:27,020
给您添加一些内容或添加您的想法，例如好的，也许应该以不同的方式写入

919
01:31:27,020 --> 01:31:37,260
等等，是的，付出了，是的，您可以在这一点

920
01:31:37,260 --> 01:31:44,300
嗯，您可以从同一uh中的所有先前群体中找到项目

921
01:31:44,300 --> 01:31:50,700
我们为Wiki使用的GitHub组织，因此在EAT协议中uh遵循队列

922
01:31:50,700 --> 01:31:55,500
斜线项目中的四个核心三个UH您看到所有项目的项目目录

923
01:31:55,500 --> 01:31:58,279
这是由以前的下面处理的。

924
01:31:58,460 --> 01:32:00,500
现在我一开始提到的

925
01:32:00,500 --> 01:32:03,579
该程序受EPF的启发

926
01:32:03,579 --> 01:32:06,880
是因为这些人花了头几周，

927
01:32:07,000 --> 01:32:09,520
奖学金计划的头几个月

928
01:32:09,520 --> 01:32:12,520
了解协议及其利基市场，

929
01:32:12,640 --> 01:32:13,359
关于他们的领域。

930
01:32:13,880 --> 01:32:15,920
如果您阅读了他们的项目，

931
01:32:16,000 --> 01:32:17,779
如果您阅读，他们会编写每周更新。

932
01:32:17,880 --> 01:32:21,420
您可以每两周或每周查看

933
01:32:21,420 --> 01:32:23,600
由许多才华横溢的人撰写

934
01:32:23,600 --> 01:32:25,079
谁一直在学习以太坊

935
01:32:25,079 --> 01:32:26,500
或其中的不同部分。

936
01:32:27,059 --> 01:32:30,019
您可以看到他们的学习曲线。

937
01:32:30,140 --> 01:32:31,720
您可以看到他们一直在做什么

938
01:32:31,720 --> 01:32:34,380
也许找到资源

939
01:32:34,380 --> 01:32:36,319
他们在那里提到

940
01:32:36,579 --> 01:32:37,500
带他们到Wiki，

941
01:32:38,000 --> 01:32:38,800
向他们学习

942
01:32:38,800 --> 01:32:40,800
所以你可以跟随他们的道路

943
01:32:40,800 --> 01:32:42,220
因为这就是他们创建它的原因。

944
01:32:42,260 --> 01:32:44,439
这就是为什么我们保持公开，公开的原因

945
01:32:44,559 --> 01:32:45,979
所以你们都可以研究它。

946
01:32:46,039 --> 01:32:48,340
您可以了解他们的项目

947
01:32:48,340 --> 01:32:50,140
和他们的旅程。

948
01:32:50,779 --> 01:32:50,920
是的。

949
01:32:51,260 --> 01:32:54,399
是的，我相信这就是所有人。

950
01:32:55,079 --> 01:32:59,100
这是第一周的演讲。

951
01:32:59,960 --> 01:33:04,319
目前，第二周已经有资源。

952
01:33:04,899 --> 01:33:08,760
下周，我们将使用FlightClient潜入执行层。

953
01:33:09,600 --> 01:33:13,680
但是在此之前，请查看第一周的更多资源

954
01:33:13,680 --> 01:33:16,420
还有一些预读本周两部分。

955
01:33:17,380 --> 01:33:19,600
是的，已经90分钟了。

956
01:33:19,699 --> 01:33:20,939
我所有的时间。

957
01:33:21,039 --> 01:33:21,519
我的天啊。

958
01:33:22,439 --> 01:33:24,720
很抱歉让您保持这么长时间，伙计们。

959
01:33:25,079 --> 01:33:28,859
因此，如果有的话，让我们花五分钟的时间来解决一些问题。

960
01:33:29,460 --> 01:33:30,619
让我们总结一下。

961
01:33:34,380 --> 01:33:34,899
是的。

962
01:33:35,039 --> 01:33:36,640
我们有任何疑问吗？

963
01:33:37,559 --> 01:33:44,819
非常感谢您，乔什（Josh）发送了所有链接。

964
01:33:44,819 --> 01:33:53,220
因此，在这里，屏幕截图，乔什（Josh）在那里分享的降价表的怪物。

965
01:33:53,220 --> 01:34:03,420
这是所有这些每周的更新

966
01:34:03,420 --> 01:34:08,060
看看这个人一直在从事的项目，如果您不知道您是否感兴趣

967
01:34:08,060 --> 01:34:15,440
对灯塔客户创建高跷的贡献解决了新的信标API的创建，因此

968
01:34:15,440 --> 01:34:20,699
如果您对那里的不同项目感兴趣，您可以看到

969
01:34:20,699 --> 01:34:23,300
本周更新中的人。

970
01:34:23,300 --> 01:34:24,300
是的。

971
01:34:24,300 --> 01:34:25,300
是的。

972
01:34:25,300 --> 01:34:26,300
惊人的。

973
01:34:26,300 --> 01:34:37,979
如果有任何疑问，还有更多评论可以随时继续进行。

974
01:34:37,979 --> 01:34:42,260
我认为我们还有一些时间。

975
01:34:42,260 --> 01:34:43,260
是的。

976
01:34:43,260 --> 01:34:48,059
看起来现在有几个人在打字，但没有看到任何问题

977
01:34:48,059 --> 01:34:49,139
目前。

978
01:34:50,699 --> 01:35:01,559
所以历史...错误。

979
01:35:01,559 --> 01:35:06,579
在OS出现之前是F丢失的F。

980
01:35:06,579 --> 01:35:10,239
正是我要做的。

981
01:35:10,239 --> 01:35:11,539
不，我不...

982
01:35:11,539 --> 01:35:12,699
我只是...

983
01:35:12,699 --> 01:35:15,260
昨天我只是在给斯托尔曼发短信。

984
01:35:15,260 --> 01:35:16,300
他是我的朋友。

985
01:35:16,300 --> 01:35:17,300
我只是...

986
01:35:17,300 --> 01:35:18,300
我在这里有偏见。

987
01:35:18,300 --> 01:35:20,900
我推动那里的f部分。

988
01:35:22,320 --> 01:35:26,159
无论如何，如果现在没有问题...

989
01:35:26,159 --> 01:35:27,340
我的相机不起作用。

990
01:35:29,220 --> 01:35:30,800
不，这太可怕了。

991
01:35:31,800 --> 01:35:33,739
无论如何，如果现在没有问题，

992
01:35:33,860 --> 01:35:37,900
请随时随时在不和谐中使用我。

993
01:35:38,440 --> 01:35:39,920
我在这里为你们。

994
01:35:42,180 --> 01:35:44,560
对我来说是早晨，所以一天的余下时间，

995
01:35:44,920 --> 01:35:47,560
我想我准备回答您的问题。

996
01:35:47,560 --> 01:35:53,000
可以随意将它们放入此线程或左侧的相应频道中

997
01:35:53,000 --> 01:35:57,800
协议Wiki部分具有不同的部分，因此请随时询问那里

998
01:35:59,960 --> 01:36:04,840
如果您有什么，是的，是的，非常感谢您的时间

999
01:36:04,840 --> 01:36:08,920
你们当中有很多人出现了，我不得不为此醒来，所以我真的很感激

1000
01:36:10,840 --> 01:36:14,920
或者至少喜欢这么早就公开谈论这么多人

1001
01:36:17,560 --> 01:36:19,220
惊人的。非常感谢，马里奥。

1002
01:36:19,539 --> 01:36:21,580
这是一次很棒的演讲。

1003
01:36:21,580 --> 01:36:25,480
这次我们肯定会记录下来。

1004
01:36:26,080 --> 01:36:28,220
所以，是的。

1005
01:36:28,340 --> 01:36:32,240
对于那些没有抓到这两次的人，

1006
01:36:32,400 --> 01:36:34,280
您可以在录音上看到它。

1007
01:36:34,900 --> 01:36:38,580
我们将在下周一回来

1008
01:36:38,580 --> 01:36:43,380
对于第二周的内容

1009
01:36:43,380 --> 01:36:45,960
在执行层上有光线客户端。

1010
01:36:47,560 --> 01:36:52,860
是的。谢谢你们。 UTC星期一4点见。我相信。是的。

1011
01:36:55,220 --> 01:36:56,860
惊人的。是的。多谢。

1012
01:36:56,860 --> 01:37:00,760
感谢您熬夜。再见。

1013
01:37:17,560 --> 01:37:19,620
你

