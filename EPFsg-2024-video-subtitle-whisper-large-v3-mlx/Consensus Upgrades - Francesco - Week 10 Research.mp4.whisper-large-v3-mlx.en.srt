1
00:00:30,000 --> 00:00:47,159
 Thank you.

2
00:01:00,000 --> 00:01:29,980
 Thank you.

3
00:01:30,000 --> 00:01:40,000
 ¶¶

4
00:01:40,000 --> 00:01:50,000
 ¶¶

5
00:01:50,000 --> 00:02:00,000
 ¶¶

6
00:02:00,000 --> 00:02:10,000
 ¶¶

7
00:02:10,000 --> 00:02:20,000
 ¶¶

8
00:02:20,000 --> 00:02:49,979
 I don't know.

9
00:02:50,000 --> 00:03:19,979
 Thank you.

10
00:03:20,000 --> 00:03:49,979
 Thank you.

11
00:04:20,000 --> 00:04:49,980
 Thank you.

12
00:04:50,000 --> 00:05:19,980
 Thank you.

13
00:05:20,000 --> 00:05:30,000
 ¶¶

14
00:05:30,000 --> 00:05:40,000
 ¶¶

15
00:05:40,000 --> 00:05:50,000
 ¶¶

16
00:05:50,000 --> 00:06:12,420
 Thank you.

17
00:06:50,000 --> 00:07:00,000
 ¶¶

18
00:07:00,000 --> 00:07:10,000
 ¶¶

19
00:07:10,000 --> 00:07:39,000
 ¶¶

20
00:07:40,000 --> 00:08:08,439
 All right.

21
00:08:08,439 --> 00:08:11,660
 Welcome back to the Ethereum Protocol Fellowship.

22
00:08:12,180 --> 00:08:16,759
 This is our final session today,

23
00:08:17,000 --> 00:08:19,439
 week 10 on the research track.

24
00:08:20,480 --> 00:08:23,439
 And we have Francesco with us today

25
00:08:24,019 --> 00:08:27,360
 to talk about some consensus upgrades.

26
00:08:29,079 --> 00:08:30,699
 Yeah, so I'll go ahead and let Mario

27
00:08:30,699 --> 00:08:32,580
 give him a more proper introduction,

28
00:08:32,799 --> 00:08:35,100
 but happy to have you here, Francesco.

29
00:08:35,100 --> 00:08:37,000
 And thanks for everyone for tuning in.

30
00:08:38,440 --> 00:08:40,580
 Thank you so much for being here, Francesco.

31
00:08:40,720 --> 00:08:42,940
 You might not realize, but you are a very special guest

32
00:08:42,940 --> 00:08:47,680
 because it's the very, very last talk of the whole EPF study group

33
00:08:47,680 --> 00:08:50,480
 and especially the research track.

34
00:08:51,180 --> 00:08:54,540
 And yeah, we have Francesco here today because he's a researcher.

35
00:08:55,720 --> 00:09:00,000
 Francesco studied mathematics and joined EF a few years ago.

36
00:09:00,000 --> 00:09:03,900
 Since then, he's been working mostly on consensus,

37
00:09:03,899 --> 00:09:10,779
 a lot of interesting consensus research papers and proposals that came from Francesco and his

38
00:09:10,779 --> 00:09:17,699
 colleagues. But today he will specifically be talking about fork choice, give us a recap of

39
00:09:17,699 --> 00:09:22,699
 how the Gaspar even works and what are the upgrades coming, like the single-slot finality,

40
00:09:23,059 --> 00:09:28,539
 which is his field. So yeah, thank you so much for being here. I hope you can hear us all well

41
00:09:28,539 --> 00:09:34,779
 and we can hear you too yeah yeah i can hear you can you hear me awesome yeah all good so yeah uh

42
00:09:34,779 --> 00:09:40,139
 the stage is yours uh you can share your slides here so if you have any presentation link go for

43
00:09:40,139 --> 00:09:47,740
 it now and uh we can start in a second yeah um let me uh first share a link to slides and then

44
00:09:47,740 --> 00:09:49,399
 and then I'll just share screen.

45
00:10:13,960 --> 00:10:17,080
 Do you see the presentation screen?

46
00:10:17,080 --> 00:10:18,080
 it here.

47
00:10:18,080 --> 00:10:19,080
 Okay.

48
00:10:19,080 --> 00:10:20,080
 Awesome.

49
00:10:20,080 --> 00:10:28,420
 So, yeah, I guess one thing I'm not entirely sure about, because I haven't done this before

50
00:10:28,420 --> 00:10:31,300
 or followed, is it possible to interact with people?

51
00:10:31,300 --> 00:10:32,300
 Can people ask questions?

52
00:10:32,300 --> 00:10:34,240
 Yeah, yeah, yeah.

53
00:10:34,240 --> 00:10:36,120
 So people will ask questions in our Discord.

54
00:10:36,120 --> 00:10:43,060
 I can send it if you have extra space to watch it, but when they ask questions, we can make

55
00:10:43,060 --> 00:10:44,060
 a pause.

56
00:10:44,060 --> 00:10:45,360
 We will just ask you.

57
00:10:45,360 --> 00:10:49,600
 So after each segment, give us a minute for potential questions, and we will chime in

58
00:10:49,600 --> 00:10:51,639
 with, read what people are asking.

59
00:10:52,519 --> 00:10:52,800
 Okay.

60
00:10:52,919 --> 00:10:53,060
 Yeah.

61
00:10:53,080 --> 00:10:55,180
 I mean, if you can, yeah, if you can do that.

62
00:10:55,440 --> 00:10:56,480
 We can handle it.

63
00:10:56,700 --> 00:10:56,759
 Yeah.

64
00:10:56,820 --> 00:10:57,039
 Okay.

65
00:10:58,360 --> 00:10:58,759
 Yeah.

66
00:10:59,039 --> 00:11:04,879
 Then, yeah, I guess I'll just go ahead and start and kind of start the recap of Gaspar.

67
00:11:05,120 --> 00:11:10,080
 I'm not entirely sure how much people know about the protocol or things like that.

68
00:11:10,080 --> 00:11:14,620
 So I guess if you get early feedback about, you know, this being too slow or like, you

69
00:11:14,620 --> 00:11:18,779
 everything is clear or that I need to slow down or whatever, just let me know

70
00:11:18,779 --> 00:11:25,019
 early that would be helpful. So Gaspar is just the name of our protocol it comes from

71
00:11:25,740 --> 00:11:29,980
 it comes from the two components that characterize it which are

72
00:11:29,980 --> 00:11:38,060
 LMD ghost, that's just where the g comes from, and GasparFFG. Let's first dive

73
00:11:38,059 --> 00:11:44,539
 into the ghost part because that's kind of the maybe the most critical component um so ghost

74
00:11:44,539 --> 00:11:50,059
 stands for previous heaviest heaviest observed sub-3 and basically this already describes what

75
00:11:50,059 --> 00:11:54,859
 ghost actually does like as an algorithm and essentially this is like a force choice algorithm

76
00:11:54,859 --> 00:12:01,179
 so it's an algorithm that allows you given uh basically a block tree to find the head of the

77
00:12:01,179 --> 00:12:06,539
 chain so the what you want to consider as the canonical chain essentially uh in case there are

78
00:12:06,539 --> 00:12:12,860
 forks and ghost originally operates just on blocks so here there's no boats there's just blocks

79
00:12:12,860 --> 00:12:16,620
 um so basically the way it works it is uh you just run through the block tree

80
00:12:17,259 --> 00:12:22,299
 when there's no forks you just keep going uh once you get to a fork you basically choose the

81
00:12:22,299 --> 00:12:26,939
 heaviest and so that yeah the the first part is the greedy part where you just just keep going

82
00:12:26,939 --> 00:12:32,539
 like really and you make a choice whenever you have to um and the heaviest part is that you uh

83
00:12:32,539 --> 00:12:37,740
 or heaviest sub-tree part, is that once you do have to make a choice at a fork, you just choose

84
00:12:37,740 --> 00:12:41,819
 the heaviest sub-tree. So in this case, the sub-tree above has five blocks and the one below

85
00:12:41,819 --> 00:12:47,500
 has four, so you choose the highest one, and then you keep going this way, and you eventually get

86
00:12:47,500 --> 00:12:54,219
 to have the chain. So this was originally basically proposed as an alternative to longest

87
00:12:54,219 --> 00:13:00,939
 chain, so you can see that in the case of longest chain, let's say that there's a period of maybe

88
00:13:00,940 --> 00:13:08,540
 network problems and the honest chain or honest kind of uh well the honest participants basically

89
00:13:08,540 --> 00:13:15,020
 construct a forked block tree so it's like green part um whereas the there might be like some

90
00:13:15,020 --> 00:13:20,540
 adversarial chain which in this case is this red one that's kind of hidden um and uh yeah basically

91
00:13:20,540 --> 00:13:25,580
 not revealed by the adversary and this is actually just a chain uh it's it's not fourth maybe it's

92
00:13:25,580 --> 00:13:30,540
 literally just one party that's that's doing this like one minor uh at the time uh and then yeah in

93
00:13:30,539 --> 00:13:34,219
 not this chain this would be the canonical chain like once it's revealed

94
00:13:34,219 --> 00:13:36,939
 uh this red one oh by the way can you see my uh pointer

95
00:13:40,459 --> 00:13:45,899
 uh we don't see your cursor if you know it's what you mean uh can you can you move up we can see we

96
00:13:45,899 --> 00:13:51,819
 can say yeah it's a bit small but okay it'll do but yeah anyway so basically this chain would be

97
00:13:51,819 --> 00:13:57,179
 the the canonical one but the wheat ghost it's it's the sub tree above that uh so yeah in this

98
00:13:57,179 --> 00:14:04,339
 case this block would be the canonical one. As it turns out it actually also works better

99
00:14:04,339 --> 00:14:10,779
 once you transition to having votes. So, you know, with the proof of stake, we have all

100
00:14:10,779 --> 00:14:17,059
 of these validators that do attestations and stuff like this. So, basically, we want to

101
00:14:17,059 --> 00:14:23,139
 stop, and we did stop using blocks as the way to kind of measure weight. So, you know,

102
00:14:23,139 --> 00:14:26,799
 we were talking about heaviest, we think of weight.

103
00:14:26,799 --> 00:14:30,100
 But in this case, really weight is just whatever it is.

104
00:14:30,100 --> 00:14:31,480
 Well, it's actually difficulty.

105
00:14:31,480 --> 00:14:34,000
 It's not like one block comes for one.

106
00:14:34,000 --> 00:14:35,179
 There's the difficulty part.

107
00:14:35,179 --> 00:14:37,340
 But anyway, in Perlmere Stake, we really

108
00:14:37,340 --> 00:14:40,960
 want weight to be basically given by boats and by stake,

109
00:14:40,960 --> 00:14:42,159
 essentially.

110
00:14:42,159 --> 00:14:43,659
 And so we kind of do the same thing,

111
00:14:43,659 --> 00:14:47,179
 except that now we have this kind of weighted block tree,

112
00:14:47,179 --> 00:14:50,139
 or like a block tree with boats, with these little clouds, which

113
00:14:50,139 --> 00:14:51,620
 are at the stations.

114
00:14:51,620 --> 00:14:55,740
 And then, yeah, LMD Ghost is basically message-driven,

115
00:14:55,740 --> 00:14:59,240
 so basically vote-driven ghost, but also latest.

116
00:14:59,240 --> 00:15:02,480
 So we only consider the most recent vote

117
00:15:02,480 --> 00:15:04,759
 for any given validator.

118
00:15:04,759 --> 00:15:08,159
 But other than that, it's the same thing essentially.

119
00:15:08,159 --> 00:15:10,419
 So yeah, and we can also, so far,

120
00:15:10,419 --> 00:15:13,940
 we've talked about LMD Ghost as a fourth-choice algorithm,

121
00:15:13,940 --> 00:15:15,919
 but you can also think about it as a protocol,

122
00:15:15,919 --> 00:15:19,139
 and actually it is basically what our protocol is.

123
00:15:19,139 --> 00:15:23,299
 So you take, this is a slot of the protocol

124
00:15:23,299 --> 00:15:25,100
 and basically it starts with a proposal

125
00:15:25,100 --> 00:15:28,379
 where a block is kind of added to the block tree.

126
00:15:28,379 --> 00:15:30,699
 Then there's these head boats where you just basically,

127
00:15:30,699 --> 00:15:33,139
 which kind of an attestation of today

128
00:15:33,139 --> 00:15:35,179
 or one part of our attestations

129
00:15:35,179 --> 00:15:37,319
 where basically each validator just says,

130
00:15:37,319 --> 00:15:39,720
 this is what I think is the head of the chain

131
00:15:39,720 --> 00:15:41,759
 and that's it, then another proposal

132
00:15:41,759 --> 00:15:43,159
 and it keeps going like this.

133
00:15:43,159 --> 00:15:45,120
 And basically this is what our slots look like,

134
00:15:45,120 --> 00:15:47,139
 except that we also have attestation aggregation

135
00:15:47,139 --> 00:15:48,240
 that kind of complicates things.

136
00:15:48,240 --> 00:15:52,159
 So we actually have three phases instead of two, but it's sort of irrelevant here.

137
00:15:53,039 --> 00:15:55,279
 So it basically looks like this block is proposed,

138
00:15:56,000 --> 00:15:59,080
 people vote on it and move on and they kind of, you know,

139
00:15:59,080 --> 00:16:02,860
 these people that put on it, they try to kind of give way to it

140
00:16:02,860 --> 00:16:06,659
 and make sure that it stays then in the chain to kind of impose their view of the chain.

141
00:16:08,000 --> 00:16:09,440
 So that's how it goes.

142
00:16:09,440 --> 00:16:13,000
 And then there is the customer for G part, which is this friendly

143
00:16:13,000 --> 00:16:15,120
 finality gadget or any finality gadget

144
00:16:15,120 --> 00:16:22,220
 it, where basically it's okay, we start with some block tree, and then we consider some

145
00:16:22,220 --> 00:16:26,879
 of them, some of the block tree checkpoints, in our case, the echo boundary blocks, and

146
00:16:26,879 --> 00:16:31,860
 then we try to finalize some of these checkpoints so that basically we prevent reorgs, which

147
00:16:31,860 --> 00:16:35,000
 might happen with the protocol like it goes.

148
00:16:35,000 --> 00:16:41,840
 And yeah, basically, we have this essentially links between checkpoints, which then lead

149
00:16:41,840 --> 00:16:47,680
 to first justification and then finality if you have to consec well if you have like a justified

150
00:16:47,680 --> 00:16:53,920
 block and then uh immediately another uh link starting from it um i'm not gonna go into details

151
00:16:53,920 --> 00:17:00,879
 with this but basically this you can think of it as just any kind of pbft style protocol any kind

152
00:17:00,879 --> 00:17:05,200
 of you know quorum based protocols that really tries to have this like hard finality guarantees

153
00:17:05,200 --> 00:17:10,640
 we just lay it on top of our um underlying kind of work choice like a lindy ghost and basically

154
00:17:10,640 --> 00:17:16,280
 try to get the benefits of finality on top of whatever our underlying protocol is.

155
00:17:17,240 --> 00:17:19,120
 And yeah, that's basically what Ethereum looks like today.

156
00:17:19,120 --> 00:17:25,960
 We have a bunch of slots, 32 of them form an epoch.

157
00:17:26,920 --> 00:17:32,780
 And for each slot, we elect a committee, which is pseudo-randomly chosen from our validator

158
00:17:32,780 --> 00:17:33,100
 set.

159
00:17:34,560 --> 00:17:38,620
 And basically, each slot looks like LMD Ghost, more or less.

160
00:17:38,619 --> 00:17:44,299
 But then on the level of Epochs, we have a Caspar Fuji operating, trying to finalize stuff.

161
00:17:44,939 --> 00:17:48,219
 So this is like kind of two layers that we have.

162
00:17:49,019 --> 00:17:53,539
 And yeah, basically at the layer of Epochs, it kind of looks like this.

163
00:17:53,779 --> 00:17:56,239
 But in each slot, it looks like a Lambda ghost.

164
00:17:57,219 --> 00:18:02,399
 One way to think about it kind of formally is this model of an n-band flow protocol,

165
00:18:02,400 --> 00:18:09,680
 protocol, where basically we think about it as having kind of operating in two modes.

166
00:18:09,680 --> 00:18:15,700
 Basically, we both worry about the network being partially synchronous, meaning we kind

167
00:18:15,700 --> 00:18:20,780
 of want to worry about periods of time where the network might not be synchronous, but

168
00:18:20,780 --> 00:18:24,640
 we also want to look at what happens once it does become synchronous.

169
00:18:24,640 --> 00:18:30,960
 And so this is kind of the standard model for PBFT protocols.

170
00:18:30,960 --> 00:18:37,520
 And basically, the other thing that we care about that's sort of non-standard is that

171
00:18:37,520 --> 00:18:41,880
 we want to look at what happens if participation is dynamic.

172
00:18:41,880 --> 00:18:47,060
 So basically, if validators are coming and going, sometimes they go offline, maybe there's

173
00:18:47,060 --> 00:18:53,759
 a major unpredictable event where half of the validators go offline, whereas in which

174
00:18:53,759 --> 00:19:01,460
 case, like a normal BFT protocol with finality, like Casper, basically by itself would stop

175
00:19:01,460 --> 00:19:04,259
 functioning, because you wouldn't be able to form these two-thirds forms.

176
00:19:05,099 --> 00:19:11,599
 And yeah, so this part, you know, because we look at this participation model, we basically

177
00:19:11,599 --> 00:19:17,700
 want to have this property called dynamic availability, which is essentially that the

178
00:19:17,700 --> 00:19:23,359
 available chain, in our case, LMD ghost, this thing that kind of goes on by itself

179
00:19:23,359 --> 00:19:25,159
 before we get to finality.

180
00:19:25,740 --> 00:19:28,639
 We want it to be safe and live, like basically to work

181
00:19:28,639 --> 00:19:30,399
 as long as the network is synchronous.

182
00:19:30,859 --> 00:19:33,439
 And even if we have dynamic participation,

183
00:19:34,259 --> 00:19:37,199
 kind of ignore exactly these things, it doesn't matter.

184
00:19:38,199 --> 00:19:41,240
 And yeah, other than that, we want basically finality,

185
00:19:41,240 --> 00:19:44,959
 which is like, we do want that, you know,

186
00:19:45,000 --> 00:19:47,079
 as long as the network becomes synchronous

187
00:19:47,079 --> 00:19:50,319
 and we have high participation, we can finalize.

188
00:19:50,759 --> 00:19:52,399
 So the finalized chain is basically live.

189
00:19:52,400 --> 00:19:56,700
 And of course, the final chain will also be safe, but that's kind of by default almost.

190
00:19:56,840 --> 00:19:57,920
 So that's an easy part.

191
00:19:58,880 --> 00:20:04,600
 And then we have these two chains, the finalized chain and the non-finalized chain.

192
00:20:05,000 --> 00:20:07,740
 We don't want them to have nothing to do with each other.

193
00:20:07,820 --> 00:20:14,780
 We want them to have this prefix property where basically the finalized chain is like a prefix of the whole chain.

194
00:20:14,779 --> 00:20:18,579
 So in our case, you know, the finalized block is always or like

195
00:20:19,019 --> 00:20:21,500
 if you look at the tip of the Ethereum chain,

196
00:20:22,059 --> 00:20:24,180
 finalized blocks are always behind it somewhere.

197
00:20:24,180 --> 00:20:27,180
 They're not like randomly different blocks that have nothing to do with them.

198
00:20:28,619 --> 00:20:31,220
 And yet to kind of the

199
00:20:32,500 --> 00:20:34,819
 to ensure this property of prefix,

200
00:20:35,139 --> 00:20:39,940
 we basically have to somehow mesh together

201
00:20:39,940 --> 00:20:44,180
 the this to, you know, these two protocols like it goes and it comes pretty.

202
00:20:44,779 --> 00:20:49,579
 In our case, we do it with this hybrid fork choice, where basically, instead of saying

203
00:20:49,579 --> 00:20:55,059
 just run LMD ghost, we say run LMD ghost from the latest justified checkpoint.

204
00:20:55,680 --> 00:20:57,420
 Roughly, that's not exactly how it goes.

205
00:20:57,480 --> 00:21:01,039
 There's some details, but yeah, at a high level, it's kind of the important thing.

206
00:21:01,480 --> 00:21:07,440
 So basically, here you can see there's some app box, some things are going on, some blocks

207
00:21:07,440 --> 00:21:08,240
 are being voted on.

208
00:21:08,559 --> 00:21:09,940
 The next app box, same thing.

209
00:21:09,940 --> 00:21:13,680
 this block has been justified

210
00:21:13,680 --> 00:21:15,480
 and this block has been finalized

211
00:21:15,480 --> 00:21:17,980
 like basically there's this super majority link

212
00:21:17,980 --> 00:21:20,799
 which makes this block justified

213
00:21:20,799 --> 00:21:23,180
 then another link from here to here

214
00:21:23,180 --> 00:21:25,259
 which makes this finalized and this justified

215
00:21:25,259 --> 00:21:27,100
 so this is the level of Casper g

216
00:21:27,100 --> 00:21:29,820
 and now this is the latest justified

217
00:21:29,820 --> 00:21:34,080
 it's like the you know the block of highest epoch

218
00:21:34,080 --> 00:21:34,920
 which is justified

219
00:21:34,920 --> 00:21:37,660
 and we start our fork choice from that

220
00:21:37,660 --> 00:21:39,680
 and then from here we run LMD goes

221
00:21:39,680 --> 00:21:43,840
 So it is going to run it goes on this kind of circled block three

222
00:21:44,980 --> 00:21:48,240
 and yeah, then we get to be on this one being the head of the chain.

223
00:21:48,240 --> 00:21:53,180
 So this kind of orange thing from here that that chain ends here,

224
00:21:53,180 --> 00:21:56,620
 whereas the blue chain is this one is like the, you know,

225
00:21:56,620 --> 00:21:59,980
 the head of the finalized chain is this one, the latest finalized block.

226
00:22:00,340 --> 00:22:03,720
 And yeah, basically starting the fortress from the latest justified

227
00:22:03,720 --> 00:22:05,640
 is enough to kind of ensure it is property

228
00:22:05,640 --> 00:22:10,920
 because the latest justified is always a descendant of the latest finalized, so it sort of ensures

229
00:22:10,920 --> 00:22:16,680
 that everything works out, unless there is like a, I mean, basically a huge slashing kind of thing.

230
00:22:18,440 --> 00:22:26,200
 Yeah, one issue is that LMD Ghost, as it originally was implemented in Gaspar, has a bunch of problems,

231
00:22:26,759 --> 00:22:30,840
 and I'll kind of try to go through some of them and give you intuition for why the

232
00:22:30,840 --> 00:22:35,560
 problems exist and what we can do about them, and what we have already done about some of them,

233
00:22:35,559 --> 00:22:57,619
 So the most annoying problem that I guess existed originally, which really was a huge breaking issue until it was resolved, is this what's called an ex-ante reorg, which is a reorg attack which is set up by the adversary in advance.

234
00:22:57,619 --> 00:23:03,159
 Usually you think about reorgs as someone proposes a block, someone is participant,

235
00:23:03,159 --> 00:23:05,399
 and then you somehow reorg it later.

236
00:23:05,399 --> 00:23:08,639
 But here it's you somehow set up the reorg in advance.

237
00:23:08,639 --> 00:23:10,819
 It's kind of similar to selfish mining in some sense.

238
00:23:10,819 --> 00:23:14,679
 You withhold some things and then reveal them later.

239
00:23:14,679 --> 00:23:20,279
 So in this case, yeah, basically the adversary withholds this block and votes.

240
00:23:20,279 --> 00:23:23,579
 So the honest people, they vote for the previous block, because they just don't know about

241
00:23:23,579 --> 00:23:25,799
 any of this stuff.

242
00:23:25,799 --> 00:23:31,559
 That's what it's meant by it not being fully the boundary.

243
00:23:31,559 --> 00:23:37,139
 And yeah, so then a Nautilus proposer builds a block on this one, because again, they don't

244
00:23:37,139 --> 00:23:39,180
 know anything about this one.

245
00:23:39,180 --> 00:23:45,559
 Finally, the adversary reveals everything, and at this point, so this is after this block

246
00:23:45,559 --> 00:23:50,779
 has been built, but before it's stationed for it to come, so there's some time between

247
00:23:50,779 --> 00:23:55,039
 these two things happening, and the adversary manages to reveal everything kind of right

248
00:23:55,039 --> 00:23:59,480
 it at the right time so that this person, this proposer doesn't know that it should

249
00:23:59,480 --> 00:24:07,639
 build on this one, but also every tester of this slot will know about this in time.

250
00:24:07,639 --> 00:24:12,059
 And so what they end up doing is they end up testing this one, and kind of forking out

251
00:24:12,059 --> 00:24:17,180
 this one, because they see that this block is there and has some weight.

252
00:24:17,180 --> 00:24:21,859
 And then you continue, even if the next guy is honest, at this point, this one is already

253
00:24:21,859 --> 00:24:29,139
 being worked out through no fault of its own.

254
00:24:29,139 --> 00:24:33,199
 This was the state of things at the very beginning, I guess, three years ago.

255
00:24:33,199 --> 00:24:36,599
 Basically, when the beacon chain launched, this was an attack that existed.

256
00:24:36,599 --> 00:24:37,599
 You could do this.

257
00:24:37,599 --> 00:24:40,979
 For example, Barnabas did this on test nets.

258
00:24:40,979 --> 00:24:44,099
 It was kind of funny at the time, because you actually could have done this on main

259
00:24:44,099 --> 00:24:49,639
 net, it's just that people didn't know about it.

260
00:24:49,640 --> 00:24:58,940
 The fix to this is what's known as Proposer Boost, which is basically kind of a way to

261
00:24:58,940 --> 00:25:05,860
 go back to Ghost in some sense, it's kind of a hybrid between LMD Ghost and Ghost, where

262
00:25:05,860 --> 00:25:12,060
 it basically gives some weight to a block just because it's being a block, even if it

263
00:25:12,060 --> 00:25:13,300
 doesn't have any votes.

264
00:25:13,300 --> 00:25:19,420
 So in Ghost, the attack before wouldn't have worked by itself, because once you've

265
00:25:19,420 --> 00:25:21,920
 you propose a block, the block is its own weight.

266
00:25:21,920 --> 00:25:24,259
 Like, the block has a weight by itself.

267
00:25:24,259 --> 00:25:27,180
 So ProposerBoost is basically saying, OK,

268
00:25:27,180 --> 00:25:29,500
 once you propose a block, at least temporarily

269
00:25:29,500 --> 00:25:32,519
 for one slot, you're going to be given a little bit of weight

270
00:25:32,519 --> 00:25:34,440
 that kind of allows you to protect yourself

271
00:25:34,440 --> 00:25:37,519
 against this revealed attestations, potentially.

272
00:25:37,519 --> 00:25:40,940
 So in our case, ProposerBoost is set to 40%

273
00:25:40,940 --> 00:25:42,820
 of one committee's weight.

274
00:25:42,820 --> 00:25:45,240
 And so if the adversary controls less than 40%,

275
00:25:45,240 --> 00:25:47,500
 it basically wouldn't be able to do this attack,

276
00:25:47,500 --> 00:25:50,920
 Because this red bubble will be less than 40%,

277
00:25:50,920 --> 00:25:53,200
 and ProposerBoost will win, basically.

278
00:25:53,200 --> 00:25:54,599
 And this is just temporary weight.

279
00:25:54,599 --> 00:25:56,059
 At the end of the slot it goes away.

280
00:25:56,059 --> 00:26:02,039
 But the nice thing is that once it goes away

281
00:26:02,039 --> 00:26:04,240
 at the end of the slot, in the meantime,

282
00:26:04,240 --> 00:26:07,180
 more attestations will have piled up on this block.

283
00:26:07,180 --> 00:26:09,200
 The attestations of this slot would have come,

284
00:26:09,200 --> 00:26:12,140
 and so they should take care of things.

285
00:26:12,140 --> 00:26:17,220
 So that's true, but still not quite.

286
00:26:17,220 --> 00:26:21,519
 There's still some attacks that are possible, because if you do control some validators,

287
00:26:22,120 --> 00:26:26,500
 even if it's not 40%, if you did control 40%, you could actually do this attack.

288
00:26:27,620 --> 00:26:32,620
 This should be 40%, and then you could actually do the same attack before and just beat Proposer

289
00:26:32,620 --> 00:26:32,900
 Boost.

290
00:26:34,039 --> 00:26:38,019
 The thing is, you can do it with less than 40%, because, for example, if you control

291
00:26:38,019 --> 00:26:42,380
 two slots in a row, now you can withhold two blocks and two red bubbles.

292
00:26:42,720 --> 00:26:44,779
 So these are different votes from different committees.

293
00:26:44,779 --> 00:26:48,079
 So for example, if this was 20%, you could do this attack again.

294
00:26:48,079 --> 00:26:51,879
 As soon as you control two slots in a row, you can do this attack.

295
00:26:51,879 --> 00:26:54,079
 And that's you can do today.

296
00:26:54,079 --> 00:26:56,579
 Today, if you control 20%, you could try to do this.

297
00:26:56,579 --> 00:26:59,839
 And if you could control even more slots in a row,

298
00:26:59,839 --> 00:27:03,319
 you need to control even less adversarial power to do this.

299
00:27:03,319 --> 00:27:08,720
 Of course, at some point, if you have very little adversarial power,

300
00:27:08,720 --> 00:27:11,859
 the likelihood of you controlling a lot of blocks in a row is very small.

301
00:27:11,859 --> 00:27:16,379
 So that's why this is not a super breaking issue.

302
00:27:16,379 --> 00:27:18,899
 But of course it's not ideal that someone with 20%

303
00:27:18,899 --> 00:27:21,619
 could go and do this reorg, or even 10%

304
00:27:21,619 --> 00:27:25,539
 if you have four slots in a row or something like that.

305
00:27:25,539 --> 00:27:27,539
 But yeah, but that is the state of things today.

306
00:27:27,539 --> 00:27:30,000
 And so again, basically, that's what would happen

307
00:27:30,000 --> 00:27:32,159
 if you did this.

308
00:27:32,159 --> 00:27:34,039
 You would basically overcome Proposer Boost

309
00:27:34,039 --> 00:27:37,279
 by doing the same revealing in time thing as before.

310
00:27:37,279 --> 00:27:39,539
 And now the honest attesters would attest to this one,

311
00:27:39,539 --> 00:27:41,459
 because they would see that the red bubbles are

312
00:27:41,460 --> 00:27:45,620
 more than proposer boost, and then it would keep going like that, like this chain it will

313
00:27:45,620 --> 00:27:50,340
 have won basically and forked out this one.

314
00:27:50,340 --> 00:27:52,799
 Then yeah, let me skip this.

315
00:27:52,799 --> 00:27:58,259
 I mean it's it's just another tactic it's kind of similar same principle it's just basically

316
00:27:58,259 --> 00:28:02,180
 you try it, I mean similar principle, not exactly same, but yeah you basically try to

317
00:28:02,180 --> 00:28:11,140
 just set up a situation where the honest people flip-flop between two branches by it, like

318
00:28:11,140 --> 00:28:13,420
 you keep the two branches kind of balanced,

319
00:28:13,420 --> 00:28:15,660
 and you use your own votes, like these red bubbles,

320
00:28:15,660 --> 00:28:18,300
 to kind of flip back and forth.

321
00:28:18,300 --> 00:28:20,020
 And this is also helped by Proposer Boost,

322
00:28:20,020 --> 00:28:22,480
 because at this point, you will have

323
00:28:22,480 --> 00:28:24,440
 these green votes being quite similar,

324
00:28:24,440 --> 00:28:28,300
 this red bubble trying to break the tie one way or another.

325
00:28:28,300 --> 00:28:31,560
 But then Proposer Boost, as long as it's

326
00:28:31,560 --> 00:28:33,720
 more than these red bubbles, can take care of things

327
00:28:33,720 --> 00:28:36,360
 and make sure that whatever the Proposer happens to see

328
00:28:36,360 --> 00:28:38,100
 is actually what people are going to do.

329
00:28:38,100 --> 00:28:39,759
 But again, this is vulnerable to,

330
00:28:39,759 --> 00:28:43,359
 if you can control more bots than boosts, then that can be a problem.

331
00:28:44,400 --> 00:28:50,240
 So there's, like, these attacks exist, what do we do about them? And, I mean, of course,

332
00:28:50,240 --> 00:28:54,799
 ideally you would want, you wouldn't want to just come up with some kind of patch, but you would

333
00:28:54,799 --> 00:28:59,680
 want a protocol that is theoretically secure, in particular, like, an available chain, then there's

334
00:28:59,680 --> 00:29:06,400
 the whole finality stuff, but, and I mean, that part, like, works in our protocol, but you would

335
00:29:06,400 --> 00:29:11,440
 want basically to fix this available chain so that it's really theoretically secure, possibly

336
00:29:11,440 --> 00:29:15,759
 like in an optimal way, so that you just can prove that it doesn't have any of these attacks.

337
00:29:16,960 --> 00:29:24,320
 And yeah, basically the first thing is trying to improve on Proposer Boost. So there's this idea

338
00:29:24,320 --> 00:29:30,560
 it's called ViewMerge, which I think a bit more at this point is like kind of a tool to think

339
00:29:30,559 --> 00:29:37,759
 easily of better protocols in some way it's not necessarily something that you know we should

340
00:29:37,759 --> 00:29:43,019
 for sure put in the protocol at some point but I think it's helpful to use it as a way to think of

341
00:29:43,019 --> 00:29:48,659
 what is possible kind of it's like an easy way to say to well if it doesn't work with this then

342
00:29:48,659 --> 00:29:54,339
 it's probably not going to work basically so yeah basically the idea is to make the slot

343
00:29:54,339 --> 00:29:59,399
 or like introduce a new face in the slot where validators basically freeze their view meaning

344
00:29:59,400 --> 00:30:04,980
 they basically are going to buffer new attestations and come in after that point.

345
00:30:05,540 --> 00:30:09,640
 And then they only consider them when voting in the next slot if the proposer says so.

346
00:30:09,820 --> 00:30:12,200
 If the proposer tells them, hey, I know about this attestation.

347
00:30:12,600 --> 00:30:14,360
 If you have it in your buffer, please consider it.

348
00:30:14,660 --> 00:30:20,160
 And the point of this is basically a lot of these attacks revolve on trying to sneak in attestations

349
00:30:20,160 --> 00:30:22,820
 that the proposer doesn't see, but other people do.

350
00:30:23,660 --> 00:30:27,120
 And here, basically, people give the proposer a bit of advantage.

351
00:30:27,119 --> 00:30:33,439
 So, they freeze their view before the proposer does, so that anything that comes around the

352
00:30:34,399 --> 00:30:38,879
 proposal deadline, people will have it in their buffer, not in their view, because

353
00:30:39,679 --> 00:30:42,639
 basically, they would already have frozen their view in advance.

354
00:30:43,519 --> 00:30:50,399
 And to try to make it a bit clearer, basically, let's say that I'm a validator at the view

355
00:30:50,399 --> 00:30:56,479
 freezing time, so just before delta before the proposal, I have this view, which is just all

356
00:30:56,480 --> 00:30:58,539
 all the attestation votes that I know.

357
00:31:00,640 --> 00:31:02,019
 You keep gossiping things around,

358
00:31:02,019 --> 00:31:03,519
 so things that you receive,

359
00:31:03,519 --> 00:31:06,420
 hopefully the proposer also receives, like delta later.

360
00:31:06,420 --> 00:31:09,299
 And so the proposer should know more than the attestor,

361
00:31:09,299 --> 00:31:11,980
 should have a bigger view than the attestors.

362
00:31:11,980 --> 00:31:13,640
 And now the proposer is gonna make a proposal

363
00:31:13,640 --> 00:31:15,319
 based on this view.

364
00:31:15,319 --> 00:31:17,819
 So the view it's what informs it's work choice,

365
00:31:17,819 --> 00:31:19,400
 it's gonna tell it what the head of the chain is,

366
00:31:19,400 --> 00:31:22,339
 and it should inform where B is built on.

367
00:31:22,339 --> 00:31:25,500
 And then basically, the proposer also

368
00:31:25,500 --> 00:31:29,899
 sends its view alongside b when it proposes b.

369
00:31:29,899 --> 00:31:32,059
 So it just basically sends some kind

370
00:31:32,059 --> 00:31:35,099
 of digest of which messages it might take into account

371
00:31:35,099 --> 00:31:36,299
 when doing this.

372
00:31:36,299 --> 00:31:39,299
 And then this validator does this merge thing,

373
00:31:39,299 --> 00:31:41,379
 which is it takes its frozen view

374
00:31:41,379 --> 00:31:43,419
 and it merges it with the proposer view

375
00:31:43,419 --> 00:31:44,899
 and obtains a new view.

376
00:31:44,899 --> 00:31:47,959
 And now, because the proposer's view

377
00:31:47,959 --> 00:31:50,339
 is a superset of its frozen view,

378
00:31:50,339 --> 00:31:52,339
 it's just basically going to agree with the proposer.

379
00:31:52,339 --> 00:32:00,819
 on what messages to consider. And so yeah, this basically solves, or improves this problem,

380
00:32:00,819 --> 00:32:07,859
 because what we can now ensure is that no matter what the adversary does essentially,

381
00:32:08,579 --> 00:32:14,019
 no matter how powerful the adversary is, all the honest attesters, so here this green bubble,

382
00:32:14,019 --> 00:32:17,939
 will attest to an honest proposal. So here there's some things going on, some balancing,

383
00:32:17,939 --> 00:32:22,019
 some sway votes, these red bubbles that are trying to confuse things, it doesn't matter

384
00:32:22,019 --> 00:32:27,460
 because all the honest attesters see the same block 3 as the proposer, YouTube view merge,

385
00:32:27,460 --> 00:32:31,379
 and so they all attest to it. And so all the honest votes, they do go where they're supposed

386
00:32:31,379 --> 00:32:36,579
 to go, which is to the honest proposal. And again, this is regardless of how powerful the adversary

387
00:32:36,579 --> 00:32:43,059
 is. But this is still not the whole story, even if we could implement this view merge thing,

388
00:32:43,059 --> 00:32:50,819
 because x-hunter works are still possible if you control enough, yes, no matter how powerful the

389
00:32:50,819 --> 00:32:57,700
 adversary is, these people will vote for this honest proposal. The issue is still afterwards,

390
00:32:58,819 --> 00:33:04,019
 the adversary can reveal more votes and go back to the other chain. So in this case,

391
00:33:04,019 --> 00:33:10,019
 like, you know, there's this green bubble here, but there's basically three red bubbles here. So

392
00:33:10,019 --> 00:33:15,700
 the adversary controls a few slots in a row, and depending on how much power it has, these,

393
00:33:15,700 --> 00:33:20,259
 you know, three red bubbles might be more powerful than the green bubble. Like, if the adversary

394
00:33:20,259 --> 00:33:28,819
 controls, I don't know, I guess 30% or something like that would be enough. Yeah, I don't know

395
00:33:28,819 --> 00:33:35,460
 about the exact number, but it's not hard to see how this could happen. So, basically,

396
00:33:35,460 --> 00:33:40,500
 exam-tree hooks are still possible. Now, the root cause of why they're still possible is that we

397
00:33:40,500 --> 00:33:46,019
 have committees. So, if you remember this picture of, you know, we have RendOw, it's like we have

398
00:33:46,019 --> 00:33:51,539
 a validator set, then we split it up into committees randomly throughout an epoch.

399
00:33:52,339 --> 00:33:58,579
 And this is the problem, because so LMD, this latest message thing, means that for each

400
00:33:58,579 --> 00:34:04,819
 validator, we only counted most one vote. But across committees, I mean, in each committee

401
00:34:04,819 --> 00:34:08,820
 there's different validators. So these votes and these votes are basically disjoint. It's

402
00:34:08,820 --> 00:34:10,280
 it's just different validators.

403
00:34:10,280 --> 00:34:12,059
 So these votes kind of add up.

404
00:34:12,059 --> 00:34:16,680
 Like once you go between slots or across slots,

405
00:34:16,680 --> 00:34:17,980
 weight can add up.

406
00:34:17,980 --> 00:34:21,320
 And so these three red bubbles, they

407
00:34:21,320 --> 00:34:26,320
 do add up to basically three times as much weight as one.

408
00:34:26,320 --> 00:34:30,320
 And this is essentially what allows the adversary

409
00:34:30,320 --> 00:34:33,640
 to save up and overpower the honest votes,

410
00:34:33,640 --> 00:34:35,220
 because the honest people in these cases

411
00:34:35,220 --> 00:34:37,860
 have only one bubble.

412
00:34:37,860 --> 00:34:42,660
 And basically, yeah, the simple solution is do away with committees, just stop using committees.

413
00:34:42,660 --> 00:34:46,019
 But what does that mean? In practice, everyone should be voting every slot,

414
00:34:46,019 --> 00:34:50,660
 like every validator in Ethereum needs to be voting every slot so that there's no possibility

415
00:34:50,660 --> 00:34:57,380
 of accumulating. This green bubble would mean all of the honest validators that exist in Ethereum,

416
00:34:57,380 --> 00:35:02,099
 not just this one committee. Of course it's simple in quotes, because it's not actually simple,

417
00:35:02,099 --> 00:35:05,759
 given how many validators we have, at least in theory, kind of.

418
00:35:07,380 --> 00:35:11,960
 But for now, let's just pretend that there's this VIP

419
00:35:11,960 --> 00:35:14,699
 that's actually getting into Electra, which is MaxiB.

420
00:35:15,460 --> 00:35:17,360
 And that's basically, you know,

421
00:35:17,360 --> 00:35:20,339
 the idea there is to allow validators to consolidate their stake.

422
00:35:20,440 --> 00:35:23,739
 So you can have a validator that has like 2,000 ETH of stake

423
00:35:23,739 --> 00:35:26,559
 or something like that, and to actually contract a validator set.

424
00:35:26,739 --> 00:35:30,759
 So then maybe eventually we can get to having everyone vote at once,

425
00:35:30,760 --> 00:35:32,980
 which is kind of the key thing here.

426
00:35:33,440 --> 00:35:37,140
 And assuming that we have done that, somehow we have resolved this problem

427
00:35:37,140 --> 00:35:39,860
 and done away with committees, can we finally have

428
00:35:40,480 --> 00:35:42,820
 approvably secure available chain?

429
00:35:43,180 --> 00:35:45,740
 And it turns out that we can.

430
00:35:45,740 --> 00:35:49,560
 So there's this protocol that we've written a paper about some time ago

431
00:35:49,900 --> 00:35:53,000
 that's called our LMD ghost, and it's basically like a pretty simple

432
00:35:53,000 --> 00:35:55,360
 modification of LMD ghost.

433
00:35:55,360 --> 00:35:58,080
 The first thing that it does is view merge.

434
00:35:58,080 --> 00:36:00,620
 So we had this freeze period and this view merge thing.

435
00:36:00,760 --> 00:36:04,200
 basically to replace ProposerBoost. And so again, what that does is,

436
00:36:04,200 --> 00:36:11,240
 honest proposals are voted by all honest volunteers. And yeah, that's basically what

437
00:36:11,240 --> 00:36:16,520
 it does, no matter what's happening here, all the green people go here. Then no committees,

438
00:36:16,520 --> 00:36:23,320
 so we've somehow gotten rid of having committees and everyone votes at once. Of course,

439
00:36:23,320 --> 00:36:26,480
 it's easier, but in practice it's not.

440
00:36:26,480 --> 00:36:29,800
 And basically what this does is,

441
00:36:29,800 --> 00:36:32,940
 if all the honest validators agree on something

442
00:36:32,940 --> 00:36:35,460
 in one slot, like they all vote for the same thing,

443
00:36:35,460 --> 00:36:37,539
 then this thing can never be re-org.

444
00:36:37,539 --> 00:36:41,620
 So, you know, here, these people all vote

445
00:36:41,620 --> 00:36:44,600
 for the green thing before we had this, like,

446
00:36:44,600 --> 00:36:47,960
 re-org possibility where, like, we still go, you know,

447
00:36:47,960 --> 00:36:50,160
 we still go up here because we have committees,

448
00:36:50,160 --> 00:36:52,880
 but like once we get, yeah, the picture should change,

449
00:36:52,880 --> 00:36:53,940
 but I guess I didn't.

450
00:36:53,940 --> 00:36:56,860
 But yeah, once we get rid of the committees,

451
00:36:56,860 --> 00:37:01,099
 then as soon as everyone has voted here,

452
00:37:01,099 --> 00:37:03,640
 then we'll never go away from this.

453
00:37:03,640 --> 00:37:05,559
 Everyone's gonna keep building on this chain.

454
00:37:05,559 --> 00:37:07,119
 And this is because this is really

455
00:37:07,119 --> 00:37:09,160
 at least half of the whole validator sets,

456
00:37:09,160 --> 00:37:10,940
 like a majority of all of the validators.

457
00:37:10,940 --> 00:37:13,820
 So there's no way for the adversary to overpower that

458
00:37:13,820 --> 00:37:16,840
 because there's no way that they can accumulate votes.

459
00:37:16,840 --> 00:37:20,480
 Like basically these red bubbles,

460
00:37:20,480 --> 00:37:22,660
 they will also just be overlapping bubbles,

461
00:37:22,659 --> 00:37:27,219
 adversary can repeat the same votes but they only count once at the end of the day.

462
00:37:28,500 --> 00:37:32,980
 And basically together, they kind of give us this property called reorg resilience,

463
00:37:32,980 --> 00:37:37,299
 which is that honest proposals are never reorgd. So honest proposals get voted by everyone,

464
00:37:37,859 --> 00:37:41,699
 once something is voted by everyone, honest, then it never gets reorgd.

465
00:37:43,219 --> 00:37:47,299
 And then, yeah, the other thing is this, maybe I'm going to skip this,

466
00:37:47,300 --> 00:37:49,580
 I'm just gonna tell you briefly,

467
00:37:49,580 --> 00:37:52,940
 like the R in our LMD go stands for board expiry,

468
00:37:52,940 --> 00:37:56,900
 which basically is that at some point

469
00:37:56,900 --> 00:37:59,539
 you stop counting attestations that are too old.

470
00:37:59,539 --> 00:38:00,660
 So after some number of slots,

471
00:38:00,660 --> 00:38:02,480
 you just stop counting their weight.

472
00:38:02,480 --> 00:38:06,519
 So for example, here, like these attestations,

473
00:38:06,519 --> 00:38:09,480
 they're too old and you just don't consider them anymore.

474
00:38:09,480 --> 00:38:13,120
 And this is kind of it related to this concept

475
00:38:13,120 --> 00:38:15,380
 of dynamic availability and basically being resilient

476
00:38:15,380 --> 00:38:21,519
 cases where a bunch of people go offline, it means that we can always recover when a

477
00:38:21,519 --> 00:38:24,680
 large portion of the validators go offline.

478
00:38:24,680 --> 00:38:28,840
 Maybe just briefly, yes, basically, the scenario is this.

479
00:38:28,840 --> 00:38:36,780
 Imagine that somehow all of the honest validators are split exactly in two, between two forks,

480
00:38:36,780 --> 00:38:43,380
 but then basically these ones, they have gone offline, like half of the validator set is

481
00:38:43,380 --> 00:38:48,500
 offline um the chain continues here because there's like this little contribution from the red

482
00:38:48,500 --> 00:38:55,059
 ones that make uh you know basically this side have more weight so they keep voting uh and the

483
00:38:55,059 --> 00:39:02,740
 latest boats are here but then the red boats uh come back to here uh okay so i'm always like

484
00:39:05,059 --> 00:39:11,780
 oh yeah okay uh yes then basically the red boats um shift back to the other chain and now we have

485
00:39:11,780 --> 00:39:17,540
 a reorg because basically the red boats are kind of the deciding boat here between the two chains

486
00:39:17,540 --> 00:39:22,660
 because these green bubbles are the same and so here the red boats are kind of joining this

487
00:39:22,660 --> 00:39:27,620
 coalition of like stale boats like this should be these are very old these people are offline

488
00:39:27,620 --> 00:39:32,340
 they're not voting anymore but their votes are still there um whereas and so yeah then

489
00:39:32,340 --> 00:39:38,420
 everyone reorgs it here and we can have like a very long reorg um but yeah in with expiry this

490
00:39:38,420 --> 00:39:40,700
 this wouldn't happen, because eventually, these votes

491
00:39:40,700 --> 00:39:41,400
 just expire.

492
00:39:41,400 --> 00:39:45,099
 And so that kind of caps how long this reorder can be.

493
00:39:45,099 --> 00:39:47,180
 Once these have expired, then the adversary

494
00:39:47,180 --> 00:39:48,780
 can't really do anything.

495
00:39:48,780 --> 00:39:50,460
 These votes are all of the ones that

496
00:39:50,460 --> 00:39:53,639
 matter at this point, basically.

497
00:39:53,639 --> 00:39:55,579
 And now, OK, we have basically the ingredients

498
00:39:55,579 --> 00:39:58,340
 to have a single softline-autoprotocol.

499
00:39:58,340 --> 00:40:00,599
 Basically, now, with all these things,

500
00:40:00,599 --> 00:40:03,320
 we've already kind of constructed it in the paper.

501
00:40:03,320 --> 00:40:05,240
 But here, it just gives you the idea.

502
00:40:05,239 --> 00:40:11,199
 But we've already constructed a basically secure available chain in the kind of model that we care about.

503
00:40:12,759 --> 00:40:18,859
 And basically, now we want to take this and make it into a single-stop finality protocol.

504
00:40:18,979 --> 00:40:23,439
 So basically put together, put on top of it, again, Casper 5G or some finality gadget,

505
00:40:23,439 --> 00:40:27,939
 and kind of get back something that looks like what we have today, but finalizes in a single slot,

506
00:40:28,359 --> 00:40:30,319
 and is actually provably secure.

507
00:40:30,799 --> 00:40:34,599
 So it doesn't have all these weird kind of attacks and edge cases.

508
00:40:35,239 --> 00:40:40,239
 So the rough idea, yeah, actually let's skip this.

509
00:40:42,399 --> 00:40:47,399
 Yeah, basically the idea of trying to make such a protocol

510
00:40:47,419 --> 00:40:52,419
 is to, or like one kind of simple way to make sure

511
00:40:52,899 --> 00:40:56,399
 that things work, which is basically how,

512
00:40:56,399 --> 00:40:59,179
 like I think all the protocols that are known to work

513
00:40:59,179 --> 00:41:03,379
 in this model are built, is that basically you only try

514
00:41:03,380 --> 00:41:08,500
 finalize blocks which are already confirmed by the underlying available protocol so in our case

515
00:41:08,500 --> 00:41:14,500
 lmd ghost so confirmed here means like the underlying available protocol has already kind

516
00:41:14,500 --> 00:41:19,460
 of attained a certain level of security for a block you can think of this as like k deep in

517
00:41:19,460 --> 00:41:24,260
 longest chain like a block that is like buried deep in the longest chain you don't think that

518
00:41:24,260 --> 00:41:31,619
 that's kind of reorg like just a bitcoin kind of you know uh confirmation rule and you only try to

519
00:41:31,619 --> 00:41:36,099
 finalize those things, like the ones that are confirmed, like buried deep or some other way

520
00:41:36,099 --> 00:41:40,579
 of determining that it's this thing shouldn't be reorged. And this is like to make basically

521
00:41:40,579 --> 00:41:43,859
 the interactions between these two protocols, because we are kind of taking a protocol and

522
00:41:43,859 --> 00:41:48,339
 like putting one on top and all these kind of interactions, it makes them much nicer,

523
00:41:48,339 --> 00:41:52,019
 because basically as long as things are working, like as long as this confirmation rule of the

524
00:41:52,019 --> 00:41:58,659
 underlying protocol is working, this finality gadget does not interfere with it. Like basically

525
00:41:58,659 --> 00:42:04,539
 it can only finalize things that are already never going to be reorged.

526
00:42:05,819 --> 00:42:08,659
 And we just have to worry about, okay, what if something breaks

527
00:42:08,659 --> 00:42:09,699
 in the underlying protocol?

528
00:42:10,420 --> 00:42:13,219
 Like maybe there's some period of asynchronous, some attack,

529
00:42:13,339 --> 00:42:15,179
 and something in the underlying protocol that breaks.

530
00:42:15,819 --> 00:42:18,940
 Then, okay, we're going to try to recover from this,

531
00:42:19,139 --> 00:42:21,039
 but then there might be weird interactions.

532
00:42:21,319 --> 00:42:23,639
 And, okay, we have to make sure that these are handled,

533
00:42:24,259 --> 00:42:27,059
 which is not super easy, but doable.

534
00:42:27,059 --> 00:42:33,380
 So, because of this, one thing that kind of was missing in the picture before is that

535
00:42:33,380 --> 00:42:37,460
 we didn't really have a confirmation rule, or, like, we did, I didn't explicitly say it, but

536
00:42:37,460 --> 00:42:43,699
 it wasn't a fast confirmation rule. It was just basically it was something similar to kdip again,

537
00:42:43,699 --> 00:42:49,299
 like the sort of, like, longest chain. And, yeah, basically, we want a fast one,

538
00:42:49,299 --> 00:42:54,420
 because we want to finalize fast. And we can only finalize after confirming. The pipeline is, like,

539
00:42:54,420 --> 00:43:01,700
 propose a block, confirm it, finalize it, or justify it, finalize it. So, if you want single

540
00:43:01,700 --> 00:43:06,659
 slot finality, we should be confirming it in a single slot. So, we basically add another phase

541
00:43:06,659 --> 00:43:14,340
 to our slot for fast confirmation. What we do is basically say if a block is received at two-thirds

542
00:43:14,340 --> 00:43:18,500
 quorum from the whole validator set, because remember now two-thirds of the whole validator

543
00:43:18,500 --> 00:43:21,800
 that are gonna be voting in every slot,

544
00:43:21,800 --> 00:43:24,300
 then you confirm it in this phase.

545
00:43:25,199 --> 00:43:28,460
 And yeah, basically the key thing is that

546
00:43:28,460 --> 00:43:31,679
 once you confirm here, there's a bit more time,

547
00:43:31,679 --> 00:43:35,619
 like another sub-slot before freezing your view,

548
00:43:35,619 --> 00:43:38,000
 like before you stop considering new things.

549
00:43:38,000 --> 00:43:41,000
 And so if someone honest confirms here,

550
00:43:41,000 --> 00:43:43,260
 they then send this form here

551
00:43:43,260 --> 00:43:45,400
 and everyone will take it into account

552
00:43:45,400 --> 00:43:47,239
 in their frozen view.

553
00:43:47,239 --> 00:43:49,739
 So yeah, basically, again, this is the same picture as before.

554
00:43:49,739 --> 00:43:51,859
 We are like, this is the view merge part.

555
00:43:51,859 --> 00:43:54,199
 But somehow, we get to here.

556
00:43:54,199 --> 00:43:56,779
 And everyone votes.

557
00:43:56,779 --> 00:44:00,559
 So this validator is going to send this attestation

558
00:44:00,559 --> 00:44:03,679
 for block B. A bunch of other people are doing the same thing.

559
00:44:03,679 --> 00:44:05,259
 They're all voting for B. Like, for example,

560
00:44:05,259 --> 00:44:08,119
 if this is an honest slot, then this view merge pipeline works.

561
00:44:08,119 --> 00:44:11,199
 And everyone votes for B. And it quorum forms.

562
00:44:11,199 --> 00:44:13,399
 So now, we're at fast confirmation time.

563
00:44:13,399 --> 00:44:15,439
 Every validator, honest validator,

564
00:44:15,440 --> 00:44:18,119
 is going to see this quorum for b.

565
00:44:18,119 --> 00:44:20,300
 And then they send it over.

566
00:44:20,300 --> 00:44:23,099
 And by the time that people are freezing

567
00:44:23,099 --> 00:44:26,599
 their view in the next slot, these frozen views,

568
00:44:26,599 --> 00:44:28,980
 they all contain this quorum.

569
00:44:28,980 --> 00:44:31,880
 And basically, this is what enables the confirmation rule

570
00:44:31,880 --> 00:44:35,960
 to work, to actually be able to say,

571
00:44:35,960 --> 00:44:38,240
 if anyone confirms, anyone honest,

572
00:44:38,240 --> 00:44:40,740
 then this block is not going to be reordered.

573
00:44:40,740 --> 00:44:44,440
 It's actually confirmed in a meaningful sense,

574
00:44:44,440 --> 00:44:46,860
 basically safety for the confirmation rule.

575
00:44:46,860 --> 00:44:49,720
 And yeah, basically we do have such guarantees

576
00:44:49,720 --> 00:44:51,599
 as long as we have network synchrony,

577
00:44:51,599 --> 00:44:54,059
 which is always necessary for, you know,

578
00:44:54,059 --> 00:44:58,079
 unless you finalize and an honest majority.

579
00:44:58,079 --> 00:44:59,659
 And same thing, we need an honest majority

580
00:44:59,659 --> 00:45:02,059
 unless once you finalize then it's fine,

581
00:45:02,059 --> 00:45:03,820
 you have stronger guarantees.

582
00:45:04,720 --> 00:45:06,519
 So the idea is basically, again,

583
00:45:06,519 --> 00:45:09,179
 if an honest validator fast confirms B,

584
00:45:09,179 --> 00:45:10,400
 then everyone else,

585
00:45:10,400 --> 00:45:12,740
 every honest validator sees the quorum

586
00:45:12,739 --> 00:45:15,099
 before freezing its view.

587
00:45:15,099 --> 00:45:18,619
 And what this gives us is basically,

588
00:45:18,619 --> 00:45:20,779
 so let's look at basically what the picture would

589
00:45:20,779 --> 00:45:21,299
 look like then.

590
00:45:21,299 --> 00:45:23,159
 OK, let's say that this B is the thing that's

591
00:45:23,159 --> 00:45:24,079
 being fast confirmed.

592
00:45:24,079 --> 00:45:27,899
 So everyone sees this greater than 2 thirds votes for B.

593
00:45:27,899 --> 00:45:30,559
 And then possibly some people that are in this quorum,

594
00:45:30,559 --> 00:45:32,619
 because this quorum might not be all honest people,

595
00:45:32,619 --> 00:45:34,500
 it might also be malicious people,

596
00:45:34,500 --> 00:45:35,739
 they might have equivocated it.

597
00:45:35,739 --> 00:45:38,299
 So they might have voted for something else as well.

598
00:45:38,299 --> 00:45:41,339
 In which case, the way it works in our protocol

599
00:45:41,340 --> 00:45:42,960
 is that you basically take away that weight.

600
00:45:42,960 --> 00:45:44,519
 Like if you know that a vote is in a prevocation,

601
00:45:44,519 --> 00:45:46,079
 you just don't count it's weight.

602
00:45:46,079 --> 00:45:46,920
 So in this case, you know,

603
00:45:46,920 --> 00:45:49,559
 this thing would have at least two thirds minus E,

604
00:45:49,559 --> 00:45:51,380
 like the prevocations.

605
00:45:51,380 --> 00:45:53,519
 Any other contender, like this could be,

606
00:45:53,519 --> 00:45:55,220
 it could be a bunch of them, but anyway, you know,

607
00:45:55,220 --> 00:45:58,079
 at this point we're evaluating this block

608
00:45:58,079 --> 00:46:01,340
 and all the weight on it against any other sub-three,

609
00:46:01,340 --> 00:46:05,460
 basically any other like sibling that's competing with it.

610
00:46:05,460 --> 00:46:07,559
 And no matter what it's gonna need,

611
00:46:07,559 --> 00:46:08,860
 it's gonna have less than one third.

612
00:46:08,860 --> 00:46:11,880
 it's basically the remaining votes are less than 1 third.

613
00:46:11,880 --> 00:46:13,579
 And then equivocations wouldn't matter

614
00:46:13,579 --> 00:46:15,079
 because you don't count them anyway.

615
00:46:15,079 --> 00:46:18,160
 And so as long as E is less than 1 third, then we're good.

616
00:46:18,160 --> 00:46:20,800
 Like then the leftover non-equivocating votes here

617
00:46:20,800 --> 00:46:23,480
 are going to beat any other contender.

618
00:46:23,480 --> 00:46:26,599
 And so basically, that means that everyone

619
00:46:26,599 --> 00:46:30,220
 that sees such a thing is going to, in its frozen view,

620
00:46:30,220 --> 00:46:34,180
 see that B is supported by enough votes to win,

621
00:46:34,180 --> 00:46:35,300
 basically, to be canonical.

622
00:46:35,300 --> 00:46:37,340
 And so in the next slot it's going to vote for it.

623
00:46:37,340 --> 00:46:41,960
 And then, as we already kind of talked about before,

624
00:46:41,960 --> 00:46:45,700
 if everyone in the next slot votes on B, or the sub-3 of B,

625
00:46:45,700 --> 00:46:47,420
 it could be that there's a proposal here,

626
00:46:47,420 --> 00:46:49,400
 and then everyone votes for that proposal.

627
00:46:49,400 --> 00:46:51,559
 But anyway, it's for the sub-3 of B,

628
00:46:51,559 --> 00:46:53,960
 then it's never going to get re-ordered, basically,

629
00:46:53,960 --> 00:46:55,720
 as long as it's an anonymous majority.

630
00:46:55,720 --> 00:46:58,160
 Like, if these are more than half the whole valid data set,

631
00:46:58,160 --> 00:47:00,880
 they all vote for B, then it's fine, basically.

632
00:47:00,880 --> 00:47:04,860
 So that's why the fast confirmation sort of works.

633
00:47:04,860 --> 00:47:06,940
 I don't know why this slide is here.

634
00:47:06,940 --> 00:47:11,320
 But yeah, oh yes, sorry, yeah, basically this was our LMD ghost, the structure of our LMD ghost.

635
00:47:12,059 --> 00:47:13,539
 Then we've added fast confirmation.

636
00:47:14,559 --> 00:47:22,500
 And then now we add some things that are kind of specific to Casper 5G to actually turn this into a finalizing protocol.

637
00:47:22,900 --> 00:47:23,940
 So that's kind of the last step.

638
00:47:24,440 --> 00:47:27,079
 So here we just have head boats.

639
00:47:27,079 --> 00:47:34,800
 So, you know, today attestations contain a head boat, which just says, you know, what you think is the head of the chain.

640
00:47:34,800 --> 00:47:37,920
 but then they also contain a Casper FFG vote.

641
00:47:37,920 --> 00:47:39,860
 Here you just have a head vote.

642
00:47:39,860 --> 00:47:41,900
 So same as our LMD ghost,

643
00:47:41,900 --> 00:47:43,500
 where there's no finality.

644
00:47:44,360 --> 00:47:47,340
 Then here instead, we have fast confirmation

645
00:47:47,340 --> 00:47:48,620
 and then an FFG vote.

646
00:47:48,620 --> 00:47:51,220
 So first head vote, then a FFG vote.

647
00:47:51,220 --> 00:47:54,420
 Then we freeze our view for view merge to work.

648
00:47:54,420 --> 00:47:56,019
 And then there's this acknowledgement,

649
00:47:56,019 --> 00:47:58,019
 which is basically another type of vote.

650
00:47:58,019 --> 00:48:00,019
 And so what it looks like at the end of the day

651
00:48:00,019 --> 00:48:01,019
 is basically,

652
00:48:01,019 --> 00:48:04,679
 So let's go through this first.

653
00:48:04,679 --> 00:48:07,579
 Yeah, so the fork choice is, again, same as before,

654
00:48:07,579 --> 00:48:08,619
 this hybrid fork choice.

655
00:48:08,619 --> 00:48:11,599
 Before, you start from the latest justified,

656
00:48:11,599 --> 00:48:14,079
 then you run rlmd-ghost.

657
00:48:14,079 --> 00:48:18,119
 FFG votes are defined in this way, similar to today.

658
00:48:18,119 --> 00:48:21,539
 The latest justified is the source of the vote.

659
00:48:21,539 --> 00:48:24,239
 And then the target block, so you

660
00:48:24,239 --> 00:48:27,599
 want to add this link that it goes from latest justified,

661
00:48:27,599 --> 00:48:31,019
 which is the thing you're trying to finalize, potentially,

662
00:48:31,019 --> 00:48:32,480
 to some target.

663
00:48:32,480 --> 00:48:34,679
 And again, basically, the target is something

664
00:48:34,679 --> 00:48:36,980
 that is potentially going to become justified,

665
00:48:36,980 --> 00:48:39,780
 it's the thing that you're trying to justify.

666
00:48:39,780 --> 00:48:44,159
 And so you want this to be confirmed so that if anything

667
00:48:44,159 --> 00:48:48,039
 gets into this justification finalization pipeline

668
00:48:48,039 --> 00:48:49,820
 it starts affecting the fourth choice.

669
00:48:49,820 --> 00:48:51,320
 So here we start from the latest justified.

670
00:48:51,320 --> 00:48:55,219
 So we want to make sure that the latest justified is something

671
00:48:55,219 --> 00:48:58,480
 strong that already has strong security guarantees.

672
00:48:58,480 --> 00:49:00,780
 And so you start from the highest confirmed block,

673
00:49:00,780 --> 00:49:03,900
 Like basically the best block that you know that is confirmed.

674
00:49:06,160 --> 00:49:09,120
 Okay, the highest confirmed block descending from justified

675
00:49:09,120 --> 00:49:12,120
 because it kind of fits with this forced choice rule.

676
00:49:12,120 --> 00:49:17,120
 And yeah, and basically then acknowledgement is just you saying,

677
00:49:17,120 --> 00:49:20,940
 oh, if something is justified here, I know about it.

678
00:49:20,940 --> 00:49:24,860
 Like if something is justified, you just acknowledge that you know about that.

679
00:49:24,860 --> 00:49:31,840
 And it's essentially the same as if in the next slot

680
00:49:31,840 --> 00:49:33,920
 you were to make an FFG vote that

681
00:49:33,920 --> 00:49:35,760
 has this block as the source.

682
00:49:35,760 --> 00:49:38,039
 This is a bit confusing if you haven't thought too much

683
00:49:38,039 --> 00:49:41,000
 about Casper-FFG, but you can think about it as basically

684
00:49:41,000 --> 00:49:42,420
 this is just two rounds of voting,

685
00:49:42,420 --> 00:49:44,099
 the usual two rounds of voting that you

686
00:49:44,099 --> 00:49:46,880
 need to finalize in PPFT, in Casper-FFG,

687
00:49:46,880 --> 00:49:48,320
 in all these protocols.

688
00:49:48,320 --> 00:49:50,820
 So this is just a second round of voting, basically.

689
00:49:50,820 --> 00:49:53,200
 So basically what the pipeline looks like it's like, OK,

690
00:49:53,199 --> 00:49:59,139
 block is proposed, it's gossiped, people vote on it as a head vote, so they say, oh, this is my head

691
00:49:59,139 --> 00:50:05,539
 of the chain, then people basically, you know, maybe a quorum forms, at which point here it gets

692
00:50:05,539 --> 00:50:10,859
 confirmed, like people see a quorum, they confirm it, and if they confirm it, they can cast an FFG

693
00:50:10,859 --> 00:50:16,219
 vote with it as the target, which is basically trying to justify it. Now, if a bunch of people

694
00:50:16,219 --> 00:50:22,439
 do this, a quorum forms of FFG votes, it gets justified, like by here, everyone knows that it

695
00:50:22,440 --> 00:50:24,900
 it is justified, they all acknowledge it.

696
00:50:24,900 --> 00:50:28,700
 They all freeze their view with knowledge

697
00:50:28,700 --> 00:50:29,960
 of it being justified.

698
00:50:29,960 --> 00:50:33,119
 And they send this new vote, and it gets finalized.

699
00:50:33,119 --> 00:50:35,579
 So by the end of the slot, we've gone through all the kind

700
00:50:35,579 --> 00:50:38,639
 of phases, like confirmation, justification, finalization,

701
00:50:38,639 --> 00:50:40,860
 that are necessary.

702
00:50:40,860 --> 00:50:43,500
 And yeah, so that's single-slot finality, basically.

703
00:50:43,500 --> 00:50:47,780
 And yeah, in an honest slot, it would really

704
00:50:47,780 --> 00:50:49,539
 look exactly like this.

705
00:50:49,539 --> 00:50:51,039
 We cannot guarantee that this is what

706
00:50:51,039 --> 00:50:52,739
 it's gonna look like for every slot,

707
00:50:52,739 --> 00:50:56,039
 but for honest slots under synchrony and so on,

708
00:50:56,039 --> 00:50:57,659
 then it is gonna look like this.

709
00:50:57,659 --> 00:51:00,360
 Basically, an honest proposer is gonna make

710
00:51:00,360 --> 00:51:02,380
 a timely Brok proposal B,

711
00:51:03,420 --> 00:51:06,300
 and we can guarantee through V merge

712
00:51:06,300 --> 00:51:09,279
 that everyone casts a head vote for B,

713
00:51:09,279 --> 00:51:11,079
 and it's gonna form a quorum.

714
00:51:12,039 --> 00:51:14,360
 Then everyone sees this quorum,

715
00:51:14,360 --> 00:51:16,539
 everyone confirms, fast confirms,

716
00:51:16,539 --> 00:51:21,279
 and uses basically bt, like t being the slot.

717
00:51:21,279 --> 00:51:26,079
 So it's checkpoints are like a block and the slot,

718
00:51:26,079 --> 00:51:28,960
 or like, I mean, in our current protocol,

719
00:51:28,960 --> 00:51:31,719
 but here, epochs and slots are the same thing,

720
00:51:31,719 --> 00:51:33,300
 because of single-cell finality.

721
00:51:33,300 --> 00:51:36,420
 And yeah, so basically, you cast this link, which

722
00:51:36,420 --> 00:51:39,239
 like you send a vote, which is basically for the link,

723
00:51:39,239 --> 00:51:41,699
 latest justified to bt.

724
00:51:41,699 --> 00:51:43,659
 And everyone has the same latest justified again

725
00:51:43,659 --> 00:51:44,539
 because of view merge.

726
00:51:44,539 --> 00:51:47,420
 The proposer can help everyone to see the same latest

727
00:51:47,420 --> 00:51:49,159
 justified.

728
00:51:49,159 --> 00:51:51,820
 So again, a quorum of these forms.

729
00:51:51,820 --> 00:51:55,659
 And so everyone sees now that bt is justified.

730
00:51:55,659 --> 00:51:57,900
 And they basically acknowledge this fact,

731
00:51:57,900 --> 00:52:00,480
 and then that leads to finality.

732
00:52:00,480 --> 00:52:02,679
 And then by this time, everyone should

733
00:52:02,679 --> 00:52:05,940
 have seen that b is finalized.

734
00:52:05,940 --> 00:52:07,519
 This is just a little aside.

735
00:52:07,519 --> 00:52:09,860
 If you're interested in these things,

736
00:52:09,860 --> 00:52:17,460
 Something that was sort of recently, kind of a recent development here was that, basically,

737
00:52:17,880 --> 00:52:20,440
 we wanted to have a chain protocol.

738
00:52:20,920 --> 00:52:24,740
 So, you know, this protocol, everything happens in one slot, which is nice.

739
00:52:24,820 --> 00:52:25,860
 Like, you finalize it in one slot.

740
00:52:26,280 --> 00:52:30,220
 But it also kind of means, I mean, it means that we have three rounds of voting in a slot,

741
00:52:30,340 --> 00:52:33,680
 which is a lot, especially, you know, there's aggregation with the station.

742
00:52:33,680 --> 00:52:37,460
 There's a lot of overhead involved in voting with a big validator set.

743
00:52:37,460 --> 00:52:46,360
 But something that's nice that instead we would want to have is to have a chain protocol where you just vote once in every slot.

744
00:52:46,519 --> 00:52:47,679
 That's basically what we have today, right?

745
00:52:47,740 --> 00:52:51,659
 Like, today you just attest, you propose and attest in every slot.

746
00:52:51,920 --> 00:52:54,139
 And, okay, aggregation, but, like, you only vote once.

747
00:52:54,139 --> 00:53:01,239
 And even Casper 5G itself, if you think about it on the level of epochs, it's chained.

748
00:53:01,239 --> 00:53:07,759
 Because in one epoch you're at the same time trying to justify something and finalize the

749
00:53:07,759 --> 00:53:08,759
 previous thing.

750
00:53:08,759 --> 00:53:12,199
 So you kind of do two phases at once.

751
00:53:12,199 --> 00:53:15,900
 You don't wait for, for example, Tendermint is not a chain protocol, if you know what

752
00:53:15,900 --> 00:53:16,900
 Tendermint is.

753
00:53:16,900 --> 00:53:23,039
 Tendermint basically does one quorum, the other quorum, finalizes the thing, and then

754
00:53:23,039 --> 00:53:24,039
 moves on.

755
00:53:24,039 --> 00:53:29,159
 So it's pretty fast for Fuji, basically, at the same time, we'll be trying to finalize

756
00:53:29,159 --> 00:53:32,400
 the thing that was already justified and to justify something new.

757
00:53:32,400 --> 00:53:40,000
 So it sort of tries to move ahead of one step essentially, or to do two steps at once.

758
00:53:40,000 --> 00:53:43,239
 And so we want to kind of do the same thing here.

759
00:53:43,239 --> 00:53:48,679
 And yeah, basically it turns out that there's some complications in making it work, but

760
00:53:48,679 --> 00:53:51,679
 it turns out that it seems like with some modifications it can work.

761
00:53:51,679 --> 00:53:54,919
 I'm not going to go into detail about what it looks like,

762
00:53:54,919 --> 00:53:58,259
 but basically, at the end of the day, at a high level,

763
00:53:58,259 --> 00:53:59,440
 it looks like it's this.

764
00:53:59,440 --> 00:54:02,440
 Basically, we have three slots here.

765
00:54:02,440 --> 00:54:05,359
 So this is the slot.

766
00:54:05,359 --> 00:54:08,059
 And basically, the pipeline is essentially

767
00:54:08,059 --> 00:54:09,259
 that you propose something.

768
00:54:09,259 --> 00:54:10,719
 Again, this is for honest proposals.

769
00:54:10,719 --> 00:54:12,659
 It would work out like this.

770
00:54:12,659 --> 00:54:16,839
 Everyone votes for it, for group B, and B gets confirmed.

771
00:54:16,839 --> 00:54:21,199
 So again, within one slot, we still

772
00:54:21,199 --> 00:54:25,039
 this fast confirmation thing, basically the only difference is that we only have a single round of

773
00:54:25,039 --> 00:54:32,079
 voting. Basically this is today, you attest, you send a head vote and an FFG vote bundled together,

774
00:54:32,079 --> 00:54:36,960
 which do both things at once, actually three things at once. They do head vote for the head

775
00:54:36,960 --> 00:54:43,439
 of the chain, FFG vote, and the FFG vote does two things at once, because again CasperFG is

776
00:54:43,439 --> 00:54:49,519
 pipelined, so the target of the FFG vote is trying to justify something, and the source of the FFG

777
00:54:49,519 --> 00:54:54,960
 vote is trying to finalize something so you're like at once really doing three votes like one

778
00:54:54,960 --> 00:55:00,559
 to confirm one to justify it one to finalize um and so yeah basically b would be confirmed

779
00:55:01,280 --> 00:55:07,440
 once you get here uh everyone would know b is confirmed they would be using bt as their

780
00:55:07,440 --> 00:55:12,960
 target so this is the thing that you're trying to justify and then get into the next slot you would

781
00:55:12,960 --> 00:55:18,400
 be using uh bt as your source so now you're trying to finalize it basically and so it goes through

782
00:55:18,400 --> 00:55:24,000
 confirming, justify, and finalizing within three slots. And it's nicer in some ways.

783
00:55:24,000 --> 00:55:32,079
 And it takes some complications. Someone who is writing Roberto from ConsenSys has been working

784
00:55:32,079 --> 00:55:39,280
 on a spec for this, because we felt like this might be a good version of the protocol to actually

785
00:55:39,280 --> 00:55:43,039
 try to write it down a bit more nicely. And so yeah, this is actually something

786
00:55:43,039 --> 00:55:47,200
 that there's ongoing work on it. Maybe you can potentially get involved if you're, I don't know,

787
00:55:47,199 --> 00:55:53,759
 masochist and you like these things um and yeah so that's kind of it for the more um

788
00:55:55,119 --> 00:55:59,759
 i guess more like ssf related things and it's just generally the board like technical things in

789
00:56:00,719 --> 00:56:05,919
 in the uh in the fourth choice and i kind of just wanted to uh use some of the remaining time to

790
00:56:05,919 --> 00:56:11,119
 give an overview of some of the other things as well that uh where the fourth choice fits in the

791
00:56:11,119 --> 00:56:14,960
 ethereum roadmap because it turns out that it like pops up in a bunch of places where you actually

792
00:56:14,960 --> 00:56:18,260
 he wouldn't want it to pop up, but unfortunately it does.

793
00:56:18,260 --> 00:56:22,720
 So before we move on, can we have a second for some questions?

794
00:56:22,720 --> 00:56:23,519
 Yeah, yeah, sure.

795
00:56:23,519 --> 00:56:25,159
 Sorry, yes, yes, yes.

796
00:56:25,159 --> 00:56:26,300
 Yeah, it's all right.

797
00:56:26,300 --> 00:56:27,639
 So it's a lot to digest.

798
00:56:27,639 --> 00:56:32,840
 So there was a question regarding, yeah,

799
00:56:32,840 --> 00:56:35,420
 so if you can elaborate, what's the BLS signature

800
00:56:35,420 --> 00:56:41,179
 count limit or slot in SSF scenario?

801
00:56:41,179 --> 00:56:43,639
 On whether it is a limit?

802
00:56:43,639 --> 00:56:51,159
 What's the limit on count of BLS signatures in Slot?

803
00:56:51,159 --> 00:56:55,199
 I mean, so nowadays, we aggregate, I guess,

804
00:56:55,199 --> 00:56:58,759
 like around 3,000 votes per Slot,

805
00:56:58,759 --> 00:57:01,219
 because there's about a million validators,

806
00:57:01,219 --> 00:57:04,579
 and like 30-ish thousand are in every committee,

807
00:57:04,579 --> 00:57:06,500
 or in a committee.

808
00:57:06,500 --> 00:57:11,539
 So we had, like, with George, proposed this two-layer

809
00:57:11,539 --> 00:57:14,380
 aggregation where basically you do what we do today,

810
00:57:14,380 --> 00:57:17,420
 but for a bunch of committees in parallel.

811
00:57:17,420 --> 00:57:19,900
 And then you kind of aggregate those

812
00:57:19,900 --> 00:57:24,340
 and try to get basically more committees participating

813
00:57:24,340 --> 00:57:26,380
 at once essentially.

814
00:57:26,380 --> 00:57:31,000
 And it turns out it seemed like, yeah, that's fine in some way,

815
00:57:31,000 --> 00:57:36,599
 but it does run into some kind of limits with basically

816
00:57:36,599 --> 00:57:39,300
 the main part is the verification

817
00:57:39,300 --> 00:57:45,620
 the final huge PLS thing that you get at the end, in the worst case you have to do this really

818
00:57:45,620 --> 00:57:52,019
 large edition of pubkeys, and that seemed to be the limiting thing, and partially also the

819
00:57:52,019 --> 00:57:58,500
 networking of it all, but I think more of this verification bottleneck. So it was something like,

820
00:57:58,500 --> 00:58:04,340
 oh, if you had to do this for, I think, a million validators, Georgia some benchmarks for,

821
00:58:04,340 --> 00:58:10,300
 before, then on some, you know, on Raspberry Pi it might take, like, 36 seconds or something.

822
00:58:10,300 --> 00:58:18,559
 And it's very parallelizable, but it's still on better machines it would take maybe, I

823
00:58:18,559 --> 00:58:28,260
 don't know, like a second, two seconds, depending on how parallel it is, it was kind of borderline

824
00:58:28,260 --> 00:58:30,559
 impractical, I would say.

825
00:58:30,559 --> 00:58:36,480
 completely out of the realm of things that you could possibly do, but still not quite

826
00:58:36,480 --> 00:58:39,119
 something that you probably want to do today.

827
00:58:39,119 --> 00:58:42,320
 So, yeah, I hope that sort of answered your questions.

828
00:58:42,320 --> 00:58:46,820
 Thank you so much.

829
00:58:46,820 --> 00:58:53,779
 So another question was regarding the slide 35 all the way back in, I don't know how to

830
00:58:53,779 --> 00:58:54,779
 see the numbers.

831
00:58:54,779 --> 00:58:56,779
 Oh, okay, I can see it.

832
00:58:56,780 --> 00:59:03,100
 yeah yeah so regarding the view merge uh what happens if proposer is this honest uh if the

833
00:59:03,100 --> 00:59:12,220
 proposer is what it is honest nothing really it basically the the nice thing about it is that

834
00:59:12,220 --> 00:59:19,820
 they cannot prevent so maybe let's go here um you know if someone honest votes their vote will get

835
00:59:19,820 --> 00:59:24,700
 to everyone before they freeze so all of the honest votes will be in the frozen views i mean

836
00:59:24,699 --> 00:59:30,619
 assuming network is synchrony. So the proposer can't really do that much. It cannot somehow

837
00:59:30,619 --> 00:59:35,899
 censor honest votes, because they don't depend on the proposer to end up in the final merge view.

838
00:59:36,699 --> 00:59:41,259
 The only thing that the proposer can do is basically to confuse people about late votes.

839
00:59:41,259 --> 00:59:46,460
 If there's some votes that only show up here or here or something like that, then the proposer

840
00:59:46,460 --> 00:59:52,059
 can send maybe some merge message to some people or to some other people and confuse things,

841
00:59:52,059 --> 00:59:57,500
 but that's what you already can do as a dishonest proposer like uh uh you know all this like

842
00:59:57,500 --> 01:00:03,420
 withholding and like publishing late blog late messages and that's stuff that you can already

843
01:00:03,420 --> 01:00:09,019
 do so it actually does not give you any more adversarial power which it sort of formalized

844
01:00:09,019 --> 01:00:14,940
 by the fact that we've actually proved that this protocol is secure so it turns out like yeah the

845
01:00:14,940 --> 01:00:17,220
 The adversary can't really do anything with that.

846
01:00:20,000 --> 01:00:20,840
 Okay, awesome.

847
01:00:21,700 --> 01:00:24,760
 I think we can go ahead and move to the roadmap powerpoint

848
01:00:24,760 --> 01:00:26,280
 and then we'll leave more questions.

849
01:00:26,280 --> 01:00:27,119
 Okay.

850
01:00:39,200 --> 01:00:40,940
 Okay, yeah.

851
01:00:40,940 --> 01:00:42,880
 Yeah, so kind of, I guess what we talked about so far

852
01:00:42,880 --> 01:00:47,240
 is a single-cell finality, just to recap our fast finality.

853
01:00:47,240 --> 01:00:49,059
 What is good about it is basically

854
01:00:49,059 --> 01:00:51,260
 that it's, first of all, optimally secure,

855
01:00:51,260 --> 01:00:52,780
 like provably optimally secure.

856
01:00:52,780 --> 01:00:55,260
 Or we can hopefully get a protocol

857
01:00:55,260 --> 01:00:57,840
 like the ones I've described, even in practice.

858
01:00:57,840 --> 01:01:00,260
 These are more like papers at this point and the beginning

859
01:01:00,260 --> 01:01:02,200
 of a spec, but still, there's proofs,

860
01:01:02,200 --> 01:01:04,099
 and they get optimal security guarantees,

861
01:01:04,099 --> 01:01:08,920
 so ideally what you like, basically.

862
01:01:08,920 --> 01:01:15,960
 And so that's one thing, like not having to chase patches and fixes of this attack and that attack,

863
01:01:15,960 --> 01:01:20,760
 and then another attack comes up and all this stuff. Then the other thing is that we have

864
01:01:20,760 --> 01:01:26,200
 basically, you know, just obviously, like, that's why you, you know, you want fast finalities,

865
01:01:26,200 --> 01:01:29,639
 like, you can immediately have really good guarantees, like if you're transacting a lot

866
01:01:29,639 --> 01:01:34,760
 of money, once finality happens, you're pretty sure that it's not going to be reverted. For

867
01:01:34,760 --> 01:01:38,200
 for example, exchanges can do deposit fast,

868
01:01:38,200 --> 01:01:41,120
 you get better bridging, basically for the same reasons,

869
01:01:41,120 --> 01:01:43,480
 and you get better L2 interoperability,

870
01:01:43,480 --> 01:01:44,900
 and also that's kind of the same reason

871
01:01:44,900 --> 01:01:46,520
 as better bridging, basically.

872
01:01:48,000 --> 01:01:51,340
 Quickly, an L2, once some transaction's finalized,

873
01:01:51,340 --> 01:01:53,180
 maybe there's a proof for it,

874
01:01:53,180 --> 01:01:54,640
 if you have fast validity proofs,

875
01:01:54,640 --> 01:01:57,260
 then another L2 can already talk to you,

876
01:01:57,260 --> 01:01:59,820
 do asynchronous calls and things like that quickly.

877
01:02:01,540 --> 01:02:04,500
 Then, yeah, the other two items where it shows up,

878
01:02:04,500 --> 01:02:05,960
 it shows up in a bunch of places,

879
01:02:05,960 --> 01:02:09,940
 but two things that maybe people are familiar with is EPDS,

880
01:02:09,940 --> 01:02:13,920
 and then another one is DATAS, Data Availability Sampling.

881
01:02:13,920 --> 01:02:16,880
 So first, before getting into some of these things,

882
01:02:16,880 --> 01:02:21,119
 let's talk about some kind of for-choice variant

883
01:02:21,119 --> 01:02:23,500
 that turns out to be quite useful for a bunch

884
01:02:23,500 --> 01:02:25,199
 of these things.

885
01:02:25,199 --> 01:02:27,719
 And yeah, this is called block slot for-choice.

886
01:02:27,719 --> 01:02:29,440
 The idea is basically to allow people

887
01:02:29,440 --> 01:02:31,820
 to vote against blocks.

888
01:02:31,820 --> 01:02:34,620
 So far, you can just vote for blocks.

889
01:02:34,620 --> 01:02:35,980
 You can't really say, oh, I don't

890
01:02:35,980 --> 01:02:38,539
 want this block to become canonical.

891
01:02:38,539 --> 01:02:40,380
 And here, you sort of can.

892
01:02:40,380 --> 01:02:45,180
 Or you can think about it as voting for an empty slot.

893
01:02:45,180 --> 01:02:47,940
 So basically, the status quo is maybe you have block A,

894
01:02:47,940 --> 01:02:49,220
 block B is proposed.

895
01:02:49,220 --> 01:02:51,700
 But imagine that block B is late.

896
01:02:51,700 --> 01:02:54,019
 Today, a decision deadline is four seconds.

897
01:02:54,019 --> 01:02:57,780
 Maybe it comes at 5, or it comes at 3.9 or something.

898
01:02:57,780 --> 01:02:59,200
 Only a few people see it.

899
01:02:59,199 --> 01:03:02,179
 And these people attest to it, but most people

900
01:03:02,179 --> 01:03:04,659
 attest to A, the parent of B.

901
01:03:04,659 --> 01:03:09,599
 And so today, sure, that happens, but then still,

902
01:03:09,599 --> 01:03:11,299
 like B has some weight.

903
01:03:11,299 --> 01:03:13,939
 This weight is to the parent of B,

904
01:03:13,939 --> 01:03:18,119
 so it still contributes to B. And in theory,

905
01:03:18,119 --> 01:03:22,419
 there's a caveat that proposer boost is also used for reorgs,

906
01:03:22,419 --> 01:03:25,899
 but let's leave that aside.

907
01:03:25,899 --> 01:03:28,779
 Basically, B would still be the head of the chain at this point.

908
01:03:28,780 --> 01:03:31,060
 Instead, we block slot, basically what would happen

909
01:03:31,060 --> 01:03:33,940
 is that instead of having this block three,

910
01:03:33,940 --> 01:03:35,420
 we have a block slot three.

911
01:03:35,420 --> 01:03:39,100
 So instead of A, we have A at slot T.

912
01:03:39,100 --> 01:03:42,820
 And then there would be an A at slot T plus 1.

913
01:03:42,820 --> 01:03:47,300
 And I'm putting in blue the ones that are past their slot.

914
01:03:47,300 --> 01:03:52,740
 So here, basically, this is saying this slot is empty.

915
01:03:52,740 --> 01:03:55,900
 It's saying, oh, A existed at slot T.

916
01:03:55,900 --> 01:04:01,180
 And then, well, nothing was timely extending A at this slot.

917
01:04:01,180 --> 01:04:05,200
 So we put this placeholder A t plus 1, saying,

918
01:04:05,200 --> 01:04:08,440
 the way you should extend A at slot t plus 1 is with nothing,

919
01:04:08,440 --> 01:04:09,579
 with an empty slot.

920
01:04:09,579 --> 01:04:11,800
 So in this case, it would be the same.

921
01:04:11,800 --> 01:04:15,280
 A few people vote for B t plus 1, a non-empty block

922
01:04:15,280 --> 01:04:17,380
 or non-empty block slot.

923
01:04:17,380 --> 01:04:19,980
 But a lot of people vote for this empty one.

924
01:04:19,980 --> 01:04:21,639
 And actually, the empty one would win,

925
01:04:21,639 --> 01:04:23,900
 basically putting this in the block 3

926
01:04:23,900 --> 01:04:25,639
 so that these votes don't go to the parent,

927
01:04:25,639 --> 01:04:29,299
 but it go to this, it means that actually this empty thing

928
01:04:29,299 --> 01:04:30,980
 can beat this one.

929
01:04:30,980 --> 01:04:35,299
 And so if this isn't timely, it's going to get reordered.

930
01:04:35,299 --> 01:04:37,099
 It's just never going to become canonical.

931
01:04:37,099 --> 01:04:41,339
 People basically vote on the empty block or slot,

932
01:04:41,339 --> 01:04:47,879
 and they basically prevent this thing from becoming canonical.

933
01:04:47,879 --> 01:04:50,759
 Kind of bigger example, maybe this one is timely,

934
01:04:50,759 --> 01:04:53,519
 so this does exist, but it doesn't get any votes.

935
01:04:53,519 --> 01:04:55,900
 Everyone votes for this one.

936
01:04:55,900 --> 01:05:00,400
 Then maybe this slot is empty, and everyone, like, just here,

937
01:05:00,400 --> 01:05:02,079
 maybe the proposer just doesn't show up.

938
01:05:02,079 --> 01:05:03,059
 There's no contender.

939
01:05:03,059 --> 01:05:05,559
 Everyone votes for this slot to be empty.

940
01:05:05,559 --> 01:05:09,059
 There's also this one, but no one votes for it.

941
01:05:09,059 --> 01:05:11,440
 Again, there's also this one, but no one votes for it.

942
01:05:11,440 --> 01:05:14,219
 But finally, in the last slot, we

943
01:05:14,219 --> 01:05:17,059
 have this kind of case of this block being, sorry,

944
01:05:17,059 --> 01:05:18,900
 this new block being late.

945
01:05:18,900 --> 01:05:20,840
 So no one votes for it, because it's late.

946
01:05:20,840 --> 01:05:24,620
 everyone votes for yet another empty B slot,

947
01:05:24,620 --> 01:05:26,120
 so in this case, B, T plus 3.

948
01:05:26,120 --> 01:05:27,440
 And then this becomes canonical.

949
01:05:27,440 --> 01:05:30,559
 So now we have two blocks, two empty blocks

950
01:05:30,559 --> 01:05:32,340
 kind of extending the chain.

951
01:05:32,340 --> 01:05:38,300
 And this is the canonical chain, culminating in this empty block.

952
01:05:38,300 --> 01:05:42,500
 And yeah, basically, this is what it would it look like

953
01:05:42,500 --> 01:05:43,780
 with today's fourth choice.

954
01:05:43,780 --> 01:05:46,800
 Like A comes, B comes, everything is fine.

955
01:05:46,800 --> 01:05:49,559
 You're a missed slot, people vote for B.

956
01:05:49,559 --> 01:05:53,219
 And now C is late, people vote for B again.

957
01:05:53,219 --> 01:05:55,440
 So all this empty stuff just disappears,

958
01:05:55,440 --> 01:05:58,779
 and B stays the head of the chain.

959
01:05:58,779 --> 01:06:01,679
 Sorry, sorry, I mean, well, B is in the chain,

960
01:06:01,679 --> 01:06:04,619
 but C actually is the head of the chain,

961
01:06:04,619 --> 01:06:07,380
 because there's nothing going against it.

962
01:06:07,380 --> 01:06:09,219
 There's no empty block.

963
01:06:09,219 --> 01:06:12,119
 Once you run your fork choice, you go A, B,

964
01:06:12,119 --> 01:06:14,940
 and then there's only one child, so you end up at C. Whereas

965
01:06:14,940 --> 01:06:18,900
 here, you end up still at B.

966
01:06:18,900 --> 01:06:26,660
 Some applications of this are useful are, one is this pretty generic idea of committee enforceable

967
01:06:26,660 --> 01:06:38,740
 properties, which is that basically if a certain proposed block does not fulfill a certain property,

968
01:06:40,019 --> 01:06:45,940
 the attesting committee or the attesters will vote for the empty block, so they'll vote against it,

969
01:06:45,940 --> 01:06:51,480
 it, basically to say, we don't want this block to become canonical.

970
01:06:51,480 --> 01:06:57,280
 So for example, inclusion list satisfaction, that's not what the current proposal is, but

971
01:06:57,280 --> 01:07:00,960
 there was like, one of the original proposals used this mechanism.

972
01:07:00,960 --> 01:07:05,059
 So where it basically, the enforcement of the inclusion list was based on basically

973
01:07:05,059 --> 01:07:08,940
 a committee looking and saying, does this block satisfy the inclusion list that I know

974
01:07:08,940 --> 01:07:09,940
 about?

975
01:07:09,940 --> 01:07:10,940
 Yes.

976
01:07:10,940 --> 01:07:11,940
 Okay, great, I'll go for it.

977
01:07:11,940 --> 01:07:14,079
 No, then I'm going to vote for the empty block.

978
01:07:14,079 --> 01:07:18,819
 it and trying to make sure it does not become canonical because it didn't satisfy this thing

979
01:07:18,819 --> 01:07:21,179
 it was supposed to satisfy.

980
01:07:21,179 --> 01:07:26,699
 Similar thing is with map burn, which is basically, there's some bids and you try to make sure

981
01:07:26,699 --> 01:07:33,239
 that the block proposal maximizes, it chooses a bid that is maximal, the highest that you've

982
01:07:33,239 --> 01:07:37,719
 seen by some time, and otherwise you vote against it.

983
01:07:37,719 --> 01:07:41,879
 The other two things again is EPBS and DAS.

984
01:07:41,879 --> 01:07:44,319
 So in EPBS, basically,

985
01:07:44,319 --> 01:07:47,439
 proposers will accept bids from builders.

986
01:07:47,439 --> 01:07:49,839
 And basically, if they,

987
01:07:50,919 --> 01:07:52,619
 like one thing that a proposer can do

988
01:07:52,619 --> 01:07:55,859
 is try to grief a builder by accepting the bid but late,

989
01:07:55,859 --> 01:08:00,139
 just publishing a block which accept this bid late.

990
01:08:00,139 --> 01:08:02,879
 And the builder then kind of is put in an awkward situation

991
01:08:02,879 --> 01:08:05,359
 where it doesn't know quite what to do.

992
01:08:05,360 --> 01:08:09,260
 And so it blocks a lot, it enforces timeliness,

993
01:08:09,260 --> 01:08:12,519
 it makes sure that if you don't publish it early enough,

994
01:08:12,519 --> 01:08:14,019
 like by that decision deadline,

995
01:08:14,019 --> 01:08:17,360
 then you don't get attestations for your block,

996
01:08:17,360 --> 01:08:18,560
 and then it's not gonna win,

997
01:08:18,560 --> 01:08:21,420
 like it's gonna be basically orphaned.

998
01:08:21,420 --> 01:08:24,739
 And so it kind of gives some safety to this mechanism.

999
01:08:25,720 --> 01:08:28,579
 And yes, for choice, the idea here is that

1000
01:08:30,319 --> 01:08:32,400
 if a block is unavailable,

1001
01:08:32,400 --> 01:08:34,420
 so I mean, we can set up things in such a way

1002
01:08:34,420 --> 01:08:39,420
 that through sampling, that most honest validators,

1003
01:08:39,859 --> 01:08:42,899
 even if none of them is downloading all of the data,

1004
01:08:42,899 --> 01:08:45,960
 their sampling, but most of them will see

1005
01:08:45,960 --> 01:08:47,159
 that the block is not available.

1006
01:08:47,159 --> 01:08:49,619
 There may be like a small percentage of them that doesn't,

1007
01:08:49,619 --> 01:08:51,579
 but most of them will vote against it

1008
01:08:51,579 --> 01:08:53,159
 basically for the empty block.

1009
01:08:53,159 --> 01:08:55,659
 And so because of block slot,

1010
01:08:55,659 --> 01:08:57,640
 unavailable blocks will just not be able

1011
01:08:57,640 --> 01:09:00,260
 to become canonical, or even to look canonical,

1012
01:09:00,260 --> 01:09:03,399
 meaning like, you know, if you somehow don't know

1013
01:09:03,399 --> 01:09:05,539
 that they're unavailable, you still

1014
01:09:05,539 --> 01:09:07,119
 wouldn't think that they're canonical.

1015
01:09:07,119 --> 01:09:09,279
 Even if, for some reason, your sampling has failed,

1016
01:09:09,279 --> 01:09:15,759
 you've been tricked into maybe a small percentage of the data

1017
01:09:15,759 --> 01:09:19,000
 is available, and that's exactly the data that you've requested.

1018
01:09:19,000 --> 01:09:24,339
 Someone's targeting you in this data release attack.

1019
01:09:24,339 --> 01:09:26,679
 But you still wouldn't think that the block is canonical

1020
01:09:26,679 --> 01:09:28,159
 just because you wouldn't get enough weight.

1021
01:09:28,159 --> 01:09:29,679
 So basically, honest majority would

1022
01:09:29,679 --> 01:09:31,879
 protect the whole mechanism, which is nice.

1023
01:09:31,880 --> 01:09:37,159
 it also just means that as long as there's an honest majority it basically doesn't mess up

1024
01:09:37,159 --> 01:09:42,279
 with consensus, this whole availability thing, I'll kind of explain it a bit later better. One

1025
01:09:42,279 --> 01:09:47,960
 problem with block slots, like one challenge, is that if you do have higher latency, again as I

1026
01:09:47,960 --> 01:09:55,159
 said it enforces timeliness, but sometimes blocks being late is just someone trying to do something

1027
01:09:55,720 --> 01:10:01,800
 weird, some attack or timing games or something, but sometimes higher latency just happens,

1028
01:10:01,800 --> 01:10:04,119
 And then, you know, if that were the case,

1029
01:10:04,180 --> 01:10:06,400
 the blocks don't make it into four seconds,

1030
01:10:06,860 --> 01:10:07,760
 they wouldn't get attested.

1031
01:10:08,000 --> 01:10:09,300
 Everyone would attest to the empty block.

1032
01:10:10,159 --> 01:10:11,239
 Block production would halt.

1033
01:10:11,619 --> 01:10:12,880
 So, you know, you would get the situation where,

1034
01:10:13,000 --> 01:10:13,900
 okay, this block was late.

1035
01:10:14,260 --> 01:10:15,539
 People attested to the empty block.

1036
01:10:16,079 --> 01:10:18,680
 Then this one forks it out because this one wins.

1037
01:10:19,619 --> 01:10:23,239
 Or, sorry, yeah, this C should extend this one.

1038
01:10:23,619 --> 01:10:24,720
 And this should extend this one.

1039
01:10:24,779 --> 01:10:26,600
 But anyway, yeah, they extend the empty blocks

1040
01:10:26,600 --> 01:10:27,380
 coming before them.

1041
01:10:27,779 --> 01:10:29,039
 But yeah, anyway, the point is that

1042
01:10:29,039 --> 01:10:31,060
 none of these blocks is ever timely.

1043
01:10:31,060 --> 01:10:40,120
 it never gets it stations, it keeps growing, it doesn't do anything it just you do have

1044
01:10:40,120 --> 01:10:46,760
 basically still state transitions in the beacon chain, but it will not actually have any content,

1045
01:10:46,760 --> 01:10:50,060
 like neither beacon nor execution content.

1046
01:10:50,060 --> 01:10:56,560
 So, but still, that's a challenge, and I guess I should say about this, so one important

1047
01:10:56,560 --> 01:11:00,800
 thing in trying to do this, if we need it, to do block slot,

1048
01:11:00,800 --> 01:11:06,700
 is to basically design some kind of back-off system, which

1049
01:11:06,700 --> 01:11:09,820
 makes it so that if such a situation happens,

1050
01:11:09,820 --> 01:11:13,720
 we somehow gracefully, maybe failed gracefully,

1051
01:11:13,720 --> 01:11:17,680
 like try to revert to maybe turn it off in some way,

1052
01:11:17,680 --> 01:11:20,200
 like revert to actually producing blocks,

1053
01:11:20,200 --> 01:11:24,660
 even if it maybe damages some things that block slot was

1054
01:11:24,660 --> 01:11:25,360
 helping.

1055
01:11:25,359 --> 01:11:27,779
 And so yeah, this is actually sort of an open question.

1056
01:11:27,779 --> 01:11:29,779
 I mean, I have some ideas on how this can work.

1057
01:11:29,779 --> 01:11:34,579
 But I think if people are interested in this general space

1058
01:11:34,579 --> 01:11:37,539
 of problems, I think this is something where literally

1059
01:11:37,539 --> 01:11:41,299
 anyone could come in and spend some time and write up

1060
01:11:41,299 --> 01:11:43,380
 a decent back-off protocol.

1061
01:11:43,380 --> 01:11:46,479
 So that would be quite helpful, I think.

1062
01:11:46,479 --> 01:11:49,299
 And yeah, so let's kind of look at just

1063
01:11:49,299 --> 01:11:52,399
 how things fit into APBS, because that's also

1064
01:11:52,399 --> 01:11:59,279
 pretty open space of, you know, there's some problems and solutions are many and confusing,

1065
01:11:59,279 --> 01:12:03,739
 and so there's definitely work to do there.

1066
01:12:03,739 --> 01:12:09,799
 I think you guys had some, Barnaby gave a talk, so I'm assuming you're familiar with

1067
01:12:09,799 --> 01:12:15,239
 E-PBS or just a general E-PBS idea, so I don't think I have time to say too much about it,

1068
01:12:15,239 --> 01:12:21,199
 But basically, there's just this part of the block production

1069
01:12:21,199 --> 01:12:23,800
 process, which is bidding and accepting bids.

1070
01:12:23,800 --> 01:12:25,559
 So here, a proposer is going to accept

1071
01:12:25,559 --> 01:12:29,340
 this bidP, which in this case is like a header execution header.

1072
01:12:29,340 --> 01:12:33,340
 And then the builder will reveal the actual execution payload

1073
01:12:33,340 --> 01:12:35,939
 P, like the full thing.

1074
01:12:35,939 --> 01:12:37,800
 So this is just a commitment to it.

1075
01:12:37,800 --> 01:12:40,960
 And so one of the things that was proposed for in protocol

1076
01:12:40,960 --> 01:12:45,000
 PBS or in Shrine PBS is this two-slot approach,

1077
01:12:45,000 --> 01:12:46,819
 where basically the commitment part,

1078
01:12:46,819 --> 01:12:50,380
 the accepting the actual BeaconProposer accepting

1079
01:12:50,380 --> 01:12:53,060
 the payload header, it happens in its own slot.

1080
01:12:53,060 --> 01:12:56,560
 And then the reveal of the payload happens in its own slot.

1081
01:12:56,560 --> 01:13:00,039
 And this kind of, it makes things nice, like in some sense,

1082
01:13:00,039 --> 01:13:02,420
 like it's easy to think about the security

1083
01:13:02,420 --> 01:13:05,119
 of the participants involved.

1084
01:13:05,119 --> 01:13:07,319
 Like everyone kind of acts as a proposer,

1085
01:13:07,319 --> 01:13:09,720
 gets it's own attestations.

1086
01:13:09,720 --> 01:13:11,500
 And you can basically think of it as like,

1087
01:13:11,500 --> 01:13:14,800
 As long as in the protocol today,

1088
01:13:14,800 --> 01:13:17,340
 proposers have some kind of good guarantees,

1089
01:13:17,340 --> 01:13:18,659
 like they can use ProposerBoost

1090
01:13:18,659 --> 01:13:21,619
 to defend themselves against attacks decently enough,

1091
01:13:21,619 --> 01:13:24,119
 then both builders and proposers in this protocol

1092
01:13:24,119 --> 01:13:26,279
 should have decent guarantees.

1093
01:13:26,279 --> 01:13:29,039
 Now, the problem is that we are again faced

1094
01:13:29,039 --> 01:13:33,060
 with exantery orgs, but like in an EPPS kind of annoying,

1095
01:13:33,060 --> 01:13:36,520
 more powerful version, where basically,

1096
01:13:36,520 --> 01:13:38,659
 so exantery orgs, again, remember it's something like this,

1097
01:13:38,659 --> 01:13:41,500
 where you withhold blocks and votes,

1098
01:13:41,500 --> 01:13:43,520
 and then you reveal them to try to reorg,

1099
01:13:43,520 --> 01:13:45,239
 in this case, to like beat, propose, or boost,

1100
01:13:45,239 --> 01:13:46,779
 and create a reorg.

1101
01:13:46,779 --> 01:13:48,380
 And it's really relies on this, like,

1102
01:13:48,380 --> 01:13:50,520
 accumulation of voting power.

1103
01:13:50,520 --> 01:13:53,180
 Now, the EPS version of this is just same thing,

1104
01:13:53,180 --> 01:13:56,300
 but now, these, like, two, you know,

1105
01:13:56,300 --> 01:13:59,180
 before they had to be two actual slots, two actual blocks,

1106
01:13:59,180 --> 01:14:02,560
 here it's gonna be, like, this kind of, you know,

1107
01:14:02,560 --> 01:14:04,779
 beacon slot, an execution slot.

1108
01:14:04,779 --> 01:14:06,819
 And the thing about it is that it basically means

1109
01:14:06,819 --> 01:14:08,100
 the adversarial power is doubled.

1110
01:14:08,100 --> 01:14:10,699
 Like, as soon as I control one slot,

1111
01:14:10,699 --> 01:14:12,340
 I also can control the next one.

1112
01:14:12,340 --> 01:14:14,000
 I can choose myself as the builder,

1113
01:14:14,000 --> 01:14:16,659
 or I can collude with a builder, or something like that.

1114
01:14:16,659 --> 01:14:22,639
 And so now I control two slots and two red committees,

1115
01:14:22,639 --> 01:14:23,460
 basically.

1116
01:14:23,460 --> 01:14:26,899
 And so I can immediately have as much power as two,

1117
01:14:26,899 --> 01:14:28,220
 if I control two proposers.

1118
01:14:28,220 --> 01:14:31,399
 And if I control two of them, now I have as much power as four

1119
01:14:31,399 --> 01:14:32,840
 and this kind of thing.

1120
01:14:32,840 --> 01:14:35,519
 So that's the rough idea of why it basically

1121
01:14:35,519 --> 01:14:38,939
 makes all of these attacks quite worse.

1122
01:14:38,939 --> 01:14:40,479
 So that's not ideal.

1123
01:14:40,479 --> 01:14:43,319
 And yeah, there's another proposed version,

1124
01:14:43,319 --> 01:14:47,759
 which is actually one slot, where you introduce

1125
01:14:47,759 --> 01:14:50,019
 this other kind of committee that's

1126
01:14:50,019 --> 01:14:53,079
 called Payload Timeliness Committee, which is still

1127
01:14:53,079 --> 01:14:58,000
 voting, but it's really voting on a yes or no question of just

1128
01:14:58,000 --> 01:15:01,539
 was the payload that was committed here timely?

1129
01:15:01,539 --> 01:15:03,279
 Was it not timely?

1130
01:15:03,279 --> 01:15:07,259
 And yeah, I don't want to go too much in detail,

1131
01:15:07,259 --> 01:15:10,059
 but there are also some questions here of,

1132
01:15:10,060 --> 01:15:13,360
 This is some problem with basically the protocol not

1133
01:15:13,360 --> 01:15:15,340
 giving super great guarantees to builders.

1134
01:15:15,340 --> 01:15:16,780
 Like, they can be basically forced

1135
01:15:16,780 --> 01:15:19,360
 to reveal a payload without being sure that,

1136
01:15:19,360 --> 01:15:20,980
 or having a strong guarantee that it's

1137
01:15:20,980 --> 01:15:22,420
 going to become canonical.

1138
01:15:22,420 --> 01:15:25,840
 And yeah, there's some proposals on maybe how to fix that,

1139
01:15:25,840 --> 01:15:28,300
 but things are not entirely clear.

1140
01:15:28,300 --> 01:15:31,360
 Potus is the person to talk to if you're interested in this

1141
01:15:31,360 --> 01:15:32,920
 and he's worked on this more.

1142
01:15:32,920 --> 01:15:34,980
 I haven't more recently.

1143
01:15:34,980 --> 01:15:37,480
 But anyway, so this is one of the things that has kind of

1144
01:15:37,479 --> 01:15:43,079
 blocked partially EPPS plus the fact that I mean there's other questions around you know whether

1145
01:15:43,079 --> 01:15:47,559
 or not we actually want to do it or which versions or things like that but there's like basically no

1146
01:15:47,559 --> 01:15:53,559
 matter what version of it you can propose that I've ever heard there is always some of these

1147
01:15:53,559 --> 01:15:58,519
 fortress problems involved with them like pretty much all this the same kind of space of problems

1148
01:15:58,520 --> 01:16:09,160
 And so, yeah, basically, no matter what, I think this is something that will need to be dealt with,

1149
01:16:09,160 --> 01:16:15,640
 essentially. So, the nice thing is that in our LMD ghost, so going back to our kind of nice,

1150
01:16:15,640 --> 01:16:21,240
 theoretically functioning protocol where everyone votes at once, there's no committees and stuff

1151
01:16:21,240 --> 01:16:25,640
 like that. So, if you remember, we didn't have xm3 orgs in our LMD ghost, and the reason for that is

1152
01:16:25,640 --> 01:16:36,360
 we don't have committees. So it's basically the same thing here. Before I use this for expiry,

1153
01:16:36,360 --> 01:16:40,680
 but here it's just that these are not the latest messages anymore. These are the latest messages,

1154
01:16:40,680 --> 01:16:45,560
 these are the latest messages. So there's no accumulation again. The same thing that

1155
01:16:45,560 --> 01:16:52,760
 we had before. These votes represent honest votes from basically a majority of the validator set,

1156
01:16:52,760 --> 01:16:58,199
 and they cannot be beaten by it by these ones there's because this is not a committee this

1157
01:16:58,199 --> 01:17:02,760
 is really like half of the validator set or more than half the validator set and so it fixes the

1158
01:17:02,760 --> 01:17:07,560
 problem in the same way as before basically the same guarantee that as soon as an honest guy shows

1159
01:17:07,560 --> 01:17:12,920
 up everyone votes for it and that's enough like then it doesn't matter what happened in the past

1160
01:17:12,920 --> 01:17:18,680
 basically so it kind of it it fixes like the the the root problem of xanthory orgs even if you

1161
01:17:18,680 --> 01:17:22,340
 you put it into this EPPS context.

1162
01:17:22,340 --> 01:17:25,159
 So yeah, same thing, and then you keep going with it.

1163
01:17:25,159 --> 01:17:27,920
 Everyone's going to keep building on that chain.

1164
01:17:27,920 --> 01:17:31,820
 And now pretty much the last thing,

1165
01:17:31,820 --> 01:17:35,360
 basically the fourth choice affects the peer DAS

1166
01:17:35,360 --> 01:17:40,240
 part of the roadmap, or just generally the DAS part

1167
01:17:40,240 --> 01:17:41,900
 of the roadmap.

1168
01:17:41,900 --> 01:17:44,740
 So it just very quickly kind of giving you

1169
01:17:44,740 --> 01:17:48,380
 the idea of what's the availability sampling,

1170
01:17:48,380 --> 01:17:52,279
 in case you don't know, but it's a few slides.

1171
01:17:52,279 --> 01:17:53,760
 Basically, we have blobs today,

1172
01:17:53,760 --> 01:17:56,159
 that would be this blue part of data

1173
01:17:56,159 --> 01:17:58,460
 that roll up supposed to Ethereum.

1174
01:17:58,460 --> 01:18:00,880
 Now, the idea of DAS is that we want to extend them.

1175
01:18:00,880 --> 01:18:04,180
 So we want to basically apply it as a ratio coding thing

1176
01:18:04,180 --> 01:18:05,460
 where you double their size,

1177
01:18:05,460 --> 01:18:08,859
 and so you add this orange part and introduce redundancy.

1178
01:18:08,859 --> 01:18:13,539
 And now, as soon as you have half of all of these cells

1179
01:18:13,539 --> 01:18:17,659
 or data points, then you can reconstruct the whole thing.

1180
01:18:17,659 --> 01:18:20,779
 And so checking that a blob is available

1181
01:18:20,779 --> 01:18:23,199
 means just checking that 50% of it is available.

1182
01:18:23,199 --> 01:18:25,960
 And so you can basically do this kind of sampling thing

1183
01:18:25,960 --> 01:18:29,760
 of just checking a few spots randomly chosen.

1184
01:18:29,760 --> 01:18:33,359
 And basically, as long as a lot of people are doing this,

1185
01:18:33,359 --> 01:18:38,359
 you know that, like, you really don't need

1186
01:18:38,720 --> 01:18:40,579
 to check the whole thing to kind of convince yourself

1187
01:18:40,579 --> 01:18:42,680
 that it's available, or at least like,

1188
01:18:42,680 --> 01:18:45,180
 in most of a small amount of people that are doing it

1189
01:18:45,180 --> 01:18:49,200
 can be fooled into thinking that it's something

1190
01:18:49,200 --> 01:18:51,940
 that is unavailable is available.

1191
01:18:51,940 --> 01:18:56,940
 And yeah, basically once you look at a bunch of blobs,

1192
01:18:56,940 --> 01:18:58,380
 it looks pretty much the same way,

1193
01:18:58,380 --> 01:19:00,340
 at least in the current proposal.

1194
01:19:00,340 --> 01:19:04,380
 There's 1D versus 2D, but the current thinking

1195
01:19:04,380 --> 01:19:05,579
 is to start with 1D.

1196
01:19:05,579 --> 01:19:08,940
 And so basically you just stack blobs on top of each other.

1197
01:19:08,940 --> 01:19:11,320
 Each one is extended like this.

1198
01:19:11,320 --> 01:19:13,320
 And then you basically download columns.

1199
01:19:13,320 --> 01:19:14,680
 So it's the same as here.

1200
01:19:14,680 --> 01:19:17,520
 you just choose some indices, but then it's

1201
01:19:17,520 --> 01:19:20,840
 as if you just choose the same indices for every blob.

1202
01:19:20,840 --> 01:19:23,520
 And so you do sampling on every blob in the same spots.

1203
01:19:23,520 --> 01:19:26,079
 And so that's the same as just downloading a bunch of columns

1204
01:19:26,079 --> 01:19:28,659
 from this matrix.

1205
01:19:28,659 --> 01:19:32,560
 And then, yeah, basically, if half of the columns

1206
01:19:32,560 --> 01:19:34,600
 are available, then the whole thing is available.

1207
01:19:34,600 --> 01:19:37,100
 And so if you download a few columns,

1208
01:19:37,100 --> 01:19:39,360
 you can have the same guarantees.

1209
01:19:39,360 --> 01:19:42,100
 Now, the nice thing about doing this from a forechoice

1210
01:19:42,100 --> 01:19:47,640
 perspective is that as long as you can do enough sampling it doesn't have to be like all of the

1211
01:19:47,640 --> 01:19:52,940
 sampling maybe you want to do more later um saying this because there's different ways to do sampling

1212
01:19:52,940 --> 01:19:57,980
 and there's some ways they're more expensive um and but anyway it doesn't super much matter but

1213
01:19:57,980 --> 01:20:04,240
 basically as long as you can do enough download enough columns before you vote like at any point

1214
01:20:04,240 --> 01:20:10,100
 you ever vote for something you really do sampling before that uh we can get this really good global

1215
01:20:10,100 --> 01:20:15,860
 property, which is that it mostly really, the small percentage of honest validators

1216
01:20:16,579 --> 01:20:24,100
 can basically, well, yeah, this should say, like, can ever vote for unavailable data. So,

1217
01:20:27,060 --> 01:20:31,460
 oh yeah, okay, no, that's what it says later. Yeah, it's okay. And most, a small percentage

1218
01:20:31,460 --> 01:20:37,460
 of the honest validators can see unavailable data is available. So, that's just because of

1219
01:20:37,460 --> 01:20:42,260
 doing sampling, and particularly if you do it before voting, then by voting time,

1220
01:20:42,260 --> 01:20:48,100
 then you have this property. So because of that, if you have at least 1.5 plus delta,

1221
01:20:48,100 --> 01:20:53,380
 so delta might be 5%, 10%, 2%, it depends how much sampling you do, but basically,

1222
01:20:54,180 --> 01:20:59,220
 if you have at least 1.5 plus delta of honest validators, so maybe 55% of the validator set

1223
01:20:59,220 --> 01:21:06,020
 is honest, it's a bit stronger than the honest majority assumption, then a majority always votes

1224
01:21:06,020 --> 01:21:09,940
 against an available block and this against here is in the sense of block slot so it's going to

1225
01:21:09,940 --> 01:21:15,300
 vote for the empty block rather than for this unavailable block um and basically so what this

1226
01:21:15,300 --> 01:21:21,380
 amounts to is a delta weakening of the uh you know of our assumptions so instead of assuming honest

1227
01:21:21,380 --> 01:21:28,260
 majority we have to assume honest majority plus delta um and or like delta strengthening or

1228
01:21:28,260 --> 01:21:35,220
 assumptions and uh but if we do have that then we are sure that we can never accrue a majority

1229
01:21:35,220 --> 01:21:42,500
 on an unavailable block. And once you have block slot, so by itself, this doesn't give you so much

1230
01:21:42,500 --> 01:21:45,940
 because even blocks that don't have a lot of votes, they're not supported by majority,

1231
01:21:46,060 --> 01:21:51,260
 they can still be canonical or look canonical if you don't know that the block is actually

1232
01:21:51,260 --> 01:21:56,760
 unavailable. But yeah, with the block slot for choice, it means that even if you are in this

1233
01:21:56,760 --> 01:22:02,619
 delta, even if you are one of the minority validators that has been fooled, that thinks

1234
01:22:02,619 --> 01:22:06,779
 that this block is unavailable, sorry, that this block is available while it's not available.

1235
01:22:06,779 --> 01:22:13,619
 With the block-sled fork choice, you still will not see it as canonical, because basically

1236
01:22:13,619 --> 01:22:20,680
 everyone else, like the, you know, 1-delta people that are actually in the right, like

1237
01:22:20,680 --> 01:22:24,059
 that have not been fooled, they will come dragging with them.

1238
01:22:24,059 --> 01:22:29,859
 Like, they are a majority, and they will put their weight on the empty block and make sure

1239
01:22:29,859 --> 01:22:36,099
 that you also go with them. And so basically, yeah, like the fork choice ends up working as

1240
01:22:36,099 --> 01:22:43,539
 if we just didn't have DAS, because if something is unavailable, then it can never look canonical

1241
01:22:43,539 --> 01:22:49,339
 to anyone. Like you might vote for it right as it's proposed, because at that point, you don't

1242
01:22:49,339 --> 01:22:54,099
 know other people, like people haven't voted yet. You just, if it's there and it looks available to

1243
01:22:54,099 --> 01:22:59,380
 you, you vote for it. So if your sampling completes, you're going to vote for it. But then from the

1244
01:22:59,380 --> 01:23:03,539
 it's always going to look unavailable to you, as long as there is an honest majority.

1245
01:23:03,539 --> 01:23:09,539
 You will see that everyone voted for the empty slot, or a majority did, the honest people,

1246
01:23:09,539 --> 01:23:15,220
 and so you'll just go to the empty slot, part of the of the Fortress 3, and will just

1247
01:23:15,940 --> 01:23:21,140
 say, okay, this looks available to me, but whatever, no one is voting for it, so I'm

1248
01:23:21,140 --> 01:23:26,260
 just going to go away from it. And this actually simplifies things a lot, it means that all of

1249
01:23:26,260 --> 01:23:32,980
 all of these like weird edge cases which I didn't get into of like basically attacks that you can do

1250
01:23:32,980 --> 01:23:38,860
 to try to exploit uh this minority of people that you can convince uh that something is unavailable

1251
01:23:38,860 --> 01:23:46,000
 and so on you can't actually do any of these attacks um so it it really makes things uh much

1252
01:23:46,000 --> 01:23:50,680
 much nicer so that's and this is also again something um as I said before like block slot

1253
01:23:50,680 --> 01:23:52,680
 it's like, it has this problem of back-off,

1254
01:23:52,960 --> 01:23:55,900
 but I think it has a lot of advantages,

1255
01:23:56,060 --> 01:23:57,680
 and I think this is probably the biggest advantage.

1256
01:23:57,800 --> 01:24:01,940
 The ePBS thing is maybe it's nice,

1257
01:24:02,100 --> 01:24:04,579
 but also I guess there's disagreement

1258
01:24:04,579 --> 01:24:06,960
 around what exactly we should do with ePBS

1259
01:24:06,960 --> 01:24:08,400
 or whether or not it's needed,

1260
01:24:08,700 --> 01:24:11,320
 and different people tell you different things.

1261
01:24:11,420 --> 01:24:12,800
 I think everyone agrees that peer-to-us

1262
01:24:12,800 --> 01:24:14,039
 is something that we really want to do,

1263
01:24:14,140 --> 01:24:16,340
 and I think right now it looks to me

1264
01:24:16,340 --> 01:24:19,039
 as if this block-slot-for-choice

1265
01:24:19,039 --> 01:24:23,840
 it's a pretty important piece of it that really makes everything work nicely.

1266
01:24:23,840 --> 01:24:28,159
 So that's why it's a higher value item to work on, potentially.

1267
01:24:28,159 --> 01:24:32,659
 So again, it's pretty simple thing to think about.

1268
01:24:32,659 --> 01:24:34,539
 You don't need a lot of background, I think.

1269
01:24:34,539 --> 01:24:39,880
 So that's maybe something that, yeah, if anyone that's following it just looks interested,

1270
01:24:39,880 --> 01:24:42,399
 we can talk about it more.

1271
01:24:42,399 --> 01:24:45,000
 And I think, yeah, that's it.

1272
01:24:45,000 --> 01:24:47,239
 I know this was a lot.

1273
01:24:47,239 --> 01:24:50,399
 I tried to give you just a sprinkling of a lot of things.

1274
01:24:50,399 --> 01:24:54,279
 And maybe you can go and watch the recording for details

1275
01:24:54,279 --> 01:24:58,800
 that I'm sure you've missed about a lot of stuff.

1276
01:24:58,800 --> 01:25:02,539
 But yeah, hopefully it gave you just an idea

1277
01:25:02,539 --> 01:25:05,899
 of what are the main places in the roadmap

1278
01:25:05,899 --> 01:25:08,099
 where the fork choice shows up at the moment,

1279
01:25:08,099 --> 01:25:10,880
 what are some of the long-term, what does it look like

1280
01:25:10,880 --> 01:25:13,819
 the SSF landscape looks like.

1281
01:25:13,819 --> 01:25:21,859
 And again, there as well, I kind of, there's a lot that I didn't cover because there's multiple papers, just a lot of ongoing work.

1282
01:25:22,920 --> 01:25:36,539
 But yeah, I guess maybe in terms of like ways to get involved, as I said, like there is this specking effort that's sort of on and off happening around this like chained fast finality protocol.

1283
01:25:36,539 --> 01:25:43,939
 it's written but it could be written more nicely,

1284
01:25:43,939 --> 01:25:49,420
 Luca is writing a paper around that, it's a formal document,

1285
01:25:49,420 --> 01:25:52,500
 but there's even a well-written blog post,

1286
01:25:52,500 --> 01:25:54,840
 there's something that someone could do as well,

1287
01:25:54,840 --> 01:25:59,100
 there's a lot of really small and big things to work on,

1288
01:25:59,100 --> 01:26:05,019
 on a lot of these items, so yes, if you find anything interesting,

1289
01:26:05,020 --> 01:26:07,700
 and just shoot me a message, I guess.

1290
01:26:09,500 --> 01:26:11,000
 I, yeah, I'm not sure what's,

1291
01:26:11,000 --> 01:26:13,380
 I guess on Discord it probably is what works best,

1292
01:26:13,380 --> 01:26:16,680
 but, and then I guess I'll share,

1293
01:26:16,680 --> 01:26:20,220
 I shared some resources in the GitHub thing,

1294
01:26:20,220 --> 01:26:22,860
 but there's a lot more.

1295
01:26:22,860 --> 01:26:25,780
 So maybe, yeah, I might leave some things,

1296
01:26:25,780 --> 01:26:28,160
 but also just if someone is specifically interested

1297
01:26:28,160 --> 01:26:29,860
 in a topic, then I can send you a lot more things.

1298
01:26:29,860 --> 01:26:32,540
 I don't want to like inundate people with links.

1299
01:26:33,500 --> 01:26:34,540
 So yeah, that's that.

1300
01:26:34,539 --> 01:26:35,600
 Thank you for having me.

1301
01:26:37,140 --> 01:26:39,439
 Thank you very much, Francesco.

1302
01:26:39,439 --> 01:26:40,859
 Yeah, thanks a lot.

1303
01:26:40,859 --> 01:26:41,699
 This was a lot.

1304
01:26:41,699 --> 01:26:45,359
 I don't know it was, I can speak quite fast.

1305
01:26:48,359 --> 01:26:49,939
 Yeah, still trying to process everything.

1306
01:26:49,939 --> 01:26:51,519
 It was a great talk though.

1307
01:26:51,519 --> 01:26:53,180
 Thank you very much.

1308
01:26:53,180 --> 01:26:55,239
 One question is if you can join the Discord

1309
01:26:55,239 --> 01:26:56,960
 and maybe answer some questions later

1310
01:26:56,960 --> 01:26:59,359
 because people will probably watch it.

1311
01:26:59,359 --> 01:27:02,260
 I will show you the link right here.

1312
01:27:02,260 --> 01:27:10,619
 Thank you very much. Let's see if there are any quick questions before we wrap it up in the last five minutes.

1313
01:27:10,619 --> 01:27:17,960
 There was a question regarding the EPBS part now in the end.

1314
01:27:17,960 --> 01:27:24,820
 In the blog slot slides, is the EPBS referring to block auction EPBS?

1315
01:27:24,819 --> 01:27:28,259
 or does it change it?

1316
01:27:28,259 --> 01:27:30,259
 Yeah, it's...

1317
01:27:30,259 --> 01:27:31,979
 Yeah, like, basically,

1318
01:27:32,219 --> 01:27:34,679
 what kind of EPBS design is this?

1319
01:27:34,779 --> 01:27:36,579
 Yeah, so the slides are referring

1320
01:27:36,579 --> 01:27:39,099
 to block auction EPBS,

1321
01:27:39,319 --> 01:27:42,859
 like the most basic kind of original EPBS,

1322
01:27:43,420 --> 01:27:46,659
 but it doesn't really matter.

1323
01:27:46,979 --> 01:27:48,279
 Like, slot auction,

1324
01:27:48,659 --> 01:27:50,279
 it seems like it simplifies things,

1325
01:27:51,079 --> 01:27:53,599
 like, particularly if you know it in advance,

1326
01:27:53,600 --> 01:27:55,880
 like this auction has happened in advance.

1327
01:27:55,880 --> 01:27:59,380
 And so the builder really, you can tell in advance

1328
01:27:59,380 --> 01:28:01,160
 who the builder is supposed to be.

1329
01:28:01,160 --> 01:28:04,000
 But as far as I'm aware it doesn't actually

1330
01:28:04,000 --> 01:28:05,640
 it turns out to simplify things that much

1331
01:28:05,640 --> 01:28:08,579
 and you pretty much run into the same problems.

1332
01:28:08,579 --> 01:28:11,220
 But again, this is something where

1333
01:28:11,220 --> 01:28:14,640
 there could definitely be more work.

1334
01:28:14,640 --> 01:28:16,460
 I don't know it's something that I've thought a lot

1335
01:28:16,460 --> 01:28:18,420
 about it various times in the past

1336
01:28:18,420 --> 01:28:20,300
 but I've never actually even like, you know

1337
01:28:20,300 --> 01:28:22,240
 gotten around to really writing something

1338
01:28:22,239 --> 01:28:27,439
 formal about it, it's just a lot of things to do. So that's something that someone could

1339
01:28:28,880 --> 01:28:36,719
 surely work on and write a nice blog post. There's a lot of space for clarifying some of these ideas,

1340
01:28:36,719 --> 01:28:42,159
 but as far as I'm aware, they're both running into the same issues.

1341
01:28:42,159 --> 01:28:57,119
 Okay, thanks so much. Okay, yeah, off-topic question, what is it like being a researcher?

1342
01:28:57,119 --> 01:29:03,920
 What was it like for you to get to this role? You do a lot of research, a lot of amazing stuff,

1343
01:29:04,639 --> 01:29:07,119
 so maybe if you can just share a little bit about your journey,

1344
01:29:07,119 --> 01:29:10,159
 how did you end up working on the cutting edge of the consensus?

1345
01:29:10,159 --> 01:29:25,659
 it was pretty, I don't know, it's not something that I really expected, I just got in touch

1346
01:29:25,659 --> 01:29:31,599
 with Justin at some point, because I was just really interested in Ethereum and wanted to

1347
01:29:31,599 --> 01:29:37,619
 see what it looks like to do research on these things, I guess it's maybe some European people

1348
01:29:37,619 --> 01:29:42,739
 are listening that you have the same thoughts now um and uh at the time there was a lot of

1349
01:29:43,300 --> 01:29:50,260
 um interesting mv but also not a lot of like you know formal work done on it like there might not

1350
01:29:50,260 --> 01:29:57,539
 even have been like really i mean there was like a kind of seminal paper uh on it uh but and then

1351
01:29:57,539 --> 01:30:02,099
 like some blog posts but not that much more so it seemed like oh you know this is an area where like

1352
01:30:02,100 --> 01:30:07,940
 clearly there's lack of work and it really just was a matter of someone just thinking about these

1353
01:30:07,940 --> 01:30:14,420
 things. You didn't need who knows what background, you're just dedicating time to it. So I worked on

1354
01:30:14,420 --> 01:30:22,740
 that for a little bit. There was a lot of interesting problems. Then in the course of

1355
01:30:22,740 --> 01:30:29,140
 working on that it turned out it interacted a lot with consensus things and also a lot of this stuff

1356
01:30:29,140 --> 01:30:31,420
 that I showed you at the beginning around Santa Rheorgs

1357
01:30:31,420 --> 01:30:34,680
 and whatever, it's a colleague of mine, Caspar,

1358
01:30:34,680 --> 01:30:36,700
 and Barnaby, which I guess you guys should know

1359
01:30:36,700 --> 01:30:39,820
 from the presentation, or just generally,

1360
01:30:39,820 --> 01:30:41,680
 they were working on it, because a lot of these issues

1361
01:30:41,680 --> 01:30:43,680
 were very relevant at the time.

1362
01:30:43,680 --> 01:30:45,119
 All these Rheorg things were real,

1363
01:30:45,119 --> 01:30:47,680
 they could happen in the protocol.

1364
01:30:47,680 --> 01:30:50,680
 And so I kind of got involved with that as well.

1365
01:30:50,680 --> 01:30:53,480
 I started combining the two things,

1366
01:30:53,480 --> 01:30:57,619
 and yeah, basically summed this stuff around,

1367
01:30:57,619 --> 01:31:01,699
 like committee enforceable properties it shows up in member like that's some of

1368
01:31:01,699 --> 01:31:07,300
 the things I was working on like early and I kind of just realized that all you

1369
01:31:07,300 --> 01:31:09,380
 know this portrait stuff is really a mess

1370
01:31:09,380 --> 01:31:14,840
 there's like clearly a need for people to spend again time on it there is like

1371
01:31:14,840 --> 01:31:19,059
 kind of lack of resources and yeah so it just seemed like well let's jump in into

1372
01:31:19,059 --> 01:31:23,720
 this thing where work is like really needed so I guess yeah it's been like a

1373
01:31:23,720 --> 01:31:27,039
 lot of time to my principal just try to figure out it like I'm not always trying

1374
01:31:27,039 --> 01:31:33,100
 to do something that I have who knows what kind of background for, because a lot of times

1375
01:31:33,100 --> 01:31:34,899
 it's not really that necessary.

1376
01:31:34,899 --> 01:31:42,420
 You just have to dig deep into something and read up as much as you can on it and figure

1377
01:31:42,420 --> 01:31:44,439
 out where the problems are.

1378
01:31:44,439 --> 01:31:49,460
 And it's not rocket science.

1379
01:31:49,460 --> 01:31:54,220
 You sit down and write this stupid diagram that I showed you and eventually figure out

1380
01:31:54,220 --> 01:31:55,220
 something.

1381
01:31:55,220 --> 01:32:06,880
 So it turns out that, yeah, a lot of times just looking at where is the need for problem solving is more important than maybe looking at what's my background.

1382
01:32:06,980 --> 01:32:08,920
 Or at least that's kind of how it's been for me.

1383
01:32:10,180 --> 01:32:12,320
 But, yeah, of course it can depend.

1384
01:32:12,380 --> 01:32:25,039
 I'm not saying just go fishing for random problems, but just, yeah, I think take into account where the need for problems to be solved is, as opposed to where there's already like 10 people that are trying to do something.

1385
01:32:25,039 --> 01:32:28,699
 And in Ethereum, we don't have so many people doing research.

1386
01:32:28,699 --> 01:32:32,199
 So there's a lot of these areas where someone just showing up

1387
01:32:32,199 --> 01:32:34,699
 and writing a hackmd might be, well,

1388
01:32:34,699 --> 01:32:36,380
 it turns out that in two months, you've

1389
01:32:36,380 --> 01:32:37,640
 become the expert on this thing.

1390
01:32:40,000 --> 01:32:41,000
 JAVIER ARCHUELOVICH- Awesome.

1391
01:32:41,000 --> 01:32:42,199
 Thank you so much, Francesco.

1392
01:32:42,199 --> 01:32:46,260
 I think it's a great motivation for people to end a call with.

1393
01:32:46,260 --> 01:32:48,579
 And yeah, we are right to the 90 minutes,

1394
01:32:48,579 --> 01:32:50,800
 so we should get it up here.

1395
01:32:50,800 --> 01:32:52,920
 Again, thank you very much.

1396
01:32:52,920 --> 01:32:53,519
 Appreciate it.

1397
01:32:53,520 --> 01:33:00,720
 get a lot of content to digest to go through to report on the wiki um we yeah we keep up with this

1398
01:33:01,440 --> 01:33:07,920
 epf wiki and uh if anyone wants to document all the ssf and all the uh all the new info about the

1399
01:33:07,920 --> 01:33:13,120
 consensus we learned today there it would be really great i think it's a lot of work to write

1400
01:33:13,120 --> 01:33:21,840
 about um yeah and uh yeah before we before we finish um i want to invite you folks on uh monday

1401
01:33:21,840 --> 01:33:27,680
 we will have around at the same time we will have the wrap-up call after so this this with this call

1402
01:33:27,680 --> 01:33:32,880
 we are finishing the study group um it's uh officially over but we'll have another more

1403
01:33:32,880 --> 01:33:38,880
 informal chat on monday around the same time so you all um are listening to this are invited

1404
01:33:38,880 --> 01:33:43,360
 and yeah uh sorry for keeping you up long francesco thank you so much again it was really

1405
01:33:43,360 --> 01:33:50,960
 great and yeah uh please do uh join the discord uh if there is uh uh um if there's anything people

1406
01:33:50,960 --> 01:33:55,119
 will bother you with some questions if you didn't like it.

1407
01:33:55,119 --> 01:33:55,619
 Sure.

1408
01:33:55,619 --> 01:33:56,500
 Thank you very much.

1409
01:33:56,500 --> 01:33:58,000
 Again, thanks for inviting me.

1410
01:33:58,000 --> 01:34:01,899
 Sorry if I spoke fast, but it was wanting

1411
01:34:01,899 --> 01:34:04,720
 to cover a lot of things, even if it might mean that people

1412
01:34:04,720 --> 01:34:07,079
 need to rewatch it, some of it.

1413
01:34:07,079 --> 01:34:08,119
 Yeah, yeah, yeah.

1414
01:34:08,119 --> 01:34:09,880
 There's a lot of things that I'm interested in people

1415
01:34:09,880 --> 01:34:12,399
 working on, potentially.

1416
01:34:12,399 --> 01:34:13,460
 Yeah, I think it's great.

1417
01:34:13,460 --> 01:34:15,600
 This is what I was hoping to have in the study group.

1418
01:34:15,600 --> 01:34:18,899
 But seeing your presentation with over 110 slides

1419
01:34:18,899 --> 01:34:24,739
 you showed it i was thinking how can he how can he manage to fit in all of this but you did so

1420
01:34:24,739 --> 01:34:28,979
 yeah a lot of them were just transitions to be fair but yeah yeah that's right that's right but

1421
01:34:28,979 --> 01:34:35,699
 still like uh i i also tend to speak it fast and i really respect this approach so yeah uh thank

1422
01:34:35,699 --> 01:34:41,619
 you so much again man uh have a great day yeah you too bye everyone bye everyone

1423
01:34:48,899 --> 01:34:49,519
 you

