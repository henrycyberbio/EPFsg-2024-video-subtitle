1
00:00:30,000 --> 00:00:50,260
谢谢。

2
00:01:00,000 --> 00:01:29,980
谢谢。

3
00:01:30,000 --> 00:01:59,000
¶¶

4
00:02:00,000 --> 00:02:06,680
好的，欢迎回到以太坊协议研究小组。

5
00:02:07,280 --> 00:02:13,919
这是第六周，这是分布式轨道的开始。

6
00:02:14,539 --> 00:02:20,680
因此，今天我们将与Xiaowei和Sam一起开始开发轨道

7
00:02:21,159 --> 00:02:27,379
从共识层和执行层的规格的创建者和主人。

8
00:02:27,379 --> 00:02:32,280
是的，我认为我们可能会首先开始使用Xiaowei。

9
00:02:32,280 --> 00:02:35,719
马里奥，也许您想给木夫快速介绍吗？

10
00:02:35,719 --> 00:02:37,780
是的，肯定。

11
00:02:37,780 --> 00:02:47,519
是的，再次，在我们计划的第二阶段中，在我们第六周的第六周欢迎所有人。

12
00:02:47,519 --> 00:02:53,639
我们将在周三关于研究领域的另一个谈话，但今天的星期一，我们有

13
00:02:53,639 --> 00:02:59,799
我认为以太坊开发人员需要成为的开发轨道和非常重要的话题

14
00:02:59,799 --> 00:03:05,399
熟悉和uh这些是规格，因此共识和执行层规范

15
00:03:05,959 --> 00:03:11,000
嗯，我们很幸运地在Python中基本上拥有这些规格的创建者

16
00:03:11,000 --> 00:03:16,759
今天在这里xiaowei和sam and um，一首重要的便条开始就是

17
00:03:16,759 --> 00:03:21,399
两个不同的项目，例如他们分开演变，共识层

18
00:03:21,400 --> 00:03:29,480
这是规格较早的规格，或者python版本是uh，因为xiaowei是什么

19
00:03:29,480 --> 00:03:35,640
如果我想像2017年，我认为我纠正了我的研究团队，我认为我纠正了我

20
00:03:36,200 --> 00:03:45,800
嗯，基本上创建了信标链本身的设计，然后它推出了uh

21
00:03:45,800 --> 00:03:51,480
在合并之前和一切之前，她已经和我们在一起已经呆了很多年了，是的

22
00:03:51,480 --> 00:03:58,120
很荣幸能在这里有您的荣幸，我们将了解规格的技术方面

23
00:03:58,120 --> 00:04:06,120
相信我们应该这样做，所以我们的电话比往常早一点，因为她在

24
00:04:06,120 --> 00:04:11,240
东亚和我相信她也希望有一些新的同事或一些新的同事

25
00:04:11,240 --> 00:04:17,480
以太坊开发人员来自亚洲

26
00:04:17,480 --> 00:04:22,600
嗯，受到启发是的，是的，xiaowei是你的舞台是你

27
00:04:27,160 --> 00:04:32,519
谢谢Mario的目前介绍，让我现在分享我的屏幕

28
00:04:32,519 --> 00:04:41,079
几乎这几乎是它几乎是它的几乎是

29
00:04:41,079 --> 00:04:42,919
几乎这几乎是它几乎是它的几乎是

30
00:04:45,159 --> 00:04:51,319
几乎这几乎是它几乎是它的几乎是

31
00:04:51,319 --> 00:04:54,759
几乎这几乎是它几乎是它的几乎是

32
00:04:54,759 --> 00:04:57,159
几乎这几乎是它几乎是它的几乎是

33
00:04:57,159 --> 00:05:00,519
几乎这几乎是它几乎是它的几乎是

34
00:05:00,519 --> 00:05:02,439
几乎这几乎是它几乎是它的几乎是

35
00:05:02,519 --> 00:05:13,019
因此，它是完全开源的，它是最以太坊的核心项目。

36
00:05:13,019 --> 00:05:18,399
我们现在有100多个贡献者。

37
00:05:18,399 --> 00:05:25,740
我认为其中大多数是真正需要并使用此空间的核心开发人员。

38
00:05:25,740 --> 00:05:30,220
许可证完全是CC0开源Python项目。

39
00:05:30,220 --> 00:05:39,960
因此，您可以，如果您在GitHub类别上看到它，那就是一个Python项目。

40
00:05:39,960 --> 00:05:40,960
是的。

41
00:05:40,960 --> 00:05:52,340
好的，因此您可以使用此链接来查看它是什么，外观。

42
00:05:52,339 --> 00:05:57,339
因此，对于Python规范，CL规格，

43
00:05:57,379 --> 00:06:00,500
它在这里有三个目的。

44
00:06:01,299 --> 00:06:03,539
因此，首先，最多的是

45
00:06:03,539 --> 00:06:06,560
最重要的是是中心

46
00:06:06,560 --> 00:06:11,339
以太坊核心共识应用程序的

47
00:06:11,339 --> 00:06:16,339
这意味着它在文件中定义了协议。

48
00:06:16,339 --> 00:06:31,299
最有趣的部分是它可以执行和可验证，可以填充到python中

49
00:06:31,299 --> 00:06:40,539
程序然后可以执行我们将在稍后详细讨论，第三，也是

50
00:06:40,540 --> 00:06:49,100
有趣的是，它也是Crkinds测试其实现的测试向量生成器。

51
00:06:50,939 --> 00:07:01,820
好的，因此，每当我们想添加新功能，例如当前的新补丁

52
00:07:01,819 --> 00:07:06,819
主要净协议，我们将打开，

53
00:07:07,099 --> 00:07:12,099
在空间中创建一个新功能标记文件。

54
00:07:12,319 --> 00:07:17,319
我们将将其写入Markdown文件。

55
00:07:18,459 --> 00:07:23,420
例如，最后一部分是

56
00:07:23,420 --> 00:07:24,639
然后应用半工作。

57
00:07:24,639 --> 00:07:27,459
因此，我们将包括，例如

58
00:07:27,459 --> 00:07:31,740
像EIP 6110，然后有一个文件

59
00:07:31,819 --> 00:07:43,339
一个称为IP6110的文件夹，其中一些文件正确，第二个文件，第二个文件，我们将发布新的文件

60
00:07:43,339 --> 00:07:51,180
带有测试向量的Pi Spec UH西装，因此可以使用PI高生成测试向量

61
00:07:51,180 --> 00:07:55,120
高规格的程序测试用例，用于验证的客户案例。

62
00:08:02,519 --> 00:08:05,340
所有这些都是重要而独特的组成部分

63
00:08:05,340 --> 00:08:09,319
当前的CLRMD过程。

64
00:08:09,319 --> 00:08:12,480
它可以帮助我们找到基本框

65
00:08:12,480 --> 00:08:14,259
在客户实施之前，

66
00:08:14,259 --> 00:08:17,139
因为在编写规范的阶段，

67
00:08:17,139 --> 00:08:19,019
我们可以测试。

68
00:08:19,019 --> 00:08:22,519
我的意思是，客户计划将是

69
00:08:22,519 --> 00:08:25,379
他们还可以使用它来验证它。

70
00:08:25,379 --> 00:08:29,099
因此，这对于生态系统是非常有用的工具。

71
00:08:33,240 --> 00:08:38,039
所以，我认为人们会想知道

72
00:08:38,039 --> 00:08:39,659
为什么我们使用Python。

73
00:08:39,659 --> 00:08:44,659
所以，我认为这是因为Python

74
00:08:44,659 --> 00:08:53,959
因为Python是开发人员最可读的语言之一。

75
00:08:53,959 --> 00:09:00,740
因为大多数伪代码看起来都像Python。

76
00:09:00,740 --> 00:09:09,480
我们还尝试以最简单的方式编写规格代码，而不是使用一些幻想，

77
00:09:09,480 --> 00:09:13,899
有效的Python魔术。

78
00:09:13,899 --> 00:09:23,620
首先，我们确实关心可读性和简化。

79
00:09:23,620 --> 00:09:38,460
因此，如果您想阅读它以了解其中一个功能以及如何浏览它，

80
00:09:38,460 --> 00:09:47,879
因此，如果您的笔记本电脑上的存储库URL，则可以看一看

81
00:09:47,879 --> 00:09:58,340
规格文件夹，例如，有主要网叉

82
00:09:58,340 --> 00:10:02,500
Altaire，Beatrix，Capella和Dennett。

83
00:10:02,500 --> 00:10:05,860
那是已经发生的一半

84
00:10:05,860 --> 00:10:08,080
并在主网上发射。

85
00:10:08,080 --> 00:10:13,080
在功能文件夹中，

86
00:10:13,920 --> 00:10:17,639
您可以看到其中的一些正在进行的研究项目。

87
00:10:20,120 --> 00:10:21,560
例如，

88
00:10:21,560 --> 00:10:24,780
如果要读取零基本空间，

89
00:10:24,779 --> 00:10:29,779
您可以看到其中有不同的标记文件。

90
00:10:30,399 --> 00:10:35,399
和信标链痕迹

91
00:10:35,839 --> 00:10:40,839
是信标链共识的进入。

92
00:10:40,879 --> 00:10:43,240
因此，我建议您要阅读，

93
00:10:43,240 --> 00:10:45,079
它从这个文件开始。

94
00:10:45,079 --> 00:10:50,079
CL还有其他不同的组件。

95
00:10:50,379 --> 00:10:52,980
例如，像民间选择一样

96
00:10:52,980 --> 00:10:56,420
我们在此文件中定义了民间选择逻辑。

97
00:10:56,420 --> 00:11:01,420
关于网络，它在P2P接口中

98
00:11:01,539 --> 00:11:02,420
标记文件。

99
00:11:03,620 --> 00:11:04,440
是的。

100
00:11:06,940 --> 00:11:09,399
以及未来的不同人

101
00:11:10,320 --> 00:11:14,840
它可能是更多不同的组件

102
00:11:14,840 --> 00:11:16,940
我们将来会添加。

103
00:11:16,940 --> 00:11:30,720
好的，因此，如果您开始阅读它，则可以从类型和值定义开始。

104
00:11:30,720 --> 00:11:39,260
我们定义了，您可以看到我们定义了常数和一些配置，值

105
00:11:39,259 --> 00:11:42,559
在这样的降价表中。

106
00:11:42,559 --> 00:11:44,799
所以，这是什么？

107
00:11:44,799 --> 00:11:49,799
此基本自定义类型的名称

108
00:11:50,879 --> 00:11:54,399
和什么是SSE等效的

109
00:11:54,399 --> 00:11:56,279
也喜欢一些描述。

110
00:11:56,279 --> 00:11:58,899
除此之外，您可以在

111
00:11:58,899 --> 00:12:01,039
我们有预设和配置。

112
00:12:01,039 --> 00:12:06,039
它们基本上就像我们设置的配置一样

113
00:12:06,039 --> 00:12:13,079
我们设置了，但我们将以不同的方式管理它们，以便在此标记中定义值

114
00:12:13,079 --> 00:12:25,000
表UM，然后您也可以看到我们在此Markdown文件中定义了XYZ容器

115
00:12:25,959 --> 00:12:34,599
例如，有一个灯塔黑色的身体和灯塔块，而Beacon Black会使用

116
00:12:34,600 --> 00:12:37,100
它可以变成黑色身体。

117
00:12:37,100 --> 00:12:42,100
在，我可以在最后一个领域看到它是身体。

118
00:12:43,680 --> 00:12:48,680
是的，所以课程是SSE容器。

119
00:12:50,480 --> 00:12:55,159
它也是序列化模式

120
00:12:55,159 --> 00:12:56,840
对于共识对象。

121
00:12:58,080 --> 00:13:01,800
是的，因此，如果您想了解更多有关SSE的信息，

122
00:13:01,799 --> 00:13:06,799
您还可以在同一存储库中找到文档。

123
00:13:07,019 --> 00:13:07,859
是的，在这里。

124
00:13:12,199 --> 00:13:13,139
好的。

125
00:13:15,279 --> 00:13:20,259
因此它可以在代码块中写入Python函数

126
00:13:20,259 --> 00:13:22,059
描述共识规则。

127
00:13:23,519 --> 00:13:26,439
可以看到这是条目的示例

128
00:13:26,439 --> 00:13:28,579
状态过渡功能。

129
00:13:28,579 --> 00:13:31,639
我们，有一些断言

130
00:13:31,799 --> 00:13:40,439
例如，像ostert验证块签名一样，是这样需要的

131
00:13:40,439 --> 00:13:48,439
要在共识规则中满足，所以如果不满足此条件，

132
00:13:48,439 --> 00:13:57,240
它将存储UM例外OH，这意味着给定输入被视为无效输入

133
00:13:57,240 --> 00:14:08,799
因此，您可以使用此断言来查看共识验证是什么。

134
00:14:08,799 --> 00:14:22,060
您还有其他一些宝贵的资源，可以学习设计和更深入的理由。

135
00:14:22,059 --> 00:14:30,619
我想我会推荐两个资源。一个是Vitalik的注释尖峰，另一个是

136
00:14:30,619 --> 00:14:36,279
一本是本·埃格顿（Ben Edgerton）升级的以太坊书籍。

137
00:14:36,279 --> 00:14:51,479
好的，正如我所描述的

138
00:14:51,480 --> 00:14:53,759
里面有一些魔术，

139
00:14:53,759 --> 00:14:58,100
这是一个模式，我称其为“规格精灵”，

140
00:14:58,100 --> 00:15:02,060
基本上，我们在做某事，

141
00:15:02,060 --> 00:15:04,420
在它之下，它需要，

142
00:15:05,340 --> 00:15:08,039
要将其传递给Markdown文件，

143
00:15:08,039 --> 00:15:11,519
传递降价文件并转换

144
00:15:11,519 --> 00:15:15,019
将markdown文件内容变成python程序。

145
00:15:16,120 --> 00:15:20,159
所以这是构建规范，

146
00:15:21,480 --> 00:15:26,480
它将做一些读者确实不知道的事情。

147
00:15:37,320 --> 00:15:42,320
因此，例如，零相信标链

148
00:15:42,320 --> 00:16:01,000
面部零将传递给规格构建器，它将变成零面。

149
00:16:01,000 --> 00:16:04,659
然后，对于下一个硬叉，称为Altair。

150
00:16:06,139 --> 00:16:11,139
实际上，这就像以前的坚硬叉子一样。

151
00:16:12,039 --> 00:16:15,919
因此Altair硬叉将使用

152
00:16:15,919 --> 00:16:19,799
以前的硬叉第一零内容

153
00:16:19,799 --> 00:16:24,679
然后在其中添加一些额外的修改。

154
00:16:24,679 --> 00:16:27,659
因此，它结合了两个文件

155
00:16:27,659 --> 00:16:31,819
并将其转换为一个单一的Altair信标链钉。

156
00:16:33,679 --> 00:16:37,559
是的，贝拉特里克斯和其他以下尖峰

157
00:16:37,559 --> 00:16:39,659
正在做同样的事情。

158
00:16:42,419 --> 00:16:45,759
是的，所以，最后，我们想介绍

159
00:16:45,759 --> 00:16:50,759
如何使用PYSPEC，我的意思是这是一个合适的程序。

160
00:16:52,259 --> 00:16:57,259
因此，您可以从源代码安装它，

161
00:16:57,659 --> 00:17:10,039
代码并运行此制作文件命令以安装所需的测试包和

162
00:17:10,039 --> 00:17:13,940
构建Pyspec。

163
00:17:13,940 --> 00:17:23,619
因此，您可以尝试编写您的第一个PYSPEC程序，这是一个Hello World示例，您可以

164
00:17:23,619 --> 00:17:28,619
它称为基本叉的基本尖峰。

165
00:17:29,359 --> 00:17:33,099
因为在此示例中是贝拉特里克斯叉。

166
00:17:33,099 --> 00:17:37,299
然后您可以导入组件，

167
00:17:37,299 --> 00:17:40,319
这个尖峰的容器。

168
00:17:40,319 --> 00:17:43,500
例如，这是Beacon Black Body

169
00:17:43,500 --> 00:17:46,579
还有一个名为涂鸦的领域。

170
00:17:46,579 --> 00:17:51,579
因此，这是一些涂鸦，例如随机字符串。

171
00:17:51,579 --> 00:18:01,299
块本身是一个SSE对象，您可以将其打印到屏幕上，并且

172
00:18:01,299 --> 00:18:08,980
看到它使弦hello世界进入街区。

173
00:18:08,980 --> 00:18:19,419
而且，如果您想尝试一些更有趣的东西，也可以编写第一个PYSPEC测试。

174
00:18:19,420 --> 00:18:23,460
这就是一个测试用例的样子。

175
00:18:23,460 --> 00:18:25,980
因此，这基本上是馅饼测试。

176
00:18:27,440 --> 00:18:28,279
测试。

177
00:18:29,460 --> 00:18:33,120
如果您写了饼测试，

178
00:18:33,120 --> 00:18:35,759
然后很简单。

179
00:18:37,720 --> 00:18:42,640
我们在这里做的是准备块。

180
00:18:42,640 --> 00:18:46,019
因此，这次，我们为下一步建造一个空块。

181
00:18:46,019 --> 00:18:57,359
因此，该测试案例的两个输入，一个是尖峰，另一个是创世纪状态。

182
00:18:57,359 --> 00:19:10,660
在写一些测试后，您还可以验证帖子状态是否正确

183
00:19:10,660 --> 00:19:11,660
估计它。

184
00:19:11,660 --> 00:19:14,740
因此，您可以在此处写断言。

185
00:19:16,019 --> 00:19:28,900
在上一个和上一个中，我谈到了如何去，这也是我的意思是

186
00:19:28,900 --> 00:19:38,900
ISEK也是测试生成器，因此实际上我们可以重复使用PI测试案例来生成PI

187
00:19:38,900 --> 00:19:53,700
测试向量和神奇的部分是我们向UM大喊某些数据，因此

188
00:19:53,700 --> 00:20:04,500
我在这里写下您的预状态，它将输出一个名为pre the xz的文件，它将是一个编码

189
00:20:04,500 --> 00:20:09,500
它将在其中编码信标状态数据。

190
00:20:15,380 --> 00:20:20,380
因此，在这种情况下，我们将产生一个预状态

191
00:20:22,960 --> 00:20:27,599
以及后期，然后是一系列块

192
00:20:27,599 --> 00:20:32,259
我们将投入到状态过渡功能中。

193
00:20:32,259 --> 00:20:35,500
因此，您知道，客户可以通过所有这些

194
00:20:35,500 --> 00:20:36,879
然后他们可以验证它，

195
00:20:36,879 --> 00:20:40,740
如果他们的状态过渡功能正确。

196
00:20:42,200 --> 00:20:46,099
是的，哦，对，这样。

197
00:20:46,099 --> 00:20:51,099
这是测试向量存储库。

198
00:20:51,420 --> 00:20:56,119
因此，这是这里的示例，这是输出。

199
00:20:58,819 --> 00:21:00,539
是的，如果您有兴趣，

200
00:21:00,539 --> 00:21:08,700
可以找到更多有关如何运行PYSPEC的详细信息，测试格式是什么样的

201
00:21:12,139 --> 00:21:19,579
哦，如果您有兴趣帮助CL研发

202
00:21:19,579 --> 00:21:29,019
我认为PYSPEC是一个很好的开始学习的很好的开始，然后您可以去做贡献

203
00:21:30,539 --> 00:21:37,259
因此，我认为您可以参与不同的级别。

204
00:21:38,220 --> 00:21:53,279
因此，首先，您可以环顾四周，然后只需使用错字修复即可开始，或者您可以做任何您可以做的事情。

205
00:21:53,279 --> 00:21:58,720
嗯，第二个是您可能可以帮助重构代码库

206
00:22:00,000 --> 00:22:06,480
然后，第三级是您可能可以尝试破解一些新时代的测试用例

207
00:22:06,480 --> 00:22:12,559
我们还没有覆盖，我的意思是真的很有帮助

208
00:22:13,759 --> 00:22:20,319
第四是如果您在销售日找到盒子，您可能可以提交赏金

209
00:22:20,319 --> 00:22:27,279
这是对的，谢谢你，这是

210
00:22:28,879 --> 00:22:36,299
这是我介绍我说谢谢，

211
00:22:39,119 --> 00:22:46,279
马里奥是的，谢谢你真棒，谢谢你，非常感谢你的方式是的

212
00:22:46,279 --> 00:22:52,279
真是太棒了，非常感谢它很棒的介绍很多信息

213
00:22:52,279 --> 00:22:56,920
嗯，人们仍在关心处理它，也许会有一些问题

214
00:22:58,119 --> 00:23:04,200
嗯，是的，这是一个很棒的嗯

215
00:23:09,399 --> 00:23:15,960
是的，我想问你是否可以问你是否可以告诉我们一些有关uh的信息

216
00:23:15,960 --> 00:23:20,120
共识规格与执行方进行交互？

217
00:23:20,120 --> 00:23:23,720
例如，这是关于您提到的状态过渡功能的问题。

218
00:23:24,660 --> 00:23:27,299
就像，我想

219
00:23:27,299 --> 00:23:32,420
共识层更新工作选择的执行。

220
00:23:32,420 --> 00:23:36,059
但是，您能否详细介绍那里的说明，

221
00:23:36,059 --> 00:23:40,600
国家过渡是如何在CL上发生的，并映射到EL？

222
00:23:42,660 --> 00:23:45,519
是的，好，让我

223
00:23:45,519 --> 00:23:48,019
好的，我们必须共享另一个屏幕。

224
00:24:02,680 --> 00:24:10,160
好的，这是CL规格索引。

225
00:24:10,160 --> 00:24:15,119
因此，让我们看看规格本身。

226
00:24:15,519 --> 00:24:28,519
因此，这是信标连锁店的状态过渡。

227
00:24:28,519 --> 00:24:38,799
因此，信标连锁店将会在这里有预状态和狙击信标块，然后

228
00:24:38,799 --> 00:24:46,240
我们在这里没有UM输出

229
00:24:47,599 --> 00:24:48,399
国家过渡

230
00:24:51,119 --> 00:25:03,359
因此，在UM之后，我们处理插槽和块以及结果状态，然后将对象进行更新以及有关

231
00:25:03,359 --> 00:25:11,279
它与民间选择之间的关系，您可以看一下民间选择Markdown

232
00:25:11,279 --> 00:25:26,799
文件。所以这很有趣。因此，它是定义的，就像什么是正确的行为

233
00:25:26,799 --> 00:25:35,919
客户在收到新的块或新证明时应做，例如

234
00:25:36,960 --> 00:25:45,440
在收到块的时间，他们将称此实现为

235
00:25:45,440 --> 00:25:52,960
客户有不同的信息，我的意思是提供更有效的执行

236
00:25:52,960 --> 00:25:57,960
但是Pyspec就像，我们只想清楚地定义规则。

237
00:25:58,640 --> 00:26:02,900
我认为我们称其为国家过渡是的，

238
00:26:02,900 --> 00:26:04,920
内部功能。

239
00:26:05,860 --> 00:26:09,000
因此，在他们收到现场块时，

240
00:26:09,000 --> 00:26:14,000
他们将对民间选择进行一些验证。

241
00:26:14,559 --> 00:26:17,340
如果可以的话，

242
00:26:17,340 --> 00:26:20,380
然后，它将在这里调用国家过渡。

243
00:26:22,960 --> 00:26:30,519
是的，然后以后更新此类的本地数据库。

244
00:26:30,519 --> 00:26:33,360
是的，我想。

245
00:26:33,360 --> 00:26:35,680
是的，我回答了您的问题吗？

246
00:26:40,779 --> 00:26:43,100
是的，我相信这很棒。

247
00:26:43,100 --> 00:26:44,200
是的，非常感谢。

248
00:26:44,200 --> 00:26:48,120
感谢您通过实际的存储库

249
00:26:48,120 --> 00:26:51,200
并向我们​​展示日期。

250
00:26:51,200 --> 00:26:54,039
是的，这真的很棒。

251
00:26:54,039 --> 00:26:55,799
是的，我们还有五分钟。

252
00:26:55,799 --> 00:26:59,759
让我们看看是否还有其他问题。

253
00:27:05,240 --> 00:27:07,559
测试重组问题呢？

254
00:27:07,559 --> 00:27:10,360
我想你的意思是链条？

255
00:27:15,759 --> 00:27:20,620
是的，是否对链条进行了某种测试，

256
00:27:20,619 --> 00:27:25,619
共识规格如何处理组织。

257
00:27:27,659 --> 00:27:32,659
是的，因此在Casper FFG实施中，

258
00:27:33,979 --> 00:27:38,979
因此，实际上Prokchoice是Casper FFG

259
00:27:38,980 --> 00:27:50,319
很深。

260
00:27:50,319 --> 00:28:02,519
我们可以回去看商店。

261
00:28:02,519 --> 00:28:11,480
因此，我们在此处定义了一个抽象数据类。

262
00:28:11,480 --> 00:28:15,119
这些是我们想要的领域

263
00:28:15,119 --> 00:28:21,119
描述哪些领域

264
00:28:21,119 --> 00:28:27,680
可用于处理reorg和状态过渡。

265
00:28:27,680 --> 00:28:32,440
因此，您可以看到我们存储了合理的检查点

266
00:28:32,440 --> 00:28:36,420
在本地视图中，客户的当前视图

267
00:28:36,420 --> 00:28:38,900
和最终检查点。

268
00:28:38,900 --> 00:28:41,500
还有一些，我认为会

269
00:28:41,500 --> 00:28:44,000
其中一些，也许太详细了，

270
00:28:44,000 --> 00:28:47,820
那是未实现的

271
00:28:49,840 --> 00:28:54,500
合理的检查点，未实现的，最终确定的检查点。

272
00:28:54,500 --> 00:28:57,759
因此，以及街区和国家。

273
00:28:57,759 --> 00:29:01,980
因此，块是，它实际上是一个字典。

274
00:29:01,980 --> 00:29:05,900
因此，我们将根，黑根作为标识符。

275
00:29:05,900 --> 00:29:10,339
因此，国家共享

276
00:29:10,339 --> 00:29:13,980
根是黑根，

277
00:29:13,980 --> 00:29:18,980
然后内容是给定黑根的状态。

278
00:29:19,579 --> 00:29:23,579
因此，您可以看到，我们有这样的领域。

279
00:29:25,480 --> 00:29:28,680
然后当我们处理时

280
00:29:28,680 --> 00:29:30,720
我们处理reorg的地方，

281
00:29:31,980 --> 00:29:50,980
很容易，很容易

282
00:29:50,980 --> 00:29:54,220
好吧，嗯

283
00:29:54,220 --> 00:30:20,299
因此，此助手将更新检查点，其中包括合理的检查点和

284
00:30:20,299 --> 00:30:32,139
最终的技巧点，因此您可以在本文档中看到uh uh搜索此功能

285
00:30:32,139 --> 00:30:39,899
您可以看到我们更新在哪里更新检查点的位置，因此基本上是当前的

286
00:30:39,900 --> 00:30:45,980
基本的UM钉

287
00:30:48,540 --> 00:30:56,620
状态我们将使用UM我们将使用合理的UM检查点状态作为基本稳定状态

288
00:30:56,620 --> 00:30:59,019
但是还有

289
00:31:01,259 --> 00:31:03,740
国家这样将通过

290
00:31:03,740 --> 00:31:15,079
一系列LND幽灵书选择焦虑的影响。

291
00:31:15,079 --> 00:31:24,160
然后，在某些情况下，我们所有人都可能有。

292
00:31:24,160 --> 00:31:28,900
因此，这是这里的一种情况。

293
00:31:28,900 --> 00:31:33,160
因此，基本上，您可以关注编码。

294
00:31:33,160 --> 00:31:42,040
您可以看到我们如何描述本书选择文档中的整个LND鬼。

295
00:31:44,360 --> 00:31:53,480
是的，如果您有一些更详细的问题，可以在Discord或其他地方问我。

296
00:31:54,759 --> 00:32:02,840
谢谢，马里奥。是的，谢谢你，小韦。是的，太棒了，很高兴看到您如何

297
00:32:02,839 --> 00:32:09,079
东方并解释不同的部分是它真的很棒

298
00:32:09,079 --> 00:32:14,599
呃，也许我们从山姆这里遇到的最后一个问题是什么是最大的

299
00:32:14,599 --> 00:32:19,959
挑战您在开发CDL规格时面对UH的挑战您发现最具挑战性的是什么

300
00:32:22,759 --> 00:32:32,039
嗯，你好，好问题，我认为最具挑战性的嗯

301
00:32:32,839 --> 00:32:41,679
因此，性能，我认为这将是所有Python项目的共同挑战。

302
00:32:41,679 --> 00:32:49,220
对我自己的第二件事，也许不是菲利斯（Phyllis），正如我说的那样，我们有

303
00:32:49,220 --> 00:32:57,699
将Markdown文件转换为Python程序。

304
00:32:57,700 --> 00:33:02,700
但是对于规格作者来说，您有两种选择。

305
00:33:03,900 --> 00:33:08,680
一个是您可以直接更新Markdown文件。

306
00:33:08,680 --> 00:33:10,580
然后每次您想验证它，

307
00:33:10,580 --> 00:33:14,860
您必须将其构建到Python程序中。

308
00:33:14,860 --> 00:33:17,580
然后第二个是你可以写

309
00:33:17,580 --> 00:33:20,360
它在Python计划中

310
00:33:20,360 --> 00:33:23,460
但是最终您将不得不写回去

311
00:33:23,460 --> 00:33:25,019
到Markdown文件。

312
00:33:25,019 --> 00:33:33,579
因此，如果您必须进行此转换，我确实觉得有点累。

313
00:33:33,579 --> 00:33:37,619
但这是我现在的话。

314
00:33:37,619 --> 00:33:38,980
是的。

315
00:33:38,980 --> 00:33:44,900
是的，我希望我也回答了这个问题。

316
00:33:44,900 --> 00:33:46,259
是的，当然。

317
00:33:46,259 --> 00:33:48,240
是的，非常感谢，Haowei。

318
00:33:48,240 --> 00:33:49,660
是的，感觉很棒。

319
00:33:49,660 --> 00:33:50,800
我们正好半个小时。

320
00:33:51,940 --> 00:33:52,900
是的，

321
00:33:53,240 --> 00:33:56,200
真的很感激。

322
00:33:56,820 --> 00:33:58,420
我们有不和谐。

323
00:33:58,759 --> 00:33:59,820
我会分享你的链接

324
00:33:59,820 --> 00:34:01,320
所以也许还有一些额外的问题

325
00:34:01,320 --> 00:34:02,279
您可以在那里回答。

326
00:34:02,420 --> 00:34:03,960
但这真的很棒。

327
00:34:04,620 --> 00:34:07,019
我希望可能有一些贡献者

328
00:34:07,019 --> 00:34:08,559
到Clspec或某人

329
00:34:08,559 --> 00:34:10,599
谁从你那里学到了高音。

330
00:34:11,200 --> 00:34:12,659
是的，我真的很感激。

331
00:34:12,880 --> 00:34:13,860
太感谢了。

332
00:34:14,019 --> 00:34:15,420
特别感谢你

333
00:34:15,420 --> 00:34:17,980
今晚为我们熬夜

334
00:34:17,980 --> 00:34:19,440
也许太早了。

335
00:34:19,659 --> 00:34:22,159
我现在不确定，但是，是的，非常感谢，雪莱。

336
00:34:22,159 --> 00:34:23,159
非常感谢。

337
00:34:23,159 --> 00:34:24,460
真的很棒。

338
00:34:24,460 --> 00:34:27,420
谢谢，马里奥。

339
00:34:27,420 --> 00:34:29,079
是的，谢谢乔什。

340
00:34:29,079 --> 00:34:32,039
让我们看看，山姆。

341
00:34:32,039 --> 00:34:33,879
期待山姆的演讲。

342
00:34:33,879 --> 00:34:34,879
谢谢。

343
00:34:34,879 --> 00:34:35,379
是的。

344
00:34:35,379 --> 00:34:35,879
再见。

345
00:34:35,879 --> 00:34:36,679
山姆，马里奥，你和我们在一起吗？

346
00:34:36,679 --> 00:34:39,420
非常感谢，雪莱。

347
00:34:39,420 --> 00:34:41,679
再次非常感谢。

348
00:34:41,679 --> 00:34:43,920
是的，山姆，如果你和我们在一起，

349
00:34:43,920 --> 00:34:45,039
请加入我们的舞台。

350
00:34:45,039 --> 00:34:46,099
你能听到我们的声音吗？

351
00:34:46,099 --> 00:34:47,539
我可以。

352
00:34:47,539 --> 00:34:48,299
很棒，很棒。

353
00:34:48,299 --> 00:34:48,799
是的。

354
00:34:48,800 --> 00:34:53,420
因此，现在我们将在这里与Sam一起转到执行方面。

355
00:34:53,420 --> 00:35:00,140
我们正在执行第二，因为它们也很年轻，这些规格，

356
00:35:00,140 --> 00:35:03,760
因为山姆一直在为过去三年或更长时间以来的工作。

357
00:35:03,760 --> 00:35:05,960
如果我错了，请纠正我。

358
00:35:05,960 --> 00:35:07,600
是的，对此。

359
00:35:07,600 --> 00:35:15,580
是的，山姆与他的团队以及其他所有人一起发展ELS，高管

360
00:35:15,579 --> 00:35:23,179
执行层规格uh uh类似于您刚刚看到的Pi规格

361
00:35:23,179 --> 00:35:29,340
实际上，您可能从以太坊周围的不同地方认识他，他也非常活跃的EIP编辑器

362
00:35:29,340 --> 00:35:37,739
UH帮助通过UH OSMIUM软件维护整个EIP回波，并运行UM UH

363
00:35:37,739 --> 00:35:45,899
所有钱包都可以帮助您标准化和开发生态系统周围的以太坊钱包。

364
00:35:45,899 --> 00:35:52,699
山姆，把你带到这里真是太好了。是的，我们渴望听到执行

365
00:35:52,699 --> 00:35:57,579
规格，这是一组漂亮的东西。好吧，让我们看看我的屏幕共享在这里是否有效。

366
00:35:57,579 --> 00:36:11,900
我想分享这个。

367
00:36:11,900 --> 00:36:12,460
好的。

368
00:36:13,219 --> 00:36:14,659
让我们做这个。

369
00:36:16,619 --> 00:36:17,139
那里。

370
00:36:17,779 --> 00:36:18,420
每个人都可以看到吗？

371
00:36:19,599 --> 00:36:20,079
是的，很棒。

372
00:36:20,460 --> 00:36:20,699
前进。

373
00:36:20,759 --> 00:36:21,000
完美的。

374
00:36:21,699 --> 00:36:22,000
好的。

375
00:36:22,019 --> 00:36:27,059
因此，我在这里谈论以太坊的执行层规范，或者简而言之。

376
00:36:27,579 --> 00:36:32,239
我想通过一个非常快速的摘要开始演讲。

377
00:36:32,239 --> 00:36:36,480
因此，如果您只想观看此演示文稿的30秒，那么这些是30秒

378
00:36:36,480 --> 00:36:39,319
你真的想看。

379
00:36:39,319 --> 00:36:42,980
因此，我们从黄纸开始。

380
00:36:42,980 --> 00:36:44,980
它写得像学术论文。

381
00:36:44,980 --> 00:36:48,519
它使用非常密集的数学符号。

382
00:36:48,519 --> 00:36:52,739
那里有很多非英语角色。

383
00:36:52,739 --> 00:37:01,019
以及我们要去的地方以及现在的位置是以太坊执行层的完全可执行的Python实现。

384
00:37:02,699 --> 00:37:06,159
您知道，这里的这些图片只是突出显示我们能做什么。

385
00:37:06,699 --> 00:37:14,919
因此，在这里的左侧，您可以看到前叉和后叉之间的差异。

386
00:37:14,979 --> 00:37:18,739
您可以看到那里的所有差异，并在右边看到类似的东西。

387
00:37:19,459 --> 00:37:21,099
这就是规格的样子。

388
00:37:21,099 --> 00:37:21,919
这就是我们建立的。

389
00:37:22,739 --> 00:37:29,459
这是一个常规的Python程序。总结就是这样，关于我的一点。我是山姆·威尔逊，

390
00:37:30,259 --> 00:37:35,539
我是EIP编辑，我从事大量项目，您可以在Github或Mastodon上找到我。

391
00:37:37,219 --> 00:37:42,099
那么什么是以太坊执行层规范？好吧，这是Python的参考

392
00:37:42,099 --> 00:37:46,259
实施大多数以太坊客户端。我们确实忽略了一些非常重要的部分，

393
00:37:46,260 --> 00:37:53,380
我们不进行网络。我们不做叉子的选择。我们不这样做。但是除此之外，我们很漂亮

394
00:37:53,380 --> 00:37:59,700
大量构建了整个执行层。我团队的其他成员是大师和彼得。

395
00:38:01,060 --> 00:38:05,060
如果您对规格有任何疑问，您想做出贡献，可以联系

396
00:38:05,060 --> 00:38:09,940
我自己或这两个好人中的任何一个，我们很乐意为您提供帮助。

397
00:38:09,940 --> 00:38:16,820
它。就像共识层规格一样，我们到处都有贡献者

398
00:38:16,820 --> 00:38:23,000
全世界。如果人们喜欢收集这些应用，甚至还有一个PO应用程序。所以，是的。

399
00:38:23,000 --> 00:38:28,619
非常感谢所有这些人。是的。现在有一点历史。所以

400
00:38:28,619 --> 00:38:36,059
黄纸是在2014年创建的。这是更加限制的许可证。这是归因

401
00:38:36,059 --> 00:38:42,119
类似于股份，这意味着如果您使用它，则必须在同一许可证下释放您的东西，

402
00:38:42,940 --> 00:38:46,320
这对于规格来说很不错，但对于代码来说有点烦人。

403
00:38:48,659 --> 00:38:51,920
在这里，我将为您提供非常非常快速的黄纸之旅。

404
00:38:52,940 --> 00:38:56,599
这里重要的是我不喜欢黄纸，所以我会有点

405
00:38:56,599 --> 00:39:01,960
在我的巡回演出中有点偏见。因此，对于任何黄纸的欣赏者，我要道歉。

406
00:39:01,960 --> 00:39:14,139
但是让我们开始。因此，黄纸主要是英文文字。它给出了很多背景，这是为什么事物是这样的理由。

407
00:39:16,920 --> 00:39:26,699
这里还与非常技术性的学术符号相互混合。因此，此片段在这里描述了一个区块链。

408
00:39:26,699 --> 00:39:44,739
因此，一级方程式在这里说的是，在时间时期的状态与国家相等，对不起，将状态过渡功能应用于时间和一组交易。

409
00:39:45,699 --> 00:39:49,399
然后，对任何熟悉区块链的人来说，这听起来都可能很熟悉。

410
00:39:49,579 --> 00:39:51,379
这就是他们在黄纸上写的方式。

411
00:39:51,380 --> 00:39:59,519
我们在这里也有一个关于什么是工作证明的定义，您可以查看所有这些工作的工作原理。

412
00:40:00,680 --> 00:40:07,160
我们还进入了叉子选择规则的内容，您可以描述客户如何选择遵循哪个叉子。

413
00:40:08,780 --> 00:40:11,200
在这里，我们对国家有一个定义。

414
00:40:11,340 --> 00:40:21,119
因此，这可能是我最喜欢的黄纸示例之一，既做出了令人难以置信的好工作，又是描述状态的糟糕工作。

415
00:40:21,380 --> 00:40:23,920
因此，这些英语描述，它们很棒。

416
00:40:24,119 --> 00:40:25,420
他们告诉你州的什么。

417
00:40:25,500 --> 00:40:30,880
如果您使用EVM，您将获得NONCE，平衡，存储，根，代码，哈希，所有您将熟悉的事物。

418
00:40:32,140 --> 00:40:41,700
但是在右侧，我们有这些令人难以置信的密集符号，可以解释TRI的编码方式，这是第八位。

419
00:40:42,320 --> 00:40:49,280
您将拥有合同的内部状态，其钥匙值对映射在此处编码。

420
00:40:49,280 --> 00:40:55,500
我不知道那是什么意思。我已经实现了Python版本，但我仍然不明白这些功能的含义。

421
00:40:55,680 --> 00:40:59,220
这就是为什么尝试更换黄纸的灵感的原因。

422
00:41:02,280 --> 00:41:05,280
同样，这是交易外观的一个示例。

423
00:41:05,340 --> 00:41:08,980
因此，我们在这里有我们的英语定义，它们相当可理解。

424
00:41:09,460 --> 00:41:12,740
然后，您在这里有一个可爱的斑点。

425
00:41:12,739 --> 00:41:21,899
如此交易是TNTP TG TG TTTV P TW和TS的元组，如果有人能记住什么

426
00:41:21,899 --> 00:41:30,479
这些变量中的任何一个意味着你们应该获得奖品，我再也不会吧，街区很棒

427
00:41:30,479 --> 00:41:35,739
如果您正在实施客户

428
00:41:35,739 --> 00:41:42,039
嗯，然后您拥有其余的黄纸气，整个虚拟机RLP的工作原理

429
00:41:42,039 --> 00:41:45,279
所有这些都在黄纸中定义。

430
00:41:45,279 --> 00:41:48,179
这是一个非常密集的文件。

431
00:41:48,179 --> 00:41:48,679
是的。

432
00:41:48,679 --> 00:41:51,340
现在所有这些公式都是

433
00:41:51,340 --> 00:41:53,380
以前幻灯片的示例，

434
00:41:53,380 --> 00:41:56,259
而且我已经忘记了它们的意思，

435
00:41:56,259 --> 00:41:58,920
这是最大的问题。

436
00:41:58,920 --> 00:42:01,199
我认为黄纸是

437
00:42:01,199 --> 00:42:03,800
这些符号，虽然它们非常

438
00:42:03,800 --> 00:42:07,420
简洁，很难理解。

439
00:42:07,420 --> 00:42:09,920
那么，为什么，就像谁是黄纸靶向？

440
00:42:09,920 --> 00:42:13,159
它不是针对开发人员，我认为这是最大的问题。

441
00:42:14,000 --> 00:42:16,900
程序员是最需要理解它的人，实际上正在写作的人

442
00:42:16,900 --> 00:42:24,180
客户。然后使用黄纸的其他人是EIP作者。所以，如果你是

443
00:42:24,180 --> 00:42:28,760
试图提出对以太坊的更改，您需要以某种方式描述这种变化。

444
00:42:30,559 --> 00:42:36,519
这些文档都没有使用黄纸中的符号。任何核心EIP的一半是

445
00:42:36,519 --> 00:42:41,960
正在定义一种描述变化的语言。通常是Python。所以，我们想给予

446
00:42:41,960 --> 00:42:48,440
为此更正式的符号。黄纸是英语的，因此无法测试。没有办法

447
00:42:48,440 --> 00:42:53,320
编写测试以确保客户端符合规范。没有办法

448
00:42:53,320 --> 00:43:00,759
使用黄纸填充测试。但是公平地说，你知道，我不想只是抹布

449
00:43:00,760 --> 00:43:01,940
在黄纸上一直在黄纸上。

450
00:43:02,780 --> 00:43:03,740
这很简洁。

451
00:43:04,420 --> 00:43:06,300
所以只有几页

452
00:43:06,300 --> 00:43:08,620
而且做得很好

453
00:43:08,620 --> 00:43:10,240
正式描述以太坊

454
00:43:10,240 --> 00:43:12,100
如果您理解这种符号。

455
00:43:12,620 --> 00:43:14,180
我认为最重要的好处

456
00:43:14,180 --> 00:43:15,300
就我而言

457
00:43:15,300 --> 00:43:16,260
是黄纸

458
00:43:16,260 --> 00:43:17,300
是算法独立的。

459
00:43:17,920 --> 00:43:20,040
它没有指定事物的工作方式，

460
00:43:20,140 --> 00:43:23,080
只有它可观察到的行为。

461
00:43:23,180 --> 00:43:24,180
我认为那真的是

462
00:43:24,180 --> 00:43:25,740
被低估的利益

463
00:43:25,740 --> 00:43:26,420
黄纸

464
00:43:26,420 --> 00:43:28,080
还有我们没有的东西

465
00:43:28,080 --> 00:43:28,540
与Els。

466
00:43:28,539 --> 00:43:37,099
在这一点上，鳗鱼是由Consensys的被子团队于2021年创建的。

467
00:43:37,099 --> 00:43:42,860
维护企业已移至以太坊基金会的鳗鱼团队。

468
00:43:42,860 --> 00:43:44,820
我们受到更宽松的许可。

469
00:43:44,820 --> 00:43:46,840
我们基本上是公共领域。

470
00:43:46,840 --> 00:43:52,320
所以，你知道，为什么我们为什么开始制作鳗鱼？

471
00:43:52,320 --> 00:43:55,360
我们想摆脱试图理解黄纸的挫败感。

472
00:43:55,360 --> 00:43:57,099
我已经读了十几次。

473
00:43:57,099 --> 00:43:58,539
我仍然很难理解它。

474
00:43:59,779 --> 00:44:05,659
而且我不是专家开发人员，所以我认为我是大多数从事以太坊的人的合理代表。

475
00:44:06,719 --> 00:44:09,880
当前的以太坊状态也没有快照。

476
00:44:10,239 --> 00:44:14,099
因此，如果您曾经阅读过黄纸，您会注意到它落在一两个叉子后面。

477
00:44:14,779 --> 00:44:18,299
现在，如果我没记错的话，它才被更新到巴黎。

478
00:44:18,739 --> 00:44:23,639
因此，您必须拿起巴黎黄纸，找到从那以后出现的所有EIP

479
00:44:23,639 --> 00:44:27,199
这就是您找出以太坊的当前状态的方式。

480
00:44:28,639 --> 00:44:31,900
这有点困难，我们想要更新的东西

481
00:44:31,900 --> 00:44:35,859
并提供了现在以太坊的快照。

482
00:44:36,639 --> 00:44:38,599
我们希望程序员更容易访问它。

483
00:44:40,579 --> 00:44:44,279
我想这有点像第一目标。

484
00:44:44,279 --> 00:44:45,420
Python非常可读。

485
00:44:46,059 --> 00:44:48,239
共识层规格已经用Python编写。

486
00:44:49,099 --> 00:44:51,679
因此，我们也想为我们做到这一点。

487
00:44:51,679 --> 00:44:57,599
然后，我们知道这样做的动机是能够填写自动测试。

488
00:44:58,659 --> 00:45:02,099
因此，格斯（Geth）是很长一段时间以来一直是参考客户端。

489
00:45:02,779 --> 00:45:11,319
而且我们想拥有一个更简单的客户，它并不包含真实客户的复杂性。

490
00:45:11,559 --> 00:45:13,399
这就是我们想在这里做的事情。

491
00:45:14,500 --> 00:45:18,679
所以现在是时候让您参观鳗鱼了。

492
00:45:18,679 --> 00:45:24,579
因此，我将为您提供粗略的榜样，或者与我给黄纸的那一张相等的榜样。

493
00:45:24,919 --> 00:45:27,500
我要显示的第一件事是我们的目录结构。

494
00:45:28,579 --> 00:45:30,599
因此，我们有一个文件夹。

495
00:45:30,859 --> 00:45:35,239
我们有很多实用程序，例如整数类型和Ethash的实现。

496
00:45:35,500 --> 00:45:38,399
但最重要的是，我们为每个叉子都有一个文件夹。

497
00:45:39,759 --> 00:45:44,319
这些文件夹中的每一个都包含以太坊规范的完整副本。

498
00:45:44,320 --> 00:45:53,380
例如，如果您要采取的措施并删除其他所有内容，那么您将有工作的硬叉实施。

499
00:45:54,039 --> 00:46:03,000
这是我们客户之间的最大差异之一，可以说是Geth或Nethermind，就是Paras独自一人。

500
00:46:03,360 --> 00:46:06,820
您可以阅读Paras文件夹，并了解什么是Paras。

501
00:46:06,820 --> 00:46:13,920
因此，这就像区块链实现的外观

502
00:46:13,920 --> 00:46:17,140
到Elo纸。

503
00:46:17,140 --> 00:46:23,360
我们有定期的类，可以定义我们需要的每个数据结构，然后我们有

504
00:46:23,360 --> 00:46:27,240
定义行为的常规python函数。

505
00:46:27,240 --> 00:46:32,539
因此，您可以看到，与xiaowei关于共识层规格的演示非常相似，

506
00:46:32,539 --> 00:46:38,239
我们有我们的断言显示了我们检查的内容，以确保国家过渡是

507
00:46:38,239 --> 00:46:40,699
成功。

508
00:46:40,699 --> 00:46:46,119
我们拥有Python功能，可以实现我们需要的算法的小部分。

509
00:46:46,119 --> 00:46:50,500
然后在194年，这实际上是在建造区块链。

510
00:46:50,500 --> 00:46:55,239
因此，我们非常努力地保持非常简单的python，非常容易理解。

511
00:46:55,239 --> 00:47:02,300
因此，这里类似地验证了特定块的工作证明。

512
00:47:02,300 --> 00:47:05,720
这不是分叉的选择，而是我们拥有的。

513
00:47:06,620 --> 00:47:10,240
我们没有，我们希望只收到正确的块

514
00:47:10,240 --> 00:47:12,700
因为我们不处理重复。

515
00:47:12,700 --> 00:47:15,360
这将是我们数据库中的全部额外复杂性

516
00:47:15,360 --> 00:47:16,080
我们不碰。

517
00:47:17,260 --> 00:47:19,480
但是我们确实有一个国家实施。

518
00:47:21,420 --> 00:47:24,019
因此，您期望以太坊的所有事物

519
00:47:24,019 --> 00:47:25,180
为了做到，我们可以做到。

520
00:47:26,240 --> 00:47:28,500
这些都是我们交易的代表。

521
00:47:28,500 --> 00:47:34,460
我们尝试为我们所有班级及其所有价值观都有有意义的名字。

522
00:47:35,780 --> 00:47:36,380
是的。

523
00:47:37,559 --> 00:47:39,539
这是一个仅出于完整的缘故。

524
00:47:40,000 --> 00:47:41,699
看起来像是普通的Python课程。

525
00:47:43,340 --> 00:47:44,920
因此，鳗鱼的缺点。

526
00:47:45,659 --> 00:47:47,719
显然，这需要Python知识。

527
00:47:48,639 --> 00:47:49,619
它用python写。

528
00:47:49,800 --> 00:47:52,119
如果您想贡献，则必须使用Python。

529
00:47:53,360 --> 00:47:54,820
而黄纸则是。

530
00:47:55,539 --> 00:47:56,480
是英语。

531
00:47:56,480 --> 00:47:59,300
因此，您可以写文字并让人们了解您。

532
00:48:00,519 --> 00:48:02,860
我们确实需要特定的算法选择。

533
00:48:03,880 --> 00:48:07,980
因此，当黄纸可以说，就像，我们希望X和Y发生时，

534
00:48:08,240 --> 00:48:12,400
我们必须实际编写x和y是什么的特定实现。

535
00:48:13,360 --> 00:48:16,260
这可能会泄漏到下游实现。

536
00:48:16,460 --> 00:48:18,260
这是我们必须非常小心的事情。

537
00:48:18,719 --> 00:48:19,860
这也是更多的详细信息。

538
00:48:20,199 --> 00:48:26,240
与黄纸中的文本相比，我们的代码很容易多。

539
00:48:26,480 --> 00:48:33,179
熟悉黄纸的人来说，它不太容易进入。另一方面，

540
00:48:33,179 --> 00:48:37,380
ELL的好处是识别这些东西非常容易。这些签名和

541
00:48:37,380 --> 00:48:44,179
对于任何可以阅读Python的人来说，班级定义都是非常可理解的。你知道

542
00:48:44,179 --> 00:48:49,659
这里的第一个是状态过渡函数。没有元组，下标

543
00:48:49,659 --> 00:48:52,960
这都是可以理解的。

544
00:48:52,960 --> 00:48:56,819
可以理解的程序员，这很重要。

545
00:48:56,819 --> 00:49:00,279
我们已经匹配了人们在EIP中所做的事情。

546
00:49:00,279 --> 00:49:02,659
您可以使用实际的Python。

547
00:49:02,659 --> 00:49:05,899
我们也更加维护。

548
00:49:05,899 --> 00:49:07,539
我们三个人全职工作。

549
00:49:07,539 --> 00:49:13,579
好吧，我们两个人全职工作，我大部分时间都在工作。

550
00:49:13,579 --> 00:49:16,199
任何人都很容易做出贡献。

551
00:49:16,199 --> 00:49:20,019
我们几乎一直都在进来并提出开车请求。

552
00:49:20,619 --> 00:49:22,759
我们一直实施到坎昆。

553
00:49:23,359 --> 00:49:27,279
所以这是我真的很兴奋的事情。

554
00:49:27,539 --> 00:49:29,480
如果我说的太快，我必须道歉。

555
00:49:30,159 --> 00:49:32,039
但是我们可以同步链。

556
00:49:32,419 --> 00:49:39,019
因此，您可以服用鳗鱼，可以将其放在非常非常强大的计算机上，并最终将同步主网。

557
00:49:39,739 --> 00:49:42,419
这就是我认为我们非常自豪的事情。

558
00:49:42,420 --> 00:49:46,079
它还通过以太坊测试套件。

559
00:49:46,079 --> 00:49:52,280
因此，每个正常执行客户端都通过的测试，我们也通过这些测试。

560
00:49:52,280 --> 00:49:53,280
我们可以做相反的事情。

561
00:49:53,280 --> 00:49:58,340
因此，您可以写作，您可以在其他地方原型原型，并使用其他来生成测试

562
00:49:58,340 --> 00:50:01,659
对于其他客户。

563
00:50:01,659 --> 00:50:05,820
我认为我们已经去过的其他一些很酷的事情会很有趣

564
00:50:05,820 --> 00:50:07,240
继续工作。

565
00:50:07,240 --> 00:50:09,139
因此，差异。

566
00:50:09,139 --> 00:50:10,700
这是我的孩子。

567
00:50:10,699 --> 00:50:15,980
已经为此工作了一段时间。因为每个硬叉都是完整的实现

568
00:50:15,980 --> 00:50:20,219
以太坊协议很难说出要看发生了什么变化之间的区别。

569
00:50:21,099 --> 00:50:27,659
因此，这是DAO叉的一个例子。我们已经写了自定义文档工具

570
00:50:27,659 --> 00:50:31,980
生成这些差异，您可以在我们的网站上看到它们，该网站将在最后链接。

571
00:50:34,379 --> 00:50:38,139
还有什么？我们还参加模糊。因此，这是一个最近的功能。

572
00:50:38,139 --> 00:50:40,799
我认为截至上周，我们得到了。

573
00:50:41,579 --> 00:50:45,500
因此，所有当前的执行客户都参与模糊

574
00:50:45,500 --> 00:50:49,339
组装随机输入并向客户端扔的地方

575
00:50:49,339 --> 00:50:50,279
看看会发生什么。

576
00:50:51,139 --> 00:50:52,839
我们现在参与其中。

577
00:50:53,339 --> 00:50:57,139
是的，我认为这很整洁。

578
00:50:57,299 --> 00:50:59,440
它已经在我们的实施中找到了一些错误

579
00:50:59,440 --> 00:51:01,259
以及其他客户中的一些错误。

580
00:51:01,819 --> 00:51:06,659
是的，这就是这里的正式演讲。

581
00:51:06,659 --> 00:51:15,759
因此，我将在这一点上停下来，提出一些问题，然后，如果还有时间结束时，如果人们有兴趣，我可以做一些演示，以向EL添加一些东西。

582
00:51:22,019 --> 00:51:26,539
惊人的。非常感谢，山姆。是的，太好了。我很感激。非常感谢。

583
00:51:27,239 --> 00:51:32,039
伙计们，如果您有任何疑问，请立即提出询问。这是最好的时光。

584
00:51:32,039 --> 00:51:37,079
同时，我想说的是，我对您同步链条感到非常惊讶。

585
00:51:37,159 --> 00:51:38,079
我不知道。

586
00:51:38,179 --> 00:51:38,920
太酷了。

587
00:51:39,900 --> 00:51:41,380
多久时间？

588
00:51:42,619 --> 00:51:45,199
因此，我们不会定期运行它。

589
00:51:46,000 --> 00:51:48,940
因此，我认为我们上次同步是两个或三个月前

590
00:51:49,059 --> 00:51:51,820
这花了两个星期左右。

591
00:51:53,800 --> 00:51:54,539
非常慢。

592
00:51:56,079 --> 00:51:56,960
是啊是啊。

593
00:51:58,000 --> 00:52:00,079
一旦到达最近的块，

594
00:52:00,239 --> 00:52:01,900
就像一个街区每12秒出来一次，

595
00:52:01,900 --> 00:52:03,700
我们每10秒完成一次街区。

596
00:52:04,019 --> 00:52:07,280
是的，很难赶上

597
00:52:07,420 --> 00:52:08,380
但是我们可以同步链。

598
00:52:09,660 --> 00:52:10,500
太神奇了。

599
00:52:10,740 --> 00:52:14,880
我的意思是，我没想到Python会，

600
00:52:14,960 --> 00:52:16,440
Python客户将能够同步

601
00:52:16,440 --> 00:52:19,260
像后来的现代以太坊一样。

602
00:52:19,519 --> 00:52:21,860
我记得三位一体试图在几年前尝试这样做。

603
00:52:22,000 --> 00:52:23,760
我认为他们从来没有设法同步。

604
00:52:25,079 --> 00:52:27,200
是的，所以这里有一些警告。

605
00:52:27,199 --> 00:52:35,659
我们有一台具有非常强大的处理器的128 GIG RAM计算机。这不是一件容易的事。我不会

606
00:52:35,659 --> 00:52:44,759
推荐任何人这样做，但这是可能的。很棒，很棒。是的，这里一个问题。

607
00:52:45,219 --> 00:52:51,460
您提到ELS与Cancun是最新的，但是在回购中，我们只是看到上海。

608
00:52:51,460 --> 00:52:54,699
那么我们在哪里可以找到规格帖子？

609
00:52:54,699 --> 00:53:02,280
是的，所以有一个叉子，一个分支叉斜线cancun。

610
00:53:02,280 --> 00:53:03,679
我们只是还没有将其合并为主人。

611
00:53:03,679 --> 00:53:08,860
您想照顾一些重构的事情，但这一切都在那里。

612
00:53:08,860 --> 00:53:11,340
好吧，很酷。

613
00:53:11,340 --> 00:53:15,000
所以这是分支。

614
00:53:15,000 --> 00:53:22,280
是的，而且您也提到了，所以有些东西忽略了，缺少

615
00:53:22,280 --> 00:53:28,440
从执行字段（例如点对点或叉子选择）中。你可以提到你可以的地方吗

616
00:53:28,440 --> 00:53:33,800
找到这些规格？我想它们也是执行API规格吗？

617
00:53:35,079 --> 00:53:40,920
是的，就像您说的那样，API在执行API中。有网络

618
00:53:40,920 --> 00:53:45,720
规格。我没有它链接糖果，但它也在以太坊存储库下。

619
00:53:47,320 --> 00:53:52,360
对于叉子的选择，我们将添加英文文本描述其工作原理。

620
00:53:56,599 --> 00:54:02,599
它增加了很多复杂性，能够进行回滚并在叉之间切换，

621
00:54:02,599 --> 00:54:07,240
这不是我们真正可以合理地处理的事情。是的。

622
00:54:10,920 --> 00:54:22,260
太感谢了。还有其他问题，伙计们吗？

623
00:54:22,260 --> 00:54:27,480
实际上，我忘了提到一些东西。因此，共识层规格采用了该方法

624
00:54:27,480 --> 00:54:33,599
从Markdown开始并渲染Python，我们采取了完全相反的方法。所以

625
00:54:33,599 --> 00:54:35,880
从Python开始，然后将其呈现为HTML。

626
00:54:36,719 --> 00:54:40,380
因此，这是一种非常相反的方法。

627
00:54:40,480 --> 00:54:43,819
我们有第一件事，他们有一个降价优先。

628
00:54:44,099 --> 00:54:45,779
而且，你知道，我俩都遇到了

629
00:54:45,839 --> 00:54:47,480
最后的文件。

630
00:54:47,679 --> 00:54:49,279
这只是一个有趣的事实。

631
00:54:55,039 --> 00:54:56,079
好吧，很棒，很棒。

632
00:54:56,159 --> 00:54:57,719
是的，这是一个有趣的比较。

633
00:55:00,679 --> 00:55:01,000
好的。

634
00:55:01,000 --> 00:55:12,199
我会重复您问的问题，

635
00:55:12,340 --> 00:55:14,000
最具挑战性的是什么

636
00:55:14,000 --> 00:55:15,539
你发现吗？我的意思是，你提到

637
00:55:15,539 --> 00:55:18,320
制作黄纸等问题。

638
00:55:18,500 --> 00:55:19,360
你发现了什么

639
00:55:19,360 --> 00:55:20,920
最大的挑战？

640
00:55:23,239 --> 00:55:23,840
所以，

641
00:55:24,059 --> 00:55:25,820
有点类似的问题。

642
00:55:26,500 --> 00:55:27,360
写以太坊，

643
00:55:27,920 --> 00:55:29,780
实际的python，

644
00:55:29,780 --> 00:55:35,060
不是这个项目中最难的部分，是所有相关的工具能够渲染

645
00:55:35,060 --> 00:55:39,860
我们必须建立一个全新的渲染系统，这是一个全新的文档工具

646
00:55:39,860 --> 00:55:45,700
嗯，那是最困难的部分，它只是使人们可以呈现给人们

647
00:55:50,180 --> 00:55:56,340
是的，这也已经有一段时间了，就像您启动之前，规格在那里，但是

648
00:55:56,340 --> 00:56:01,620
它被正式宣布为发布的版本，花了一段时间

649
00:56:01,620 --> 00:56:03,620
因为它不起作用。

650
00:56:03,620 --> 00:56:05,620
是的。

651
00:56:09,539 --> 00:56:11,539
好吧，嗯...

652
00:56:18,579 --> 00:56:20,579
让我们...

653
00:56:20,579 --> 00:56:33,639
是的，我认为我们可以总结。我们稍后可以回答一些问题。

654
00:56:33,639 --> 00:56:39,179
而且我们几乎是一个小时，是的，如果您有其他任何您想详细说明的

655
00:56:39,179 --> 00:56:46,079
在上面，向我们展示，也共享屏幕，并向我们展示一些回购或更多动手

656
00:56:46,079 --> 00:56:50,599
编码示例，否则将非常感谢。

657
00:56:50,599 --> 00:56:51,779
是的，绝对可以做到这一点。

658
00:56:51,779 --> 00:56:56,319
因此，只需在这里找到正确的窗口即可。

659
00:56:56,319 --> 00:56:57,420
我们去。

660
00:56:57,420 --> 00:56:59,179
我们去。

661
00:56:59,179 --> 00:57:04,079
所以这是一个未经训练的现场演示

662
00:57:04,079 --> 00:57:06,779
将OpCode添加到EALS中。

663
00:57:06,779 --> 00:57:09,360
因此，我们将首先

664
00:57:09,360 --> 00:57:11,619
让我将其移到这里。

665
00:57:11,619 --> 00:57:18,779
这样您就可以得到EL。

666
00:57:18,779 --> 00:57:25,940
因此，我们从头开始。

667
00:57:25,940 --> 00:57:32,079
我们正在克隆ELS存储库，我们将继续进行。

668
00:57:32,079 --> 00:57:36,779
因此，现在我们拥有执行规范存储库，我们必须设置虚拟环境，

669
00:57:36,779 --> 00:57:39,779
这是第二步。

670
00:57:39,780 --> 00:57:45,620
因此，如果您不熟悉Python，虚拟环境就像本地软件包存储库

671
00:57:45,620 --> 00:57:48,340
因此，您不会弄乱系统python。

672
00:57:48,340 --> 00:57:51,540
因此，让我们打开它。

673
00:57:51,540 --> 00:57:52,540
我们去。

674
00:57:52,540 --> 00:57:59,180
因此，现在我们处于虚拟环境中，您可以看到我们的python也是沙盒

675
00:57:59,180 --> 00:58:03,340
在虚拟环境中。

676
00:58:03,340 --> 00:58:05,780
因此，让我们添加一个操作码。

677
00:58:05,780 --> 00:58:12,680
我最喜欢的添加是增量，从堆栈中弹出一个数字，然后推高一个

678
00:58:12,680 --> 00:58:15,340
比该数字回到堆栈中。

679
00:58:15,340 --> 00:58:17,340
让我们这样做。

680
00:58:17,340 --> 00:58:24,260
这里的第一步是安装项目，以便我们可以对其进行编辑。

681
00:58:24,260 --> 00:58:27,540
我们将PIP用作包装管理系统。

682
00:58:27,540 --> 00:58:30,600
任何Python开发人员都应该非常熟悉。

683
00:58:30,599 --> 00:58:37,960
您不是Python开发人员，您需要知道的只是PIP安装仪表板E点。我们去。

684
00:58:38,599 --> 00:58:44,199
因此，这已经安装了我们所有的依赖关系，并设置了所有设置。我们实际上依赖

685
00:58:44,199 --> 00:58:50,519
关于执行规格，我认为这是KZG的承诺。

686
00:58:50,519 --> 00:58:59,799
是的，我们已经共享了一堆代码。因此，让我们去检查坎昆分支，

687
00:58:59,800 --> 00:59:01,400
因为那是一个有趣的开始。

688
00:59:09,640 --> 00:59:16,440
因此，这将是算术指令。因此，与EVM生活有关的一切

689
00:59:16,440 --> 00:59:26,360
VM文件夹。希望这是一个明显的选择。这就是什么，让我调整一个完美的大小。

690
00:59:29,800 --> 00:59:49,440
因此，这是添加opcode。这是实现。每个操作码分为相同的四个部分。我们进行了堆栈操作，充电气体，OpCode的实际实施，然后增加或不增加程序计数器。

691
00:59:49,440 --> 00:59:57,559
因此，让我们在此处复制添加说明并将其更改为墨水。

692
00:59:58,460 --> 01:00:05,079
因此，让我们在此处删除DOC字符串。

693
01:00:05,200 --> 01:00:05,599
我们去。

694
01:00:05,800 --> 01:00:09,720
因此，我们只会从堆栈中弹出一个项目，这将是输入号码。

695
01:00:10,000 --> 01:00:13,300
我们将充电相同数量的气体，这将是非常低的气体。

696
01:00:13,300 --> 01:00:19,580
我们将在我们从堆栈中弹出的价值添加1个，

697
01:00:19,680 --> 01:00:21,480
我们将把它推回这里的堆栈。

698
01:00:22,160 --> 01:00:24,700
这只需要一个字节来编码，

699
01:00:25,060 --> 01:00:28,460
因此，我们将在Plus 1离开程序计数器。

700
01:00:29,660 --> 01:00:34,240
现在，我们实际上必须告诉解释器有关我们的新操作码，

701
01:00:34,420 --> 01:00:35,440
所以让我们去做吧。

702
01:00:43,300 --> 01:00:46,600
那就是在初始文件夹中。

703
01:00:50,820 --> 01:01:01,940
因此，让我们将其作为数字表示。

704
01:01:02,100 --> 01:01:04,900
因此，我们必须在此处将其添加到此指令中。

705
01:01:05,720 --> 01:01:11,180
然后我们可以下降并添加它，添加实现。

706
01:01:13,300 --> 01:01:15,519
是的，这将就在这里。

707
01:01:16,180 --> 01:01:19,440
因此，我们有OPS墨水而不是OPS符号扩展。

708
01:01:20,400 --> 01:01:25,180
然后我们将拥有墨水指令。

709
01:01:25,820 --> 01:01:30,240
这就是向鳗鱼添加新的opode的完整。

710
01:01:31,180 --> 01:01:35,720
这确实是一个非常简单的Python程序。

711
01:01:36,120 --> 01:01:38,800
没有什么怪异的。

712
01:01:38,800 --> 01:01:40,460
没有绩效考虑。

713
01:01:40,460 --> 01:01:46,000
我们的Cancun Fork版本现在具有增量指令，仅此而已。

714
01:01:46,000 --> 01:01:49,019
是的，这几乎就是演示。

715
01:01:49,019 --> 01:01:53,059
如果您有任何疑问或想处理这些事情，请与我联系。

716
01:01:53,059 --> 01:01:59,199
无论您喜欢什么，我都可以在Discord，Twitter上使用。

717
01:01:59,199 --> 01:02:01,159
非常感谢您让我演示。

718
01:02:01,159 --> 01:02:02,159
惊人的。

719
01:02:02,159 --> 01:02:05,280
非常感谢Sam进行演示。

720
01:02:05,280 --> 01:02:07,100
进行演示非常重要。

721
01:02:07,100 --> 01:02:08,580
非常感谢您，Sam这样做。

722
01:02:08,580 --> 01:02:09,080
谢谢。

723
01:02:11,600 --> 01:02:13,000
是的，我感谢你是

724
01:02:13,000 --> 01:02:15,360
能够来进行现场会议

725
01:02:15,360 --> 01:02:17,880
并在EL中向我们展示代码。

726
01:02:17,880 --> 01:02:19,500
很酷。

727
01:02:19,500 --> 01:02:25,160
我想人们可以自己尝试录音。

728
01:02:28,700 --> 01:02:29,720
惊人的。

729
01:02:29,720 --> 01:02:32,519
Pooja这里有一个问题

730
01:02:32,519 --> 01:02:42,920
我想作为EIP ELS人问，在ERC分裂之前，有关于与ELS提出EIP的讨论。

731
01:02:42,920 --> 01:02:46,199
我们在不久的将来看到吗？

732
01:02:46,199 --> 01:02:52,400
这是一个空中的问题。

733
01:02:52,400 --> 01:02:57,679
因此，您可以链接到EIPS的EL。

734
01:02:57,679 --> 01:03:02,119
因此，如果您想使用文档中的EL中编写的代码，则可以。

735
01:03:02,119 --> 01:03:09,619
但是将核心EIP转移到该存储库的最初愿景已经死了。

736
01:03:09,619 --> 01:03:17,079
因此，更多地将EL视为表达您的变化的众多方法之一，而不是表达您的变化的唯一方法。

737
01:03:17,079 --> 01:03:28,420
很酷嗯

738
01:03:28,420 --> 01:03:38,840
好吧，我想我想我们可以总结一下，嗯，已经超过一个小时了，我们借了

739
01:03:38,840 --> 01:03:45,679
今天很多，嗯，是的

740
01:03:45,679 --> 01:03:52,559
你们俩都非常感谢您演示和解释UH

741
01:03:52,559 --> 01:03:59,039
规格的一面是的，是的，非常感谢您在

742
01:03:59,039 --> 01:04:05,599
像嗯一样，我们已经在这里正确地指定了它，最终它在那里

743
01:04:05,599 --> 01:04:08,360
因此，这样做真是太神奇了。

744
01:04:08,360 --> 01:04:12,279
所以非常感谢大家。

745
01:04:12,279 --> 01:04:16,940
惊人的。

746
01:04:16,940 --> 01:04:17,819
伟大的。是的。

747
01:04:17,819 --> 01:04:18,360
谢谢。

748
01:04:18,360 --> 01:04:19,559
谢谢Sam和Syawei。

749
01:04:19,559 --> 01:04:23,519
我们会见大家

750
01:04:24,199 --> 01:04:28,880
在第一次会议的几天内

751
01:04:28,880 --> 01:04:32,480
有了研究轨道，我相信这是

752
01:04:32,480 --> 01:04:35,420
从开始

753
01:04:35,420 --> 01:04:36,199
丹克拉德。

754
01:04:37,380 --> 01:04:38,059
它是

755
01:04:38,059 --> 01:04:40,780
Denkrad Inc.与Denkrad本人

756
01:04:40,780 --> 01:04:42,300
周三下午4点。

757
01:04:42,880 --> 01:04:45,019
所以我们将继续第6周

758
01:04:45,019 --> 01:04:46,440
那里的研究轨道。

759
01:04:47,019 --> 01:04:48,940
是的，伙计们，你一直是

760
01:04:48,940 --> 01:04:50,860
首先在我们的

761
01:04:50,860 --> 01:04:52,940
开发轨道，所以我们真的很感激

762
01:04:52,940 --> 01:04:54,719
赋予未来能力

763
01:04:54,719 --> 01:04:55,699
以太坊开发人员。

764
01:04:56,679 --> 01:04:58,019
还有，就像

765
01:04:58,019 --> 01:05:00,760
我相信，目前的人可以学习

766
01:05:00,760 --> 01:05:02,000
从那里的演讲，所以

767
01:05:02,000 --> 01:05:10,239
是的，这将不胜感激，这是很多，我们将在星期三见到您

768
01:05:10,239 --> 01:05:13,159
这就是我

769
01:05:13,340 --> 01:05:16,619
谢谢大家

770
01:06:02,000 --> 01:06:07,840
谢谢。

