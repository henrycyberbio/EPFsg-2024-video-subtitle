1
00:00:30,000 --> 00:00:50,939
谢谢。

2
00:01:00,000 --> 00:01:29,980
谢谢。

3
00:01:30,000 --> 00:01:40,000
¶¶

4
00:01:40,000 --> 00:01:50,000
¶¶

5
00:01:50,000 --> 00:02:19,000
¶¶

6
00:02:19,000 --> 00:02:29,000
¶¶

7
00:02:29,000 --> 00:02:39,000
¶¶

8
00:02:39,000 --> 00:03:08,979
谢谢。

9
00:03:09,000 --> 00:03:38,979
谢谢。

10
00:03:39,000 --> 00:04:08,979
谢谢。

11
00:04:09,000 --> 00:04:38,980
谢谢。

12
00:04:39,000 --> 00:05:08,980
谢谢。

13
00:05:39,000 --> 00:06:08,980
让我们祈祷。

14
00:06:09,000 --> 00:06:38,980
谢谢。

15
00:06:39,000 --> 00:06:49,000
¶¶

16
00:06:49,000 --> 00:06:59,000
¶¶

17
00:06:59,000 --> 00:07:09,000
¶¶

18
00:07:09,000 --> 00:07:38,000
¶¶

19
00:07:38,000 --> 00:07:48,000
¶¶

20
00:07:48,000 --> 00:07:58,000
¶¶

21
00:07:58,000 --> 00:08:27,980
谢谢。

22
00:08:28,000 --> 00:08:56,740
谢谢。

23
00:08:58,000 --> 00:09:13,100
好的，欢迎来到协议奖学金研究小组特别版，

24
00:09:13,100 --> 00:09:20,019
Mario的Redux版本的以太坊介绍。

25
00:09:22,440 --> 00:09:27,220
所以我想，我不知道，马里奥，您想做一点介绍吗？

26
00:09:27,220 --> 00:09:30,660
就像我们对最后一个一样，还是只是进入它？

27
00:09:32,340 --> 00:09:36,720
我认为我们可以迅速说几句话

28
00:09:36,720 --> 00:09:39,259
对于看录音的人

29
00:09:39,259 --> 00:09:42,519
然后有机会抓住第一个。

30
00:09:43,500 --> 00:09:47,360
我想只是重申我们在市政厅所说的话。

31
00:09:50,220 --> 00:09:51,980
是的，欢迎加入研究小组。

32
00:09:52,139 --> 00:09:54,460
欢迎来到协议奖学金研究小组，大家。

33
00:09:54,460 --> 00:10:03,800
在我们进行第一次演讲之前，可以说，好吧，我们很高兴能在这里有您。

34
00:10:03,900 --> 00:10:05,620
我们很高兴您想了解以太坊。

35
00:10:06,220 --> 00:10:12,960
我们根据以太坊协议奖学金的经验创建了这个程序，

36
00:10:13,060 --> 00:10:16,600
这更多是关于动手发展的。

37
00:10:16,980 --> 00:10:23,360
随着人们开始在以太坊上工作，为其实际的软件部分做出了贡献，

38
00:10:23,360 --> 00:10:28,200
而且我们看到存在很大的信息差距，巨大的教育差距。

39
00:10:28,360 --> 00:10:35,039
这是一个非常陡峭的学习曲线，即使您来自编程计算机科学背景来了解以太坊的环境。

40
00:10:35,039 --> 00:10:45,580
因此，我们创建了这个程序来弥合差距，提供一些教育材料，也可以帮助您在某个路径上浏览。

41
00:10:45,919 --> 00:10:51,600
就像我们仍然试图模仿核心开发人员的这种经历，即潜入协议的人。

42
00:10:51,600 --> 00:10:56,080
我们没有提供所有资源，因为这取决于您的感兴趣

43
00:10:56,080 --> 00:11:01,840
以及您想了解的内容，我们有一些程序的基本结构

44
00:11:02,800 --> 00:11:10,720
嗯，第一个嗯五个星期，我们将每周打个电话一次，每周一次谈话

45
00:11:10,720 --> 00:11:16,879
通过今天对协议的一般介绍，嗯，嗯，我们将介绍执行

46
00:11:16,879 --> 00:11:22,399
层，共识层，测试和安全性，最后研究和路线图概述。

47
00:11:23,120 --> 00:11:29,120
这是前五个星期，在下半场，在其他五个星期中，我们将有两个

48
00:11:29,120 --> 00:11:35,360
一周的呼叫分为开发和研究的两条曲目。所以，有

49
00:11:37,039 --> 00:11:43,440
两个不同的域，您可以选择其中一个，或者只是在它们之间切换，或者只是

50
00:11:43,440 --> 00:11:47,600
只要遵循两者。

51
00:11:47,600 --> 00:11:50,340
这些将涵盖发展方面

52
00:11:50,340 --> 00:11:53,520
更深入地了解实际客户端代码

53
00:11:53,520 --> 00:11:55,120
基础和规范。

54
00:11:55,120 --> 00:11:58,540
我们将向您展示您如何真正参与

55
00:11:58,540 --> 00:11:59,420
作为程序员。

56
00:11:59,420 --> 00:12:01,340
在研究方面，您将学习

57
00:12:01,340 --> 00:12:06,200
关于以太坊的未来，关于改进

58
00:12:06,200 --> 00:12:08,940
研究，现在开发。

59
00:12:08,940 --> 00:12:13,380
是的，这是该程序的概述。

60
00:12:13,379 --> 00:12:15,980
借助所有这些，我们提供了这些演示文稿

61
00:12:16,179 --> 00:12:17,299
我们提供某些资源。

62
00:12:17,740 --> 00:12:23,879
但是我们的目标是激励您并向您展示所有这些各个领域

63
00:12:23,879 --> 00:12:29,080
并给您一些起点，以便您实际上可以深入潜水。

64
00:12:29,960 --> 00:12:35,120
有一个Wiki，EPF.Wiki网站附带此程序，

65
00:12:35,279 --> 00:12:37,840
当您注意到此程序时，该程序是协调的。

66
00:12:37,840 --> 00:12:40,480
我们在那里发布这些电话，为您提供一些资源。

67
00:12:40,480 --> 00:12:53,879
但是，我们希望创建此Wiki作为实际资源，实际知识库，并从生态系统周围收集资源。

68
00:12:54,159 --> 00:13:00,019
因为如果您已经开始研究一些主题，则可能会注意到它确实散布在周围。

69
00:13:00,279 --> 00:13:04,860
有各种各样的黑客，研究帖子和论文等。

70
00:13:04,860 --> 00:13:12,940
这个动手的um uh协议主题，当然还有一个地方，当然还有

71
00:13:12,940 --> 00:13:19,500
还有许多其他伟大的维基人，我们不想复制我们只想有一个上下文

72
00:13:19,500 --> 00:13:24,300
并链接到所有正在学习协议需求的人的所有可用资源

73
00:13:24,300 --> 00:13:31,740
成为协议核心开发人员，所以，如果您有兴趣，可以随意做出贡献

74
00:13:31,740 --> 00:13:38,060
在我今天提到的这些主题之一中，或者我们将在未来几周内了解到这一点

75
00:13:38,060 --> 00:13:46,279
深入研究，浏览它，Google搜索它，找到更多细节并为此做出贡献

76
00:13:46,279 --> 00:13:49,139
回到维基。

77
00:13:49,139 --> 00:13:52,440
是的，这是该程序的概述。

78
00:13:52,440 --> 00:13:56,560
花了五分钟，希望不要太久。

79
00:13:56,560 --> 00:13:57,560
是的。

80
00:13:57,560 --> 00:14:00,220
让我们浏览一下。

81
00:14:00,220 --> 00:14:02,860
那么它忘记了乔什？应该添加一些东西吗？

82
00:14:06,540 --> 00:14:15,580
不，我认为这足够了。只想重申大多数对话是

83
00:14:15,580 --> 00:14:19,980
将在我们的Discord服务器上发生。因此，如果您不是其中的一部分，请加入

84
00:14:19,980 --> 00:14:26,700
Discord服务器。在这些电话期间，我们想尝试将其多大的对话保留到该服务器

85
00:14:26,700 --> 00:14:33,740
尽可能。研究小组渠道中有一个线程，每个线程都会有一个

86
00:14:33,740 --> 00:14:39,900
在这些不同的会议中，我们可以保留对话，问题和评论

87
00:14:39,900 --> 00:14:46,540
在该线程上，一切都在一种集中位置，我们不会将其丢给

88
00:14:46,540 --> 00:14:55,980
在流平台中聊天。是的，除此之外，马里奥和我在这里

89
00:14:56,700 --> 00:14:59,080
在此过程中为大家提供帮助。

90
00:14:59,080 --> 00:15:01,140
因此，如果您有疑问或评论，

91
00:15:01,300 --> 00:15:04,259
请随时在该服务器中使用我们。

92
00:15:05,080 --> 00:15:09,379
但是，是的，期待马里奥的演讲。

93
00:15:09,500 --> 00:15:10,580
我看过几次

94
00:15:10,580 --> 00:15:12,300
每次都会变得更好。

95
00:15:13,580 --> 00:15:15,680
是的，乔什见过很多次。

96
00:15:15,740 --> 00:15:17,820
下次应该这样做，伙计。

97
00:15:18,520 --> 00:15:19,000
大概。

98
00:15:20,160 --> 00:15:20,920
是啊是啊。

99
00:15:20,920 --> 00:15:21,740
非常感谢，乔什。

100
00:15:21,860 --> 00:15:24,040
是的，您可以使用

101
00:15:24,220 --> 00:15:26,480
请按照Josh说的那样使用Discord线程

102
00:15:26,480 --> 00:15:31,920
因为我可能会在演讲中问一些问题，您应该问我问题，

103
00:15:31,920 --> 00:15:37,759
因此，请随时将它们放在那里，以便将它们全部放在一个地方。是的，我应该分享我的

104
00:15:37,759 --> 00:15:52,159
屏幕并显示我的演示文稿。哦，在这里，好吧。你知道你是否可以很好地看到，

105
00:15:52,159 --> 00:15:59,199
我想，我相信这比gcp4 um yeaky又好

106
00:15:59,199 --> 00:16:06,480
星期一之后的惨败，很抱歉，呃问题没有服务器uh

107
00:16:06,480 --> 00:16:12,319
它不是软件，而是服务器，因为我们只是没有扩展带宽和CPU

108
00:16:12,319 --> 00:16:19,279
这么多人的机器，我们很高兴看到这么多人来参加这项研究

109
00:16:19,279 --> 00:16:26,159
小组所以，呃，很高兴有你们，并兴奋地与您一起研究协议101

110
00:16:26,720 --> 00:16:35,839
因此，在这次演讲中，我将为您提供以太坊协议的概述。

111
00:16:35,839 --> 00:16:43,039
零件是设计，嗯，它以我们处理的方式开发的方式

112
00:16:43,039 --> 00:16:51,599
与许多协议团队和嗯的UH同事一起

113
00:16:52,719 --> 00:16:57,599
协议开发现在以太坊正在发生的事情以及它的开发方式

114
00:16:57,599 --> 00:17:04,319
它设计的方式您需要了解某些哲学和uh的基本原理

115
00:17:04,319 --> 00:17:08,879
您可以看到史前的标题，因为我也想谈论有关方式的历史

116
00:17:08,880 --> 00:17:17,600
不仅以太坊进化，而且实际上是从这些价值的地方来的

117
00:17:17,600 --> 00:17:25,920
这些基本原理已经建立了，这些想法是

118
00:17:25,920 --> 00:17:34,240
他们并不是新的，他们一直回溯很多年，所以呃，嗯，

119
00:17:34,240 --> 00:17:40,319
为了掌握我想一直潜入生态系统中真正重要的事情

120
00:17:40,319 --> 00:17:48,079
从Unix创建开始，然后自由软件移动和UH

121
00:17:48,960 --> 00:17:54,640
当然，现代密码学Cypherpunk运动的Donos Don是因为

122
00:17:54,640 --> 00:18:01,200
我相信所有这些，当然还有更多的影响以太坊设计对我们的一切

123
00:18:01,200 --> 00:18:05,920
今天我们如何在这里使用它以及今天如何看到加密货币景观

124
00:18:06,480 --> 00:18:13,680
是的，让我们从我想开始，让我只是向您展示演示文稿，因为我的脸

125
00:18:13,680 --> 00:18:20,319
是的，您不需要看到我的脸，这是在这里的清晨，是的，让我们从Unix开始

126
00:18:21,360 --> 00:18:28,160
呃，对于那些不记得什么unix是的人，这是嗯，这基本上是两件事呃

127
00:18:28,160 --> 00:18:37,440
首先，这是一个操作系统，但也是一种理念，因此已在

128
00:18:38,080 --> 00:18:50,240
UH Bell Labs从60年代70年代开始，这是UH Richie和Ken创建的

129
00:18:50,240 --> 00:18:56,240
汤普森（Thompson UH），如果您记得这个名字，那是Richie Ken Thompson，他们是

130
00:18:56,240 --> 00:19:05,680
c语言uh甚至在c b语言之前

131
00:19:05,680 --> 00:19:10,960
就像您使用的浏览器所使用的操作系统一样

132
00:19:10,960 --> 00:19:19,440
呃，深处C这是今天被认为是最多的低级语言

133
00:19:19,440 --> 00:19:26,720
母亲软件的重要建筑部分以及C语言uh

134
00:19:26,720 --> 00:19:32,960
这两个人创建了UNIX操作系统，而不仅仅是许多开发人员

135
00:19:32,960 --> 00:19:39,600
贝尔实验室中的研究人员一起工作，但这是Unix的设计

136
00:19:39,600 --> 00:19:47,120
当我们谈论这个Unix哲学时，C语言以某种方式uh uh uh

137
00:19:47,119 --> 00:19:53,919
主要是什么是UH的主要部分是模块化，因为操作操作

138
00:19:53,919 --> 00:20:00,000
系统无法以一种试图完成所有操作的单个程序来工作

139
00:20:00,639 --> 00:20:07,759
包括我们所说的厨房水槽，但不是那个单独的模块分开

140
00:20:07,759 --> 00:20:13,759
程序每个程序都可以执行最佳功能，并且具有一个可以连接的干净界面

141
00:20:13,759 --> 00:20:21,519
如果您今天是Linux用户，如果您今天是Mac用户，那么对其他人来说，这就是什么

142
00:20:21,519 --> 00:20:30,240
嗯，是系统的核心，如果您使用管道UH服用输出，则可以输出一个

143
00:20:30,240 --> 00:20:36,879
编程并直接用作对方的输入，这为您提供了非常强大的工具

144
00:20:36,879 --> 00:20:42,240
赋予用户的能力，对于用户的角度，这是一个强大的工具，但对于开发人员而言

145
00:20:42,240 --> 00:20:47,599
这是非常实用和安全的，因为使系统在这些模块中分开而不是

146
00:20:47,599 --> 00:20:53,519
仅一个程序给您带来的优势，因此如果存在问题

147
00:20:53,519 --> 00:20:58,160
呃，它是一个模块，您可以修复它，并且不会破坏系统的其余部分

148
00:21:00,160 --> 00:21:03,920
您可以将这些模块的复杂性封装

149
00:21:04,640 --> 00:21:10,559
您可以在这里找到的纪录片链接，您可以在Wiki中找到它是惊人的

150
00:21:10,559 --> 00:21:16,559
我真的建议观看它，真是太神奇了，这是所有第88个档案纪录片

151
00:21:16,559 --> 00:21:22,319
能够表达一些可能复杂的主题，但真的很优雅

152
00:21:22,319 --> 00:21:27,960
解释了，您可以看到那里的人肯·汤普森（Ken Thompson）正在输入管道

153
00:21:27,960 --> 00:21:32,700
早期的Unix解释了它是如何工作的

154
00:21:32,700 --> 00:21:41,039
我相信，它也抓住了70年代初期这种环境的精神

155
00:21:41,039 --> 00:21:50,100
因为当时，该研究所，贝尔实验室，但也是MIT或类似机构

156
00:21:50,100 --> 00:21:55,680
实际上，世界各地的早期程序员都以某种方式工作

157
00:21:55,680 --> 00:22:00,120
合作。同样，使用这些不同的模块和不同的不同模块创建Unix的方式

158
00:22:00,119 --> 00:22:05,239
他们从事自己的工作，他们需要互相交谈并进行协作。

159
00:22:05,519 --> 00:22:09,719
您知道，他们总是打开办公室的门，可以见面并聊天。

160
00:22:09,719 --> 00:22:17,099
这是一个强大的协作环境

161
00:22:17,099 --> 00:22:22,779
基本上像一件大事一样建立，但最终是每个人的

162
00:22:23,099 --> 00:22:25,279
尽力而为，彼此合作。

163
00:22:25,279 --> 00:22:33,039
因此，我看到这种文化的很大一部分也以不同的规模反映了当今以太坊的发展。

164
00:22:33,039 --> 00:22:35,859
是的，我真的推荐这部纪录片。

165
00:22:35,859 --> 00:22:44,819
就像，它确实很好地解释了Unix，它是50年前发明的计算范式

166
00:22:44,819 --> 00:22:45,980
我们今天仍然使用它。

167
00:22:45,980 --> 00:22:47,700
这是我们今天使用计算机的方式。

168
00:22:47,700 --> 00:22:54,580
从电视作家到您拥有的TTY

169
00:22:54,580 --> 00:23:03,140
今天在你的外壳中，这实际上是同一件事，嗯，嗯，继续这个故事，我们去了

170
00:23:03,140 --> 00:23:13,140
到80年代，uh uh the the the the the the the the the the the the the the the the Free软件

171
00:23:13,140 --> 00:23:14,600
他们合作。

172
00:23:15,240 --> 00:23:17,720
他们的软件是开放的，

173
00:23:17,860 --> 00:23:21,480
但这是因为能够运行软件，

174
00:23:21,480 --> 00:23:23,880
要编译它，为您的计算机修复它，

175
00:23:24,040 --> 00:23:25,900
您知道，每个人都得到了源代码。

176
00:23:26,520 --> 00:23:30,640
这些早期的黑客称自己为

177
00:23:31,240 --> 00:23:35,480
这是他们的运营方式。

178
00:23:36,320 --> 00:23:37,700
这就是他们合作的方式。

179
00:23:37,880 --> 00:23:39,840
但是，当然，在80年代，

180
00:23:39,839 --> 00:23:46,939
软件的商业化来了，军队来了，他们创建了专有

181
00:23:46,939 --> 00:23:47,939
软件。

182
00:23:47,939 --> 00:23:57,459
他们关闭了用户的软件，现在这会产生一定的后果。

183
00:23:57,459 --> 00:24:05,500
专有软件是限制您作为用户的自由的。

184
00:24:05,500 --> 00:24:14,799
因此，现在我将其与您购买或建造的房屋进行比较，

185
00:24:14,799 --> 00:24:21,240
但是要更改某些东西，打开窗户，去地下室并修复加热，什么

186
00:24:21,539 --> 00:24:24,500
您需要询问许可，需要从地下室获取钥匙，

187
00:24:24,700 --> 00:24:27,319
来自所有者或建筑商左右。

188
00:24:27,740 --> 00:24:30,140
问题是您是否真的拥有房子。

189
00:24:30,140 --> 00:24:34,319
如果您购买这样的东西，现在您没有许可来做您想做的事，

190
00:24:34,319 --> 00:24:41,480
但是创造者正在控制它，无论它确实是您的。

191
00:24:41,480 --> 00:24:43,519
因为这就是当今计算机正在发生的事情。

192
00:24:43,659 --> 00:24:46,779
您面前有的计算机，您面前有手机，

193
00:24:47,079 --> 00:24:50,539
是一种多功能设备，是一种通用设备，

194
00:24:50,679 --> 00:24:55,559
这是一个计算器，可以以任何方式计算任何数量的操作。

195
00:24:55,919 --> 00:24:58,000
而且您应该能够控制它，

196
00:24:58,039 --> 00:25:00,700
您应该能够告诉它您想用这台计算机做什么。

197
00:25:01,359 --> 00:25:04,240
但是，如果您运行专有软件，

198
00:25:04,319 --> 00:25:07,559
这是开发人员，软件的创建者

199
00:25:07,559 --> 00:25:09,500
控制机器

200
00:25:09,500 --> 00:25:11,099
而且您实际上没有输入。

201
00:25:11,299 --> 00:25:14,039
您甚至都不知道发生了什么。

202
00:25:14,179 --> 00:25:17,579
您不知道专有操作系统即将到来，

203
00:25:17,740 --> 00:25:20,379
无论是打电话回家，发送您的私人数据

204
00:25:20,379 --> 00:25:26,659
或计算无限十进制数字的PI

205
00:25:26,659 --> 00:25:28,519
我相信Windows Vista正在做

206
00:25:28,519 --> 00:25:29,819
或为什么它这么慢。

207
00:25:29,819 --> 00:25:38,419
无论如何，当我们没有自由时，我们就非常有限。

208
00:25:38,579 --> 00:25:41,279
这就是理查德·史塔尔曼（Richard Stallman）意识到的。

209
00:25:41,779 --> 00:25:47,899
因此，理查德·史塔曼（Richard Stallman）通常被称为麻省理工学院的最后一名黑客，因为他为此奉献了生命。

210
00:25:47,960 --> 00:25:51,939
他现在已经70多岁了，他一生都只使用免费软件。

211
00:25:51,940 --> 00:26:00,640
他致力于保持这种原始的黑客文化，以共享该软件。

212
00:26:01,039 --> 00:26:06,960
1983年9月，他启动了GNU项目和自由软件运动，

213
00:26:07,920 --> 00:26:11,820
定义了软件的四个基本自由，

214
00:26:12,240 --> 00:26:17,900
您想要以任何方式运行它，研究源代码，修改并重新分配它的能力。

215
00:26:19,180 --> 00:26:21,500
因此，他给用户提供了自由。

216
00:26:21,940 --> 00:26:26,019
他一直在倡导他的一生。

217
00:26:27,220 --> 00:26:31,640
他启动的项目是GNU项目，听起来很熟悉。

218
00:26:32,019 --> 00:26:34,940
如果您使用的是Linux，则可能会看到GNU Slash Linux，

219
00:26:35,080 --> 00:26:36,400
因为这是操作系统。

220
00:26:36,900 --> 00:26:41,299
GNU的目标是重新创建Unix体验，

221
00:26:41,700 --> 00:26:43,259
但是在完全免费的软件中，

222
00:26:43,420 --> 00:26:47,680
因为即使人们在Unix上有些公开合作，但

223
00:26:47,900 --> 00:26:49,720
它不是真正的免费。

224
00:26:49,720 --> 00:26:57,000
GNU项目创建了许可。如果您去Github，如果您寻找一些您喜欢的人

225
00:26:57,000 --> 00:27:02,319
那里的程序，您可能会发现它是根据GPL或GNU通用公共许可证的许可

226
00:27:02,319 --> 00:27:09,900
这是由Stallman创建的，为程序员提供了一种简单的方法如何许可其程序

227
00:27:09,900 --> 00:27:18,200
作为免费软件。 GNU项目创建了许多核心公用事业。也许如果你学会了

228
00:27:18,200 --> 00:27:25,480
C您使用GCC的GNO编译器集合可能是最常用的UM C编译器

229
00:27:27,080 --> 00:27:33,880
如今，嗯，嗯，许多核心公用事业就是我们称之为uh壳的外壳

230
00:27:33,880 --> 00:27:38,519
操作系统，但操作系统的核心是一项巨大的任务，正在采用

231
00:27:38,519 --> 00:27:46,920
长时间直到90年代初，Um Linus Thorvald的发行

232
00:27:46,920 --> 00:27:53,400
GPL许可证下的操作系统，这可以与GNU外壳相结合

233
00:27:53,400 --> 00:27:59,800
您今天使用的GNU Slash Linux操作系统，因此所有这些都是由Storm开始的

234
00:27:59,800 --> 00:28:06,440
我真的真的推荐来自TEDX日内瓦的这次演讲，他真的很好

235
00:28:06,440 --> 00:28:13,800
解释它会说明为什么软件自由和以太坊很重要

236
00:28:13,799 --> 00:28:19,480
在所有加密货币中，这都是基本的，因为以太坊的重点

237
00:28:19,480 --> 00:28:26,680
是为了让用户自由保持透明，以保持无信任和做到这一点，我们需要知道

238
00:28:26,680 --> 00:28:32,200
当我运行以太坊软件时，那里发生了什么，我需要知道它在做什么

239
00:28:32,200 --> 00:28:39,639
正是它应该做的，它遵守了UM规格，并遵守我

240
00:28:39,640 --> 00:28:47,000
同意以太坊网络的规则。然后在90年代，有开源的移动即将到来。

241
00:28:47,000 --> 00:28:52,600
现在您可能会注意到到目前为止，我只谈论免费软件，但是开源是不同的

242
00:28:52,600 --> 00:28:59,640
一部分。开源是由自由软件社区的一些人创建的

243
00:28:59,640 --> 00:29:04,520
假设，不喜欢品牌，因为免费软件听起来像免费的啤酒。

244
00:29:04,519 --> 00:29:11,799
这意味着libre这意味着您知道自由人的言论自由，但不是真的很好

245
00:29:11,799 --> 00:29:17,480
单词如果您想和它开展业务，请知道赠送免费软件，因此开源

246
00:29:17,480 --> 00:29:25,319
有点像品牌品牌一样，它的基本设置是它的价值观

247
00:29:25,319 --> 00:29:32,519
但是，开源运动更多地谈论了它的务实方面，更多地是关于您知道的

248
00:29:32,519 --> 00:29:37,559
开放是很好的，因为您可以受到更多审核，拥有更多的安全性，您可以带来

249
00:29:37,559 --> 00:29:39,519
更多贡献者等。

250
00:29:39,519 --> 00:29:44,900
因此，这更像是这种业务务实的方法，这是可以的，但是它省略了，

251
00:29:44,900 --> 00:29:47,639
它忘记了那里的自由的重要性。

252
00:29:47,639 --> 00:29:51,440
这件事的重点是赋予用户自由。

253
00:29:51,440 --> 00:29:57,379
因此，我们说免费和开源软件或FOSS，这就是您看到此首字母缩写词的地方。

254
00:29:57,379 --> 00:30:01,519
因此，对于以太坊，我相信所有这些部分对于免费和开源软件都很重要

255
00:30:01,519 --> 00:30:06,879
启用协作并为用户提供自由，好吧，我去过，我应该继续

256
00:30:06,879 --> 00:30:15,680
几分钟，嗯，嗯，下一个重要的重要发明，1976年重要的部分嗯

257
00:30:16,559 --> 00:30:25,599
嗯，密码学中的新指示本文由Defian Hellman UH创建了一个新的范式

258
00:30:25,599 --> 00:30:33,679
现代密码学基本上是嗯，如果是的，这是我这里大多数人的基础知识

259
00:30:33,679 --> 00:30:38,719
猜猜，但这是不对称加密的创建或我们也称为公钥

260
00:30:38,719 --> 00:30:46,799
加密或钥匙对，因为在本文之前之前的uh加密之前

261
00:30:46,799 --> 00:30:57,599
仅以一种一种方式来对称的方式完成，所以自从嗯，嗯，我不知道凯撒

262
00:30:57,599 --> 00:31:03,919
自从几千年前以来

263
00:31:03,919 --> 00:31:10,159
我听了一条消息，我以某种方式扰乱了我更改更改字母的单词

264
00:31:10,160 --> 00:31:17,200
根据某些规则，对某些键，如果我将其传递给另一方，我需要给他

265
00:31:18,160 --> 00:31:23,920
密文，但也规则将其解密的关键uh uh，因此我们有一个键和单个密钥

266
00:31:23,920 --> 00:31:30,320
加密文本，但在Assamu解密中，我们有一个非常强大的工具，可以启用

267
00:31:30,320 --> 00:31:37,440
我们要使用一个密钥，我们称其为公开密钥来加密某些内容，并且是对应的私有

268
00:31:37,440 --> 00:31:44,720
只有其所有者UH持有的钥匙才能解密其只有私钥才能使用的钥匙

269
00:31:44,720 --> 00:31:49,759
解密，但任何人都可以使用公共密钥来加密消息，这意味着我可以拥有

270
00:31:49,759 --> 00:31:56,080
我在网站中的名片上的名片上的公共密钥，任何人都可以向我发送加密电子邮件

271
00:31:56,080 --> 00:32:01,120
这是加密电子邮件的曙光，uh主要是PGP的实施

272
00:32:01,119 --> 00:32:08,879
嗯，当然，如果您响起任何铃铛，这就是所有加密货币都使用的

273
00:32:08,879 --> 00:32:15,039
使用以太坊，如果您曾经使用比特币，则使用了公共密钥或公众的某些推导

274
00:32:15,039 --> 00:32:23,519
钥匙uh作为地址，私钥是因为另一个独特而允许您花费的东西

275
00:32:23,519 --> 00:32:30,799
这个关键对密码学的特征是数字签名uh数字签名是

276
00:32:30,799 --> 00:32:38,879
数学证明uh哪种方式可以用uh uh与私钥我们签署我们可以签名的数据

277
00:32:38,879 --> 00:32:45,039
任何数据都可以是terabyte文件，它可以是一个简单的消息，呃，我们签署了此数据

278
00:32:45,919 --> 00:32:53,440
签名是一些数学证明，可以通过公共密钥验证UH

279
00:32:53,440 --> 00:33:00,319
任何看到此签名并拥有您的公钥的人都可以验证只有

280
00:33:00,319 --> 00:33:05,759
私钥可以产生此签名，这是一种方式，因为交易是在内部完成的

281
00:33:05,759 --> 00:33:10,399
当我发送交易时，我会创建一个证明我是该地址的所有者，并且正在签署

282
00:33:10,399 --> 00:33:16,480
我希望在此处转移这笔资金的消息，以便公开向另一个资金

283
00:33:16,480 --> 00:33:24,159
另一个地址正确，嗯，今天，我们认为这是理所当然的，如果您

284
00:33:24,160 --> 00:33:31,440
使用TLS连接，在此处浏览器中的HTTPS连接。那是端到端加密的确切加密

285
00:33:31,440 --> 00:33:37,920
这项技术。当您使用信号或WhatsApp时，它正在使用某种形式

286
00:33:37,920 --> 00:33:44,480
密码学。所以今天到处都到处都是，但在70年代和80年代并不是真的

287
00:33:44,480 --> 00:33:51,440
使用BGP设计加密电子邮件时，非常好的隐私工具，

288
00:33:51,440 --> 00:33:57,440
这被认为是危险的，被认为是一种武器。

289
00:33:57,440 --> 00:34:13,440
因此，事实是，在计算机和互联网传播到房屋之前，

290
00:34:13,440 --> 00:34:19,440
您知道，对于整个地方的平民，它实际上仅由军队使用。

291
00:34:19,440 --> 00:34:25,840
军队。现在，任何人都可以加密，任何人都可以实现其数字隐私。和政府

292
00:34:25,840 --> 00:34:29,760
没有，我不想说他们不喜欢它，他们没有框架，他们只是没有

293
00:34:29,760 --> 00:34:36,240
理解，这是全新的。他们认为密码学是军事武器库，

294
00:34:36,400 --> 00:34:42,360
平民无法使用的武器必须受到监管，不能出口。

295
00:34:42,360 --> 00:34:51,460
对不起，许多早期的密码学家都陷入困境，因为他们的开源免费

296
00:34:51,460 --> 00:35:00,460
软件密码学被uh um出口，例如，UH Phil Zimmerman

297
00:35:00,460 --> 00:35:09,680
PGP的创造者嗯，他正受到威胁，他将要接受审判

298
00:35:09,679 --> 00:35:15,339
叛国罪之类的东西，因为他创建了此电子邮件加密，这只是数学

299
00:35:15,339 --> 00:35:18,679
在软件中编程，就是这样。

300
00:35:19,239 --> 00:35:28,219
他著名地创作了一本由麻省理工学院出版的书，其中包含

301
00:35:28,219 --> 00:35:33,460
整个源代码，包括PGP版本的制作文件，例如2.7之类的。

302
00:35:33,940 --> 00:35:36,319
然后他们可以导出这本书。

303
00:35:36,320 --> 00:35:40,620
而且，美国没有任何反对出口书籍的法规。

304
00:35:40,800 --> 00:35:44,080
所以现在他保护自己，

305
00:35:44,080 --> 00:35:46,200
但是我们也可以看到这是一种自由言论

306
00:35:46,200 --> 00:35:49,160
只是谈论数学规则

307
00:35:49,160 --> 00:35:51,800
并用软件的语言编写它们

308
00:35:51,800 --> 00:35:53,700
或字面上的编程语言，

309
00:35:53,880 --> 00:35:55,120
只是一种语言，对吗？

310
00:35:55,519 --> 00:35:59,200
所以有这个人社区

311
00:35:59,200 --> 00:36:00,720
谁在做这些事情，

312
00:36:00,820 --> 00:36:02,820
构建该软件，根据它提倡。

313
00:36:02,820 --> 00:36:07,340
这个非常受欢迎的运动称为Cypherpunks。

314
00:36:08,360 --> 00:36:11,300
在这张照片上，看上去有点害怕面具，

315
00:36:11,380 --> 00:36:12,660
但是我们可以揭露它们。

316
00:36:13,920 --> 00:36:16,019
cypherpunks有很多不同的人

317
00:36:16,019 --> 00:36:21,240
来自不同学术界，商业，

318
00:36:21,620 --> 00:36:23,519
计算机科学家，程序员，

319
00:36:23,519 --> 00:36:31,760
或者只是构建这些工具的研究人员。

320
00:36:31,760 --> 00:36:36,720
他们开始了一个Cypherpunk邮件列表，这是一个著名的地方，其中许多工具

321
00:36:36,720 --> 00:36:40,800
宣布了SSH宣布，我相信比特币已在那里宣布

322
00:36:41,840 --> 00:36:49,920
在右边的右边是右边的嗯，嗯，吉尔莫尔

323
00:36:52,240 --> 00:36:58,880
谁一直是电子边界基金会的创始人UH EFF非常重要的组织，直到

324
00:36:58,880 --> 00:37:05,599
直到今天。在中间，Cypherpunk宣言的作者埃里克·休斯（Eric Hughes）实际上

325
00:37:06,440 --> 00:37:13,099
写下了Cypherpunks相信的这些原则，在一份宣言中

326
00:37:13,099 --> 00:37:21,440
它的摘录在幻灯片上，他在那里谈论我们构建一些分布式的那部分，

327
00:37:21,440 --> 00:37:28,760
打开免费软件，这是不可能的，嗯，以某种方式

328
00:37:28,760 --> 00:37:34,639
禁止，被遗忘，因为它确实是，嗯，呃，呃，呃，

329
00:37:34,639 --> 00:37:38,059
因为它是免费的，而且是，它是，呃，只是一种形式的形式

330
00:37:38,059 --> 00:37:42,260
语音形式，嗯，嗯，呃，数学解释，用于

331
00:37:42,260 --> 00:37:45,780
例如，嗯，呃，所有著名的人，他们生产了，呃，

332
00:37:45,800 --> 00:37:49,340
带有加密代码的T恤。所以，你知道，

333
00:37:49,340 --> 00:37:55,500
我的T恤上有非法的话。这是这里非法的数学符号。

334
00:37:57,420 --> 00:38:01,980
是的，我真的建议您受到Cypherpunk宣言的启发。

335
00:38:01,980 --> 00:38:04,300
左边是蒂莫西·C·梅

336
00:38:05,980 --> 00:38:11,420
我认为是英特尔的首席科学家。他在那里有一些有趣的发明，但是

337
00:38:11,420 --> 00:38:18,300
上下文，他是Cypherpunk男性英语的创始人之一，Cypherpunk运动，

338
00:38:18,300 --> 00:38:27,019
他嗯，他将这个想法进一步提出了他创造的Cryptanarchy宣言，他在谈论

339
00:38:27,019 --> 00:38:33,660
嗯，这些工具不仅像我们能够创建它们并拥有隐私和

340
00:38:33,660 --> 00:38:39,580
保护自己，但我们实际上可以创建一个数字领域，在这个数字世界中我们可以

341
00:38:39,579 --> 00:38:47,920
可以完全免费保护，我们可以拥有uh数字货币匿名

342
00:38:48,699 --> 00:38:58,599
匿名凭证呃，我们自己的声誉呃，呃，我们自己的市场等等，所以像这些

343
00:38:58,599 --> 00:39:06,519
是否已经设想了基于密码学的UH数字货币uh in Well

344
00:39:06,519 --> 00:39:10,380
90年代初和80年代末，我们已经有了这个想法。

345
00:39:10,679 --> 00:39:14,579
大卫·乔（David Chow）著名地创造了Digicache，这也是Cypherpunk之一。

346
00:39:15,320 --> 00:39:18,559
因此，我们看到了这些尝试，我们看到了

347
00:39:18,559 --> 00:39:22,460
这些想法指的是

348
00:39:22,460 --> 00:39:25,320
无可讯息的免费数字平台。

349
00:39:27,460 --> 00:39:29,579
是的，所有这一切，

350
00:39:30,780 --> 00:39:34,219
以太坊如何适应的问题

351
00:39:34,219 --> 00:39:39,759
在所有这一切中，这当然就像我的某种主观的观点一样

352
00:39:39,759 --> 00:39:45,279
想我想影响你的意见，我想问你们像嗯，我有点描述

353
00:39:45,279 --> 00:39:50,699
在有关历史的观点中

354
00:39:50,699 --> 00:39:56,000
嗯，这是什么是什么，但我想问你你认为以太坊是什么

355
00:39:56,000 --> 00:40:03,739
您用一个单词或一句话描述以太坊，将其写入Discord Chat，我要检查它

356
00:40:04,219 --> 00:40:10,059
嗯，在线程中

357
00:40:25,339 --> 00:40:28,859
世界电脑酷酷

358
00:40:28,860 --> 00:40:35,440
是的，最高级员工约翰·吉尔莫尔（John Gilmore）。是啊是啊。好的。那是他的荣誉。

359
00:40:36,720 --> 00:40:41,800
不稳定，可爱的计算机。哦，我喜欢那个。是的，我们有许多不同的意见。

360
00:40:42,059 --> 00:40:47,940
分散的网络，分散计算机，无信任的信任，世界计算机以及无信任性。

361
00:40:48,360 --> 00:40:50,519
状态机。哦，我喜欢那个。酷，很酷。

362
00:40:51,280 --> 00:40:56,700
好吧，我们有许多不同的意见，但是我必须说，你们所有人当然都是正确的。

363
00:40:56,699 --> 00:40:59,859
我认为没有单一的方式

364
00:40:59,859 --> 00:41:01,699
我们可以定义以太坊

365
00:41:01,699 --> 00:41:03,859
因为每个人

366
00:41:03,859 --> 00:41:06,059
看到其中的另一部分

367
00:41:06,059 --> 00:41:07,799
哦，新互联网也很酷

368
00:41:07,799 --> 00:41:09,379
我相信所有这些都是正确的

369
00:41:09,379 --> 00:41:11,539
我相信

370
00:41:11,539 --> 00:41:14,179
以太坊是这个数字

371
00:41:14,179 --> 00:41:14,919
领域

372
00:41:14,919 --> 00:41:18,139
任何人都可以找到他们的位置

373
00:41:18,139 --> 00:41:19,159
任何人都可以

374
00:41:19,159 --> 00:41:21,960
从不同的

375
00:41:21,960 --> 00:41:23,559
观点和

376
00:41:23,559 --> 00:41:26,199
你知道取决于你的

377
00:41:26,199 --> 00:41:30,359
您来自您对工作的事物感兴趣的动力

378
00:41:30,359 --> 00:41:36,919
某种隧道的愿景，就像以太坊对您所要设想的是什么，所以这个

379
00:41:36,919 --> 00:41:42,359
这是我们在谈论的小象，当然我需要关注的是

380
00:41:42,359 --> 00:41:49,960
协议本身的技术部分上的整个大象嗯，我需要谈论更多

381
00:41:49,960 --> 00:42:01,880
就像动手一样，是什么是以太坊，嗯，是的

382
00:42:01,880 --> 00:42:07,800
即使我们对此有不同的看法，我们想实现我们想要的这些目标

383
00:42:07,800 --> 00:42:14,599
实现这些愿景，这意味着我们需要使用UH并改善以太坊

384
00:42:14,599 --> 00:42:21,719
嗯，能够到达那里并回答什么是以太坊，呃，那里有很多简单

385
00:42:21,719 --> 00:42:28,119
术语吧，呃，当然可以指出人们的另一个以太坊的描述

386
00:42:28,119 --> 00:42:33,799
如果有人问这是什么描述，即10年前的定理是什么

387
00:42:33,799 --> 00:42:40,199
嗯，在uh Italic上，在迈阿密比特币阵容上揭示了这次会议的变化很大。

388
00:42:40,199 --> 00:42:46,159
很多。是的，这是一种方式。

389
00:42:46,919 --> 00:42:51,960
白皮书更像是一般的高水平

390
00:42:51,960 --> 00:42:55,219
描述。这更多的是如何这样做

391
00:42:55,219 --> 00:42:56,639
网络应该起作用。

392
00:42:56,679 --> 00:42:59,579
但是我们可以将其进一步发展到黄纸

393
00:42:59,579 --> 00:43:02,759
是实际的正式规范

394
00:43:02,759 --> 00:43:09,319
以太坊。它是由加文·伍德（Gavin Wood）撰写的

395
00:43:09,320 --> 00:43:15,160
以太坊的创始人，也是原始C ++实施的创建者，实际上

396
00:43:15,720 --> 00:43:22,039
坐下来写下它应该如何工作，不仅在理论上，而且实际上是

397
00:43:24,280 --> 00:43:31,880
使用数学，使用正式表达式，以太坊应该如何成为

398
00:43:31,880 --> 00:43:38,519
根据规范实施。所以这是一种方式，您在这里看到它是

399
00:43:38,519 --> 00:43:44,880
这是柏林版本当前版本是巴黎，所以它已经过时了，但是它总是

400
00:43:44,880 --> 00:43:49,860
因为以太坊正在改变这种情况，就像原始的一样，就像一些原始愿景

401
00:43:49,860 --> 00:43:54,960
呃，但这不是唯一只有大量指定的位置的唯一方法不仅仅是

402
00:43:54,960 --> 00:44:00,840
Vitalik，Gavin或Rubin或这些定义以太坊的创始人，但是社区，所以

403
00:44:00,840 --> 00:44:06,420
使用以太坊改进的过程，任何人都可以提出更改

404
00:44:06,420 --> 00:44:15,960
以太坊的改进或或或um uh uh改变他们认为是嗯，对此很重要

405
00:44:15,960 --> 00:44:22,200
EAP过程的灵感来自Amir发起的比特币改进建议的围嘴过程

406
00:44:22,200 --> 00:44:29,159
受类似处理Python的启发的Taki UH，这通常是社区的一种UH的方式

407
00:44:29,159 --> 00:44:36,319
从事这个大型分布式项目。

408
00:44:36,319 --> 00:44:41,500
但是拥有黄纸加EIP，您应该实施基于的东西

409
00:44:41,500 --> 00:44:43,119
在上面，这有点混乱，对吗？

410
00:44:43,119 --> 00:44:44,719
像所有这些不同的文档一样。

411
00:44:44,719 --> 00:44:49,359
因此，我们实际上在这两个存储库中有适当的规范。

412
00:44:49,359 --> 00:44:52,619
这就是执行规格和共识规格。

413
00:44:52,619 --> 00:44:59,339
在这里所有的API，这就是真正定义所有以太坊的原因

414
00:44:59,339 --> 00:45:02,199
应该工作。

415
00:45:02,199 --> 00:45:08,739
它是用python写的，对于某些人，像我这样的人，我很难阅读

416
00:45:08,739 --> 00:45:15,199
黄纸和python中的数学旋转实际上更可读。

417
00:45:15,199 --> 00:45:19,400
当然，您可以基于此生成测试，您可以测试您的实现

418
00:45:19,400 --> 00:45:27,720
反对规格，因此我们指定的是一种非常实用且非常有用的方法

419
00:45:27,720 --> 00:45:33,559
当然，如果您不是程序员，或者您只想了解

420
00:45:33,559 --> 00:45:39,400
它的工作方式很重，可以阅读我建议阅读注释的代码

421
00:45:39,400 --> 00:45:44,200
说明的规范呃，它是如何工作的，为什么它是这样工作的

422
00:45:44,199 --> 00:45:46,579
方式，它为您提供了一个上下文。

423
00:45:46,579 --> 00:45:55,539
因此，例如，Ben Eddington的一本书，E2书。

424
00:45:55,539 --> 00:46:03,000
因此，有此规范的版本，以太坊的不同版本。

425
00:46:03,000 --> 00:46:09,019
我们还称其为Hard Forks，即以太坊升级，现在已经发生了10个

426
00:46:09,019 --> 00:46:18,059
多年前从边境宅基地开始的年和UM，嗯，嗯，您可以看到

427
00:46:18,059 --> 00:46:24,139
所有历史记录在以太坊中的UH中的所有升级

428
00:46:24,139 --> 00:46:33,099
这些升级已在这些升级中的每一个中都耦合在一起，但是即使以太坊

429
00:46:33,099 --> 00:46:41,259
在十年井中，大量发展了很多变化，这总是遵守

430
00:46:41,259 --> 00:46:48,940
某些原则有uh以太坊设计必须遵循的基本原则。

431
00:46:48,940 --> 00:46:54,860
在这个现在不存在的网站上，uh存档了，我建议在这里解释很不错

432
00:46:54,860 --> 00:47:02,860
潜入那个UH，但要点是这些开发人员需要具有某些值

433
00:47:03,099 --> 00:47:09,239
需要遵守某些规则，一些设计决策，

434
00:47:09,819 --> 00:47:15,719
而且我们不能取舍这会反驳这一点。

435
00:47:16,019 --> 00:47:18,920
所以，是的，简单，普遍性，模块化，

436
00:47:19,139 --> 00:47:23,619
非歧视，敏捷性，这些是基本原理

437
00:47:23,619 --> 00:47:28,059
以以太坊需要尽可能简单的方式

438
00:47:28,059 --> 00:47:35,579
在某种需要轻松实施的方式中，您需要知道

439
00:47:35,579 --> 00:47:42,619
如果您将其比较，我不知道Linux内核，就像我无法想象的那样，可以重新实现

440
00:47:42,619 --> 00:47:51,420
有人喜欢写另一个版本的UM普遍性，所以以太坊也喜欢

441
00:47:51,420 --> 00:47:57,659
在后面的普遍性和普遍性和

442
00:47:57,659 --> 00:48:05,820
非一般化意味着以太坊没有歧视，不是

443
00:48:05,820 --> 00:48:11,579
偏向某些功能。以太坊不应该做一件事情，而是要成为

444
00:48:11,579 --> 00:48:20,860
对于人们想使用的任何人的广义平台。这意味着核心协议没有，

445
00:48:20,860 --> 00:48:30,160
它不能包含可以定义某些用户行为或更高级别的功能。

446
00:48:30,160 --> 00:48:38,900
例如，核心协议中无法实现令牌标准。

447
00:48:38,900 --> 00:48:48,960
使用ERC，人们在以太坊之上创建它，但不在协议中

448
00:48:48,960 --> 00:48:50,019
本身。

449
00:48:50,019 --> 00:48:54,320
我已经谈论过的模块化，当我以后向您展示协议时，您会看到它。

450
00:48:55,300 --> 00:49:01,940
但是，我们在以太坊中所关注的是，此处提到的封装复杂性也是如此

451
00:49:02,300 --> 00:49:08,860
我们封装以太坊的不同部分，网络的不同部分，

452
00:49:09,179 --> 00:49:13,900
他们在一些相对简单的API中互相交谈。

453
00:49:14,219 --> 00:49:16,539
因此，我们可以调试它。

454
00:49:16,539 --> 00:49:21,259
如果只有其中一个失败，我们就能拥有更多的安全性。

455
00:49:22,860 --> 00:49:27,880
是的，我想阐述的一件事是非风险版本

456
00:49:27,880 --> 00:49:30,759
随着以太坊的变化，

457
00:49:30,759 --> 00:49:38,460
这些变化取决于它们带来的好处。

458
00:49:38,779 --> 00:49:43,739
因此，开发商愿意以某些利益冒险，对吗？

459
00:49:43,739 --> 00:49:49,439
如果有很小的变化给我们带来巨大的好处，那么绝对值得这样做

460
00:49:50,039 --> 00:50:01,439
所以这是一个原则，对不起，我现在想问我还为时过早

461
00:50:01,439 --> 00:50:06,299
当我谈论不同部分的不同部分时，我一直在这里提到

462
00:50:06,299 --> 00:50:13,019
就像协议的各个部分一样，您认为什么是以太坊的心脏

463
00:50:13,019 --> 00:50:18,900
重要的部分，我们应该从让我们一起在这里构建它，然后

464
00:50:18,900 --> 00:50:25,780
让我们看看您会认为是大脑的心脏

465
00:50:25,780 --> 00:50:37,780
显然是的，就直接进入小组，好吧，这是EVM共识人

466
00:50:37,780 --> 00:50:38,440
哦，很好。

467
00:50:42,140 --> 00:50:43,260
那还有什么呢？

468
00:50:44,760 --> 00:50:46,580
随意写。

469
00:50:46,740 --> 00:50:47,080
哲学。

470
00:50:47,440 --> 00:50:48,840
好吧，我在谈论更多。

471
00:50:48,960 --> 00:50:50,780
看到人或哲学真是太好了。

472
00:50:50,980 --> 00:50:53,720
从技术上讲，我的意思是模块化部分。

473
00:50:54,360 --> 00:50:55,560
好的，数据结构。

474
00:50:56,120 --> 00:51:00,660
是的，现在您什么都看不到，因为我正在等待您透露它。

475
00:51:01,320 --> 00:51:02,880
点对点网络。

476
00:51:03,080 --> 00:51:03,280
好的。

477
00:51:04,300 --> 00:51:05,100
奇迹树。

478
00:51:05,880 --> 00:51:06,260
好吧，伙计们。

479
00:51:06,260 --> 00:51:13,780
嗯，我相信我相信你是对的，我相信你们所有人都是权利

480
00:51:13,780 --> 00:51:21,380
因为这些都是以太坊的重要组成部分，所以我想从UM开始

481
00:51:21,380 --> 00:51:28,580
因此，当我询问以太坊的心脏时，我想从经常像EVM开始

482
00:51:28,580 --> 00:51:34,820
提到以太坊的重要部分，这几乎是所有的核心

483
00:51:34,820 --> 00:51:45,220
它是内部特定功能，所以什么是CVM，这是一个基本上是虚拟化的CPU

484
00:51:45,220 --> 00:51:53,620
呃，如果您在这里使用计算机，则您的X86或基于ARM UH的CPU

485
00:51:54,580 --> 00:51:59,620
指令集特定于体系结构，这是一个硬件，可实现某些指令

486
00:51:59,619 --> 00:52:06,659
设置一些基本的组件，一些能够执行逻辑算术并起作用的基本说明

487
00:52:06,659 --> 00:52:15,460
使用数据到uh做得很好，例如计算机可以做任何事情或所有事情

488
00:52:15,460 --> 00:52:21,859
成为通用机器，因此它在硬件级别，但在编程中的软件中

489
00:52:21,859 --> 00:52:27,539
在计算机科学中，我们经常做的是虚拟化这些指令集，呃，我们创建虚拟

490
00:52:27,539 --> 00:52:33,619
例如，如果您再次是开发人员，也许您使用JVM Java虚拟

491
00:52:33,619 --> 00:52:41,300
这些机器是创建这些机器的机器

492
00:52:41,300 --> 00:52:47,139
可能会在不同制造商的不同机器上的行为可能有所不同

493
00:52:47,139 --> 00:52:52,659
可以理解某些说明略有不同

494
00:52:52,659 --> 00:52:54,119
它在我的机器上起作用。

495
00:52:54,119 --> 00:52:56,960
所以现在，如果您想复制这种经验，

496
00:52:56,960 --> 00:52:57,940
它在我的机器上工作，

497
00:52:57,940 --> 00:52:59,599
我创建一个虚拟环境，

498
00:52:59,599 --> 00:53:02,420
在每台机器上总是相同的

499
00:53:02,420 --> 00:53:04,420
因为如果我执行某件事

500
00:53:04,420 --> 00:53:06,339
在这个虚拟环境中，

501
00:53:06,339 --> 00:53:09,079
它总是会以相同的结果结束。

502
00:53:09,079 --> 00:53:10,659
这就是EVM。

503
00:53:10,659 --> 00:53:12,079
这是一台虚拟机，

504
00:53:12,079 --> 00:53:15,079
有自己的指令集

505
00:53:15,079 --> 00:53:17,359
有30个代码。

506
00:53:17,360 --> 00:53:24,519
嗯，嗯，这些，这些都可以完成，它们可以做任何事情。

507
00:53:24,519 --> 00:53:37,240
um，uh，，，，，，，，evm是实际的执行引擎，是运行以太坊程序的环境。

508
00:53:37,239 --> 00:53:51,019
现在，如果所有计算机，每个运行以太坊的计算机都具有相同的虚拟机或相同的实现，但是现在可以通过相同规范实现，现在可以以不同的语言和不同的方式实现。

509
00:53:51,459 --> 00:54:01,519
如果仍然遵循规范，则执行的结果，该虚拟机中程序运行的结果将始终相同。

510
00:54:01,519 --> 00:54:04,759
这意味着所有这些以太坊客户都可以就某事达成共识。

511
00:54:04,760 --> 00:54:11,920
它。我还会在这里提到我先前幻灯片中的三明治复杂性。

512
00:54:11,920 --> 00:54:19,060
那就是它的工作方式。因此，您可能听说过坚固或毒蛇或一些

513
00:54:19,060 --> 00:54:24,640
这些高级语言中的其他，这些语言是可读和可审计的。然后我们有

514
00:54:24,640 --> 00:54:33,240
非常复杂的编译器，这是一个很大的部分，它是野兽。非常复杂。在

515
00:54:33,239 --> 00:54:38,439
底部，我们有EVM字节码，该虚拟机的指令，又有

516
00:54:38,439 --> 00:54:46,159
它们不是很多，它是可以阅读的，以某种方式正式可验证，实际的

517
00:54:46,159 --> 00:54:51,479
虚拟机确实。因此，当我们喜欢这两个非复合件时，

518
00:54:51,479 --> 00:54:57,719
中间，它会产生一个复杂的三明治，而evm在底部。但是为了使EVM工作，

519
00:54:57,719 --> 00:55:06,199
它需要一些数据来输入和输出一些数据，因此我们拥有状态UM

520
00:55:07,159 --> 00:55:14,279
因此，以太坊中的数据uh数据结构数据库，该数据库包含所有uh

521
00:55:14,279 --> 00:55:20,119
侵略者平衡其当前状态UH所有网络的当前状态

522
00:55:20,119 --> 00:55:29,319
合同所有um the Code和所有合同的数据

523
00:55:29,319 --> 00:55:35,079
嗯，这就是我们所说的状态，我知道你们中的许多人是您不喜欢以太坊州的无政府主义者

524
00:55:35,079 --> 00:55:41,639
我们之所以州，是因为以太坊是状态机UH状态机是UH的原理

525
00:55:41,639 --> 00:55:46,599
计算机科学，我们再次拥有一台可以导致不同状态和不同状态的机器

526
00:55:46,599 --> 00:55:55,159
输入嗯，所以evm处理uh输出一些数据更新状态UH创建我们称之为

527
00:55:55,159 --> 00:56:02,519
国家过渡基于某些输入，即交易，所以交易是

528
00:56:02,519 --> 00:56:08,039
有关国家过渡如何发生的说明以及如果是正确的话

529
00:56:08,039 --> 00:56:13,559
如果它在EVM规则中起作用，则它会创建成功的状态

530
00:56:13,559 --> 00:56:20,920
过渡，如果您熟悉比特币设计，我们会更新以太坊的状态

531
00:56:20,920 --> 00:56:28,599
UH或类似的基于UTXO的UH加密货币这是主要区别是以太坊的地方

532
00:56:28,599 --> 00:56:33,880
单个全球状态基本上是一个具有当前状态的当前值的数据库

533
00:56:33,880 --> 00:56:41,480
所有的比特币或其他货币的uh，我们拥有的UTXOS，我们有UH uh

534
00:56:41,480 --> 00:56:50,599
每个事务的输出，uh不是一个单个UH单个状态，所以这就是uh

535
00:56:51,480 --> 00:56:57,159
以太坊中的设计决定之一是什么方式，它是一个大的默克尔树

536
00:56:57,159 --> 00:57:04,920
美国帕特里夏树和嗯，交易已存储在另一棵树中，但更新此

537
00:57:04,920 --> 00:57:12,200
嗯，他们是嗯，交易当然来自Mempool，这是所有人的库

538
00:57:12,200 --> 00:57:19,880
交易来到网络，那是uh，那些是在点对点上闲聊的

539
00:57:19,880 --> 00:57:27,480
网络UM，因此点对点是与其他客户的通信接口

540
00:57:27,480 --> 00:57:34,760
嗯，网络中的其他节点可以广播交易，所以您

541
00:57:35,960 --> 00:57:43,000
呃，您的交易嗯

542
00:57:43,000 --> 00:57:49,719
它验证它是否正确，然后是否正确地将其广播给所有

543
00:57:49,719 --> 00:57:55,159
即使网络大且分散，这些同行也是如此，这是交易

544
00:57:55,159 --> 00:58:02,440
传播到所有网络，并将所有这一切都付诸实践，但可以说

545
00:58:02,440 --> 00:58:10,119
是执行层，如果您使用的话，这将称为以太坊的执行部分

546
00:58:10,119 --> 00:58:19,239
某些uh以太坊钱包，或者如果您在使用一些DAP，您知道远端应用程序UM

547
00:58:19,239 --> 00:58:26,679
使用一些标准化的UH API与以太坊的执行层交谈，这是RPC JSON RPC

548
00:58:26,679 --> 00:58:34,919
如果您想知道您知道在此帐户上有多少饮食，可以读取当前数据的API UH

549
00:58:34,919 --> 00:58:40,439
您需要阅读状态，以便从执行层读取数据或是否要编写

550
00:58:40,439 --> 00:58:46,119
如果要发送交易，您的钱包标志将其发送给该客户端

551
00:58:46,119 --> 00:58:51,480
将其广播到网络上的uh uh接收到它验证它并将其发送给对等

552
00:58:51,480 --> 00:58:58,920
要等层，所以这是执行部分UM现在的另一个api

553
00:58:58,920 --> 00:59:08,679
这是引擎API UH，它与uh的共识部分交谈，因此该执行如何知道什么

554
00:59:08,679 --> 00:59:15,000
正确的是链的头是什么，其他所有节点都同意

555
00:59:15,000 --> 00:59:22,679
嗯，我在uh bft上链接了UH呈现的容错问题

556
00:59:22,679 --> 00:59:29,719
在文档中的um中，这就是像嗯，我们需要就什么是什么

557
00:59:29,719 --> 00:59:35,800
整个平衡的当前状态不仅是我看到的这一部分网络

558
00:59:35,800 --> 00:59:42,199
嗯，这是由叉子选择向执行客户端或该执行层指示的

559
00:59:42,199 --> 00:59:51,719
当然，这是由以太坊，LMD幽灵或

560
00:59:51,719 --> 00:59:58,779
最新的消息驱动，最贪婪，最重的观察到的子树，非常术语

561
00:59:58,779 --> 01:00:11,319
解释这一叉形规则和这种共识机制的方法，该机制基于数字

562
01:00:11,320 --> 01:00:18,600
UH最多的其他站点是叉子或树链的数量最多

563
01:00:18,600 --> 01:00:24,760
船最多的电台是被认为是规范和嗯，嗯

564
01:00:24,760 --> 01:00:30,519
通过将叉子选择到客户端，uh，以及它自己的点对点网络以及

565
01:00:30,519 --> 01:00:34,840
其他一些具有当前努力工作的部分，我们有随机的斑点

566
01:00:34,840 --> 01:00:42,120
所有这些都是随机性，这是共识层，所以以太坊现在是这两个

567
01:00:42,120 --> 01:00:50,680
彼此连接的图层，并在发动机API上连接，呃，是的，是的

568
01:00:50,680 --> 01:00:57,000
共识也有其自己的API，您也可以再次与该客户进行交流以学习

569
01:00:57,000 --> 01:01:02,440
现在关于状态，而不是定理本身，而不是喜欢帐户和交易，而是关于

570
01:01:02,440 --> 01:01:08,760
共识指出有多少验证者有多少uh uh验证器做什么是什么

571
01:01:08,760 --> 01:01:16,760
电台是什么是链条的最终uh头等，我们从信标API中问UH

572
01:01:16,760 --> 01:01:22,039
共识播放器uh如果您正在进行验证器（如果您参与共识）

573
01:01:22,039 --> 01:01:28,519
呃，您的信标节点或此共识层验证uh最新块将其发送到

574
01:01:28,519 --> 01:01:36,039
执行层以验证uh uh块的完整性，然后如果被认为有效，则uh

575
01:01:36,039 --> 01:01:41,480
验证者使用其密钥签署证明，我相信这个网络

576
01:01:41,480 --> 01:01:47,639
嗯，这个uh块是正确的，我证明了它，并将此数据发送给签名uh

577
01:01:47,639 --> 01:01:53,159
共识层是通过其自己的点对点网络广播的，以便共识

578
01:01:53,159 --> 01:02:00,199
有自己的点对点，与执行层不同，所以这整个事情

579
01:02:00,199 --> 01:02:04,679
就像我之前所说的简化了协议不同部分的简化概述

580
01:02:04,679 --> 01:02:11,319
您真的可以喜欢这些盒子中的每个盒子都是巨大的兔子孔

581
01:02:12,119 --> 01:02:20,119
并成为UH上UH的专家

582
01:02:20,119 --> 01:02:24,359
高水平将抽象化，因此这些是在执行引擎中的客户端中实现的

583
01:02:24,359 --> 01:02:29,960
执行客户端或执行层客户端和信标节点或共识客户端以及

584
01:02:29,960 --> 01:02:34,679
过程层客户端的不同单词为每个人都有自己的点对点

585
01:02:34,679 --> 01:02:39,480
右侧的网络执行客户端仅与执行客户端进行对话

586
01:02:39,480 --> 01:02:43,960
BQ节点只是在寻找bk注释，他们有自己的交流

587
01:02:43,960 --> 01:02:52,039
协议是执行的开发点对点，而对信标的对等点对点

588
01:02:53,079 --> 01:03:00,039
他们有自己的API提供不同的数据，需要成为

589
01:03:00,039 --> 01:03:07,320
连接在引擎API上，是的，这就是这就像这样的高级概述

590
01:03:07,320 --> 01:03:13,400
什么构成以太坊节点或以太坊客户端的uh

591
01:03:13,400 --> 01:03:21,720
嗯，但是当然这有点新的嗯，这是嗯，这是在此之后发生的事情

592
01:03:21,720 --> 01:03:29,559
合并，向您展示点对点网络嗯，这就是以太坊的样子

593
01:03:29,559 --> 01:03:34,600
只是给它再次是基本的东西，但只是为了让您了解左边

594
01:03:34,599 --> 01:03:39,079
集中化如果您现在正在观看流，或者您正在观看录音

595
01:03:39,079 --> 01:03:47,159
计算机或UH连接到单个服务器，该服务器正在向所有人发送数据，但是

596
01:03:47,159 --> 01:03:52,920
内饰类似于右边的更多内容，呃，在图表中，每个人都连接

597
01:03:52,920 --> 01:03:58,839
每个人都不是真正真实的嗯，您与某些节点连接在一起

598
01:03:58,840 --> 01:04:05,400
对于某些等，您可以连接到每个人，但是每个节点可以连接到数十个或数百个

599
01:04:05,400 --> 01:04:11,640
在不同的同龄人中，我们称他们为同龄人，因为他们在相同的层面上，这样

600
01:04:11,640 --> 01:04:18,440
以太坊网络没有任何主人没有任何大师，没有单一的失败点

601
01:04:18,440 --> 01:04:25,720
所以呃，它有嗯，它在同一级别上都有所有的节点，每个人的同伴都可以说话

602
01:04:25,719 --> 01:04:32,919
彼此之间可以连接，因此您的客户会发现他周围的节点连接

603
01:04:32,919 --> 01:04:40,119
向他们和通过特定层交换八卦数据，这样，是的

604
01:04:40,119 --> 01:04:46,119
向您展示该块的外观如何使用此共识执行客户端连接uh这不是

605
01:04:46,119 --> 01:04:50,519
在左边合并之前的真实您会在合并证明之前看到旧以太坊

606
01:04:50,519 --> 01:04:57,639
信标链和以太坊的职业以太坊基本上是分开的

607
01:04:57,639 --> 01:05:04,039
单独的网络信标连锁店正在研究以太坊的存款合同

608
01:05:04,039 --> 01:05:11,320
经过验证的数据，但是以太坊本身没有学会任何人都没有使用任何大引擎

609
01:05:11,320 --> 01:05:20,519
中间的方式是合并的时刻

610
01:05:20,519 --> 01:05:25,880
图层成为信标链块的一部分，因此在执行层中我们有UH

611
01:05:25,880 --> 01:05:31,080
我们有交易数据，您会看到从零到n的所有交易，它们是他们

612
01:05:31,080 --> 01:05:37,000
在默克尔树上，它们的根部位于标题UM中，该标题的哈希是

613
01:05:37,000 --> 01:05:46,119
整个块的哈希，对吗？信标连锁店现在，您会看到它拥有所有的

614
01:05:46,119 --> 01:05:54,280
证明，证明为零至n，因此确认这一点的签名

615
01:05:55,159 --> 01:06:03,559
执行层块，此事务数据，该块已验证，然后存放并退出

616
01:06:03,559 --> 01:06:12,119
来自验证者嗯，是的，这就是正确的嗯，是的

617
01:06:12,119 --> 01:06:18,039
UH箭头指向左侧，现在我意识到它看起来有点混乱，但是

618
01:06:18,039 --> 01:06:23,400
当然，这是一个区块链，就在我们哈希中的区块链中，我们包括

619
01:06:23,400 --> 01:06:29,320
上一个块的哈希，因此此块引用了上一个uh uh so y so

620
01:06:29,320 --> 01:06:33,880
在这里，您可以通过交易的执行数据看到今天的块的样子

621
01:06:33,880 --> 01:06:42,120
信标链内的数据，现在是的，所以这是这个小问题

622
01:06:42,120 --> 01:06:49,720
像这些客户端中实现的所有这些端口一样，执行节点实际上是

623
01:06:49,720 --> 01:06:55,400
用某些语言作为实际程序编写，您可以直接运行，这是全部的重点，所以

624
01:06:55,400 --> 01:07:01,240
是汇聚在一起的地方，这是您使用理论的方式，因此，如果您想成为以太坊用户

625
01:07:01,240 --> 01:07:08,440
这意味着您可以私下私人信任地使用以太坊，您经营其中一些客户

626
01:07:08,440 --> 01:07:14,840
验证网络中的数据并让您与之互动，让您连接到UM

627
01:07:15,800 --> 01:07:21,400
到实际以太坊网络发送交易以读取其数据而不进入各方的数据是

628
01:07:21,400 --> 01:07:22,599
这实际上是以太坊。

629
01:07:23,059 --> 01:07:28,039
因此，我图表中最底部的执行层的执行层的实现

630
01:07:28,039 --> 01:07:33,360
在Go中是Goethereum，没关系。

631
01:07:34,539 --> 01:07:35,420
Bessu在Java，

632
01:07:36,220 --> 01:07:40,059
埃尔贡（Ergon）最初被存储为涡轮螺旋体，

633
01:07:40,200 --> 01:07:41,700
作为Goethereum的叉子，

634
01:07:41,700 --> 01:07:45,180
但是后来开发了非常独特的建筑，

635
01:07:46,220 --> 01:07:49,240
但是仍然保留了GO代码基础的一部分，

636
01:07:49,960 --> 01:07:51,139
或者它仍在

637
01:07:51,400 --> 01:07:57,880
红色UH用生锈写，基本上是使用自大的建筑蚕

638
01:07:57,880 --> 01:08:04,760
呃，吧，嗯，这是一个α红色，就像顶部的四个已经准备好了

639
01:08:04,760 --> 01:08:11,400
网络网络由第一个计算机的实例组成

640
01:08:11,400 --> 01:08:17,399
第二行中的行红色是uh在alpha中有些人正在运行它，但就像

641
01:08:17,399 --> 01:08:22,279
您知道不建议用于生产蚕的生产仍在开发中

642
01:08:22,279 --> 01:08:27,559
以更模块化的方式实现数组体系结构，然后有以太坊JS

643
01:08:27,559 --> 01:08:35,319
是在JavaScript打字条中，嗯，这更多是用于UM的实验客户端

644
01:08:35,319 --> 01:08:42,199
用于验证规格等的测试，然后在共识层侧面的上部

645
01:08:42,199 --> 01:08:48,039
驱动着验证者的共识，这些都是生产的或

646
01:08:48,039 --> 01:08:55,239
从java中的灯塔和灯塔和Rust Teco的降低

647
01:08:56,519 --> 01:09:02,599
UH Nimbus和Neiman Roadster在打字稿中，还有其他客户

648
01:09:02,599 --> 01:09:06,279
生产正在开发，有一个专有客户

649
01:09:06,279 --> 01:09:11,559
数据公约中的大脑，在Lambda类开发的Elixir中有一个客户，也是

650
01:09:11,560 --> 01:09:16,840
就像在生产中一样

651
01:09:16,840 --> 01:09:22,200
是否准备好了，您实际上可以去他们的存储库了解了有关它们的知识，因为正如我所说

652
01:09:22,200 --> 01:09:27,240
在所有这些都是免费的和开源之前，因此您实际上可以查看客户端代码

653
01:09:27,240 --> 01:09:31,720
基础以确保您知道他们遵循可以在那里贡献的规格

654
01:09:33,640 --> 01:09:39,320
并确保网络的安全稳定性，这些客户需要

655
01:09:39,319 --> 01:09:45,399
进行测试需要进行大量测试，因为网络在那里运行良好

656
01:09:45,399 --> 01:09:51,960
金钱和人民的资金等等，所以我们不能只知道你鲁ck和

657
01:09:53,479 --> 01:09:59,799
嗯，我们大量测试这些客户的客户团队开发人员和其他测试

658
01:09:59,799 --> 01:10:06,840
专门用于测试和安全的团队始终是uh，尤其是之前

659
01:10:06,840 --> 01:10:12,440
这些艰苦的升级正在对客户进行大量测试。所以首先，有

660
01:10:12,440 --> 01:10:19,720
以太坊测试，这只是一个基本的状态过渡测试，例如基本测试集

661
01:10:19,720 --> 01:10:27,079
客户应该通过。这来自原始的以太坊设计

662
01:10:27,079 --> 01:10:31,480
只有一层，而不是共识层，因此它仅测试执行层，

663
01:10:31,479 --> 01:10:41,019
类似于基于规格的执行规格测试。

664
01:10:41,559 --> 01:10:47,899
非常有趣，非常重要的是蜂巢，一个在中间，下中间。

665
01:10:48,419 --> 01:10:53,859
Hive是一种端到端线束工具。

666
01:10:54,179 --> 01:10:56,719
这就像一个巨大的工具，可以让您做所有事情。

667
01:10:56,720 --> 01:11:04,640
它可以与其中的不同客户端旋转网络，并通过不同的测试一起运行它们

668
01:11:04,640 --> 01:11:11,280
嗯，有许多模拟可以使用它运行，并且它创造了真正的复杂和嗯

669
01:11:11,280 --> 01:11:19,520
强大的UH测试工具UH Kurtosis uh还可以让您喜欢创建一个不同的本地测试网

670
01:11:19,520 --> 01:11:25,760
客户，然后是模糊的，就像在大量测试不同的边缘案例一样

671
01:11:26,720 --> 01:11:30,440
马里奥正在对客户的不同部分进行模糊，

672
01:11:30,440 --> 01:11:33,760
然后其他测试，例如基准测试，应力测试，

673
01:11:33,760 --> 01:11:37,920
确保如果我们部署大量

674
01:11:37,920 --> 01:11:40,600
验证者或大量的验证者或

675
01:11:40,600 --> 01:11:42,820
它会腹部倒闭吗，它可以生存吗？

676
01:11:42,820 --> 01:11:44,480
如果它创造了巨大的障碍怎么办，

677
01:11:44,480 --> 01:11:46,600
客户可以处理吗？

678
01:11:46,600 --> 01:11:49,140
测试实际性能，

679
01:11:49,140 --> 01:11:50,720
客户的功能。

680
01:11:50,720 --> 01:11:53,760
阴影叉是非常重要的测试零件。

681
01:11:53,760 --> 01:12:03,560
这些就像Devops一样，就像我们参与网络的方式一样，就像更高级的测试一样。

682
01:12:03,560 --> 01:12:16,400
我们采用的是20个客户，这些客户与主网同步，然后我们将其固定在生产中。

683
01:12:16,640 --> 01:12:22,800
但是他们只是创建自己的叉子网络。

684
01:12:22,800 --> 01:12:24,680
我们看到发生了什么。

685
01:12:25,079 --> 01:12:26,860
在这种情况下，我们在左边看到

686
01:12:26,960 --> 01:12:30,820
您会看到这些客户中的两个或四个

687
01:12:30,820 --> 01:12:38,100
或客户对在阴影叉期间下降。

688
01:12:39,960 --> 01:12:42,400
是的，客户测试当然

689
01:12:42,560 --> 01:12:46,340
就像客户自己测试客户一样

690
01:12:46,340 --> 01:12:49,340
并像连续整合一样

691
01:12:49,340 --> 01:12:55,840
他们可以测试每个PR，每个对代码的提交。

692
01:12:56,739 --> 01:13:00,119
因此，要重申我在这里描述的内容，

693
01:13:00,440 --> 01:13:02,520
以太坊的创建方式以及如何

694
01:13:02,900 --> 01:13:06,360
也许以太坊以外的一切，

695
01:13:06,500 --> 01:13:08,440
但是以太坊中的这些过程如何工作

696
01:13:08,440 --> 01:13:11,460
是我们从一些想法开始，一些一般描述，

697
01:13:11,760 --> 01:13:15,800
然后需要研究其可行性，

698
01:13:16,159 --> 01:13:18,340
为了有效性。

699
01:13:18,340 --> 01:13:25,960
我们弄清楚如何以某种可行的实用方式使这个想法实际上是根据的

700
01:13:25,960 --> 01:13:32,619
指定的uh规范是在软件中实现的，该软件被测试，然后

701
01:13:32,619 --> 01:13:40,840
它被拒绝了，因为没人喜欢它，这确实是一件像许多人一样的事情

702
01:13:40,840 --> 01:13:46,000
这些东西在mainnet上被采用，但这确实是一件事情

703
01:13:46,000 --> 01:13:51,119
如果您是以太坊研究人员开发人员，您可以像我知道的那样花几年的时间

704
01:13:51,119 --> 01:13:57,100
就像三年或更长时间的单一升级以太坊的单一升级一样，这真的很好

705
01:13:57,100 --> 01:14:01,960
而且有用，但是它有一些边缘案例或其他东西，因此它仍然没有被采用

706
01:14:01,960 --> 01:14:09,460
而且您必须回来您从此图表上的任何一点回来，您可能会拒绝，并且

707
01:14:09,460 --> 01:14:15,279
回到研究您的想法您可能未能进行测试，您需要修复您的实施或

708
01:14:15,279 --> 01:14:20,800
实施不正确遵循规格，您需要您需要

709
01:14:20,800 --> 01:14:30,000
要解决这个问题，是的，就像一个非常迭代的循环一样，就像它总是一个uh两个

710
01:14:30,000 --> 01:14:36,000
向前迈出一步，假设嗯，这并不容易，所以现在您可能会问好的

711
01:14:36,000 --> 01:14:42,800
所有这些不同的开发人员的整个过程如何工作

712
01:14:42,800 --> 01:14:45,820
所以我向您展示了在这里，不同的客户，对吗？

713
01:14:45,820 --> 01:14:48,340
有五个，很抱歉，

714
01:14:48,680 --> 01:14:52,039
此页面上有七个客户，这里有五个客户。

715
01:14:52,100 --> 01:14:54,039
我提到了正在开发的其他一些。

716
01:14:54,460 --> 01:14:58,119
因此，我们拥有这些测试团队，客户团队，研究团队。

717
01:14:58,260 --> 01:15:01,279
总的来说，它基本上就像20个不同的团队，

718
01:15:01,600 --> 01:15:02,739
大约20个不同的团队，

719
01:15:02,860 --> 01:15:06,220
就像这些不同团队的200个人一样

720
01:15:06,220 --> 01:15:09,340
并独立于以太坊工作。

721
01:15:09,560 --> 01:15:11,520
所以问题是他们如何协调，

722
01:15:11,520 --> 01:15:16,780
我们有可能发货，我们有可能就以太坊的外观达成共识。

723
01:15:17,220 --> 01:15:21,180
因此，首先，有很多部分。

724
01:15:21,600 --> 01:15:22,720
我将从底部开始。

725
01:15:22,960 --> 01:15:27,220
ETH研究，这是一个论坛，人们发布了他们的想法。

726
01:15:27,420 --> 01:15:32,920
人们在前两个类别中发布一些内容。

727
01:15:32,920 --> 01:15:40,899
因此，当我看到以太坊中的某些问题或一些缺失的功能或某些内容

728
01:15:40,899 --> 01:15:49,039
可以更改，调整，我可以将其发布在我的研究结果的研究中，

729
01:15:49,039 --> 01:15:55,380
我的想法和测试方式，我提出的方式，它变得越来越大

730
01:15:55,380 --> 01:15:58,079
在那里讨论。

731
01:15:58,079 --> 01:16:04,399
然后，这些社区建议被正式为我之前提到的EIP。

732
01:16:04,399 --> 01:16:13,340
EIP在Eat Magicians论坛下进行讨论，这是另一个没有讨论的论坛

733
01:16:13,340 --> 01:16:18,380
就像一般研究思想一样，是的，就像饮食研究一样，但是特定的EIP和方式

734
01:16:18,380 --> 01:16:22,640
他们被指定。

735
01:16:22,640 --> 01:16:26,680
然后像EIP一样，这是关于EIP本身的过程。

736
01:16:26,680 --> 01:16:31,200
因此，我们也喜欢社区，您知道，编辑EIP并确保您

737
01:16:31,200 --> 01:16:33,980
知道，它们很有意义，它们正式正确。

738
01:16:33,980 --> 01:16:37,420
这主要由CAD遗传社区完成。

739
01:16:37,420 --> 01:16:46,900
他们在EIP系列中还带有视频的窥视，为EIP冠军提供了一个空间

740
01:16:46,900 --> 01:16:50,780
谈论他们的建议。

741
01:16:50,779 --> 01:16:56,059
因此，这些是论坛讨论，公众讨论，很多讨论，很多

742
01:16:56,059 --> 01:16:57,939
协调正在研发不和谐中。

743
01:16:57,939 --> 01:17:06,359
研发不和谐是类似于我们的EPS的服务器，来自许多不同团队的人

744
01:17:06,359 --> 01:17:10,399
参加讨论和更新等。

745
01:17:10,399 --> 01:17:18,319
在研发和不和谐上，您也可以在其中看到开发呼叫的发布。

746
01:17:18,319 --> 01:17:30,239
因此，现在有不同的开发人员呼叫，如果您想了解以太坊中正在发生的事情，则是规则的，也许是最重要的部分。

747
01:17:30,359 --> 01:17:34,420
因此，我们称之为ACD调用，即全核开发人员。

748
01:17:34,779 --> 01:17:40,139
这些都集中在执行层或共识层上，总是像今天一样。

749
01:17:40,140 --> 01:17:55,660
因此，今天晚些时候，将会与可能有50个人，不同团队的代表进行电话，讨论当前的变化以及辛勤工作之前的行动。

750
01:17:55,660 --> 01:18:02,039
因此，目前，最大的话题是计划即将进行的DENEP升级。

751
01:18:02,700 --> 01:18:06,220
我相信今天是客户发行的截止日期。

752
01:18:06,220 --> 01:18:20,960
因此，如果有人没有，那么在这些电话中，他们同意，好吧，这是我们每个团队运输此功能的合理截止日期。

753
01:18:21,440 --> 01:18:26,039
因此，他们交谈，并且能够使用此问题进行协调。

754
01:18:26,039 --> 01:18:32,279
然后并非所有核心开发人员，而是像特定的uh功能一样

755
01:18:32,279 --> 01:18:39,720
到我们看到4844或测试UH测试网时的特定功能的实施者

756
01:18:39,720 --> 01:18:46,359
或在uh上丢失了uh，uh被贬低了，而我们正在部署测试

757
01:18:46,359 --> 01:18:53,079
网或EOF是一个像这样讨论的功能

758
01:18:53,079 --> 01:18:57,079
对于钱包的类似标准，这有点超出协议，但值得一提

759
01:18:57,640 --> 01:19:03,479
嗯，是的，呃，这些是普通的电话，值得关注，这是

760
01:19:03,479 --> 01:19:08,840
a是在这里，协调实际上是在人们喜欢某些想法而不是的情况下发生的

761
01:19:08,840 --> 01:19:14,359
你知道的那个简单的人，我会说争论，因为就像它是文明的

762
01:19:14,359 --> 01:19:20,039
讨论，但仍然可能是一个充满激情的讨论，有时需要花费数周的时间

763
01:19:20,039 --> 01:19:26,199
几个月前，几个月来达成共识，嗯，这很重要的是人们来

764
01:19:26,199 --> 01:19:31,479
从不同的角度来看，不同的背景与不同的团队发表意见和

765
01:19:31,479 --> 01:19:36,680
这是所有公众，您可以在YouTube上流式传输，甚至可以通过加入来参与

766
01:19:36,680 --> 01:19:43,800
R D DISCORD，因此任何人都可以对以太坊核心表达自己的看法，是的，这是协调的

767
01:19:43,800 --> 01:19:50,360
它在PM存储库中，因此您可以看到所有这些调用，呃，它们是安排的，它们是主题

768
01:19:50,360 --> 01:19:56,680
要在那里讨论您可以提出一个主题，因此，在嗯，您可以看到录音

769
01:19:57,320 --> 01:20:05,079
以太坊斜线PM项目存储库中所有以前所有UH会议的记录

770
01:20:06,039 --> 01:20:13,720
这就是看起来像一个生命的人，如果你是假装的话，如果你是呃

771
01:20:13,720 --> 01:20:18,039
工作在某个地方，您知道您可以将其放在屏幕上的YouTube电话，然后像它一样行动

772
01:20:18,840 --> 01:20:25,240
嗯，您已经打电话给UM，是的，除此之外，人们还亲自见面，因为

773
01:20:25,240 --> 01:20:31,400
有时候，您知道面对面说话，然后弄清楚就像动手一样

774
01:20:31,400 --> 01:20:37,400
呃，这是一张著名的图片，嗯，人们正在拍手到第一个uh合并

775
01:20:37,399 --> 01:20:44,679
第一次实际测试了合并实际上尝试实现UH实施的UH

776
01:20:44,679 --> 01:20:54,359
在希腊，是20 20 20，我想呃，没有2021，那是去年一年前

777
01:20:54,359 --> 01:21:01,239
奥地利的人们在4844年再次完成UH撤回工作，例如100

778
01:21:01,239 --> 01:21:09,800
人们在不同的会议上与uh见面的人uh UH专注于UH运送下一件事

779
01:21:10,439 --> 01:21:16,599
嗯，是的，这就是开发人员的协调方式，但问题就像还可以

780
01:21:16,599 --> 01:21:20,679
这些开发人员实际上正在开发他们正在从事的工作

781
01:21:20,679 --> 01:21:27,719
好吧，有研究人员和uh人们提出这些新升级的新功能，UH和UH

782
01:21:27,720 --> 01:21:32,600
当我说的时，有一个宽松的路线图

783
01:21:32,600 --> 01:21:40,920
丢失路线图，您也许看到了这是UH的路线图，UH Vitalik的路线图

784
01:21:40,920 --> 01:21:49,480
使这张美丽的图表使您不知道确定的

785
01:21:49,480 --> 01:21:54,920
以太坊路线图，这并不像这样，这将发生这只是枚举

786
01:21:54,920 --> 01:22:02,199
目前正在处理当前想法的事物中，现在是R D的景观

787
01:22:02,199 --> 01:22:06,680
因为它改变了，嗯，也许我们会弄清楚其中一些盒子实际上没有

788
01:22:06,680 --> 01:22:11,960
适合以太坊的视野或进行一些权衡，等等，我们继续前进

789
01:22:12,840 --> 01:22:19,399
因此，让您知道现在再次发生的事情，就像我对盒子所说的话一样

790
01:22:19,399 --> 01:22:26,439
在我对以太坊的可视化图表中，您可以再次深入研究并成为专家

791
01:22:26,439 --> 01:22:37,239
在这些盒子中的任何一个基本上都是呃，嗯，第一大部分是成功的合并

792
01:22:37,239 --> 01:22:42,359
完成的我们将以太坊与股份证明合并，但是有一些升级

793
01:22:42,920 --> 01:22:48,359
嗯，托有股份的证明，呃，就像单折，最终确定速度更快，以便我们可以

794
01:22:48,359 --> 01:22:55,239
在这种情况下，搜索uh仍在改进最接近的协议

795
01:22:55,239 --> 01:23:02,519
可伸缩性因此，uh启用更多交易的吞吐量，包括实施

796
01:23:02,519 --> 01:23:08,920
点对点实现数据可用性碎片和4244即将到来的斑点

797
01:23:08,920 --> 01:23:16,599
在即将到来

798
01:23:16,600 --> 01:23:23,160
uh的次要可提取价​​值uh，哪些问题可能会引起网络中的某些问题

799
01:23:23,160 --> 01:23:31,640
就像大多数构建基块一样

800
01:23:31,640 --> 01:23:39,160
诸如UH协议构建器分离之类的建议um，还有一些

801
01:23:39,160 --> 01:23:45,720
审查制度等等，uh uh也有提到的uh Staking经济

802
01:23:45,720 --> 01:23:52,039
这也就像UH的股份改进证明UH探索我们如何使用UH

803
01:23:52,600 --> 01:24:01,079
在那里的经济学更有效地分歧是垂直的尝试，因此，正如我之前提到的

804
01:24:01,079 --> 01:24:07,480
当前状态定理是默克尔·帕特里夏（Merkel Patricia UH）

805
01:24:07,480 --> 01:24:13,480
我们已经做了10年了，但是现在有一个关于开发测试的建议

806
01:24:13,479 --> 01:24:20,039
矢量承诺奇迹树，它使用向量uh创建了一个启用uh的树

807
01:24:21,000 --> 01:24:24,599
证人和更简单的证据证明了可以是

808
01:24:25,159 --> 01:24:31,719
嗯，可以启用无状态或更轻松的客户，因此更大的可扩展性UM

809
01:24:33,159 --> 01:24:40,119
清除意味着摆脱技术债务和所有数据，所以像一堆

810
01:24:40,119 --> 01:24:47,880
一堆永远不会使用的旧数据，但客户端需要节点

811
01:24:47,880 --> 01:24:56,439
要持有它，所以我们可以实际上可以对UH有一些改进，uh拥有旧数据

812
01:24:56,439 --> 01:25:05,720
过期的uh挥霍在那里，其余的像EVM改进uh vdfs等

813
01:25:05,720 --> 01:25:09,960
简短的概述，让您了解不同的曲目中发生的事情不同的冲动

814
01:25:09,960 --> 01:25:17,079
以太坊最终，所有这些都试图与这个三角形的怪物作斗争

815
01:25:17,800 --> 01:25:23,480
也许您以前看到了，这是区块链本身的问题，因为

816
01:25:23,480 --> 01:25:32,199
好吧，以太坊的重点是要成为这个分布式的分散网络

817
01:25:32,199 --> 01:25:39,000
是安全的，可以使我以前说的权力下放，以使这些客户之一

818
01:25:39,000 --> 01:25:45,159
实际使用以太坊以一种无信任和安全的方式运营这些客户之一，并且

819
01:25:45,159 --> 01:25:52,760
可以使用UH验证UH，因此这意味着您需要实际验证数据

820
01:25:52,760 --> 01:25:59,800
在网络中，因此，如果我想使用以太坊，我会使用自己的客户端来验证所有历史记录

821
01:25:59,800 --> 01:26:08,640
当前状态。但是，需要数百千兆字节的数据和数十个小时

822
01:26:08,640 --> 01:26:17,400
CPU时间。因此，在笔记本电脑上运行非常沉重。如果我们放置了更多数据，哪个需要

823
01:26:17,400 --> 01:26:22,380
当然要验证，它变得越来越重。如果我们继续这样做，那就变成了

824
01:26:22,380 --> 01:26:29,980
成倍沉重，最终只有几个单一的UH机构

825
01:26:29,980 --> 01:26:36,060
运行这些节点，这将是集中的，这会给我们带来单个失败点，所以

826
01:26:37,180 --> 01:26:43,340
以太坊需要被分散的以太坊正在限制它，它限制了它的链子

827
01:26:44,140 --> 01:26:50,940
活动到您可以在Raspberry Pi上运行这些客户中的一个

828
01:26:50,939 --> 01:26:59,659
便宜的低功率100200磅设备加上SSD呃，所以是的，这就是重点，现在是什么

829
01:26:59,659 --> 01:27:04,539
我们这些研究人员的战斗当然是不同的问题，但这是很大的一部分

830
01:27:04,539 --> 01:27:11,739
它能够无信任地运行以太坊，同时允许更多数据

831
01:27:11,739 --> 01:27:19,979
加工在这里的困境中有点像矛盾，但是有uh概述的方式

832
01:27:19,979 --> 01:27:27,419
在这里可以改善它的搜索um是的

833
01:27:27,419 --> 01:27:31,500
是的，所以这里有许多不同的改进

834
01:27:31,500 --> 01:27:38,699
我们可以解决并最终可以修复，您可能会认为这是一个无限的

835
01:27:38,699 --> 01:27:45,579
打架它是一个婴儿花园，嗯

836
01:27:45,579 --> 01:27:52,539
维护花园和嗯，这有些真实，就像我相信以太坊核心协议是花园

837
01:27:52,539 --> 01:27:59,100
总是需要一些园丁，有些人来照顾它，现在需要

838
01:27:59,100 --> 01:28:07,340
扩展和修复许多事情，您知道您可以解决很多问题，以获取一些问题

839
01:28:07,340 --> 01:28:13,100
但是，更好的状态在某一时刻将有美丽的花园，只需要维护

840
01:28:13,100 --> 01:28:18,780
在那一刻那是骨化的嗯，我希望我相信我们是

841
01:28:18,780 --> 01:28:27,660
旨在与Uh Ethereum更喜欢一些最终设计

842
01:28:27,660 --> 01:28:35,820
更改仅对更新进行少量维护，因此这是理想的最终游戏，但是

843
01:28:35,820 --> 01:28:42,620
仍然是一个婴儿角落

844
01:28:42,619 --> 01:28:49,099
骨化的这一点并没有真正改变以太坊嗯，那将是一个美丽的

845
01:28:49,099 --> 01:28:53,979
世界不是这样，维塔利克会很高兴我们需要让他快乐的家伙，所以

846
01:28:53,979 --> 01:28:59,019
是的，如果您对所有这些都感到兴奋，请对此感到兴奋

847
01:28:59,019 --> 01:29:06,859
进展正在发生不同的客户发展，呃，您是研究

848
01:29:06,859 --> 01:29:11,899
在正确的位置，您在EPF研究小组中可以学习所有有关它的知识，但是是的

849
01:29:11,899 --> 01:29:18,059
现在，当您到达这里时，您可以做什么，所以我相信我提供了很多

850
01:29:18,059 --> 01:29:25,099
我现在可以从本演示文稿中看到一些资源的资源。

851
01:29:25,099 --> 01:29:33,819
他们所有人都在Wiki中的UH中，一个Wiki，当我说资源时

852
01:29:33,819 --> 01:29:40,139
我的意思是，只是您知道我向您展示的图表，并且正在解释不同的图片

853
01:29:40,140 --> 01:29:46,460
您可以开始潜入这些客户的一部分您可以了解更多有关它的信息

854
01:29:46,460 --> 01:29:53,100
相关相关的连接文档并分享它们以在不和谐和

855
01:29:53,100 --> 01:30:04,140
在Wiki中更新它们，以便您可以找到使您更感兴趣的原因

856
01:30:04,140 --> 01:30:10,860
您的利基是您的专业知识是什么

857
01:30:10,860 --> 01:30:16,460
在您看到这台机器的怪物时，没有正确提及

858
01:30:16,460 --> 01:30:24,060
这些不同的uh路线图点，或者如果您看到以太坊，呃，这里有很多部分

859
01:30:24,060 --> 01:30:29,740
而且测试等

860
01:30:29,739 --> 01:30:34,359
没有一个人会成为整个以太坊的开发人员，

861
01:30:34,760 --> 01:30:38,599
但这一直是其中一些部分的专家

862
01:30:38,599 --> 01:30:40,420
或像执行或共识一样。

863
01:30:41,079 --> 01:30:44,639
这就是模块化使我们喜欢关注的目标。

864
01:30:44,739 --> 01:30:45,679
您更喜欢什么？

865
01:30:45,779 --> 01:30:48,279
您发现最重要，令人兴奋的是什么？

866
01:30:48,279 --> 01:30:51,779
而且，也许您有一些才华。

867
01:30:52,300 --> 01:30:54,800
是的，专注于此。

868
01:30:54,960 --> 01:30:56,179
找到您的利基市场并做出贡献。

869
01:30:56,380 --> 01:30:59,019
找到这些资源，写更多文档

870
01:30:59,020 --> 01:31:00,520
并将其上传到Wiki，

871
01:31:00,640 --> 01:31:02,360
打开公关，学习如何使用git，

872
01:31:02,740 --> 01:31:04,600
了解如何实际贡献

873
01:31:04,600 --> 01:31:05,980
到开源项目

874
01:31:05,980 --> 01:31:09,320
通过为我们的免费开放Wiki做出贡献。

875
01:31:10,120 --> 01:31:11,700
已经有一些公关开放。

876
01:31:11,820 --> 01:31:13,440
如果您在这里，那些打开它的家伙，

877
01:31:13,480 --> 01:31:14,080
太感谢了。

878
01:31:14,500 --> 01:31:16,380
你知道，会慢慢审查

879
01:31:16,380 --> 01:31:18,140
您可以看到PR

880
01:31:18,140 --> 01:31:19,540
已经打开的

881
01:31:19,540 --> 01:31:20,800
并在那里做出贡献。

882
01:31:20,920 --> 01:31:23,620
也许给您，在那里添加一些内容

883
01:31:23,620 --> 01:31:25,240
或添加您的想法，

884
01:31:25,240 --> 01:31:27,400
好的，也许应该以不同的方式写这件事，等等。

885
01:31:27,399 --> 01:31:29,159
是的，开始贡献。

886
01:31:30,559 --> 01:31:36,979
是的，您可以在这一点上喜欢四个EPF队列。

887
01:31:37,479 --> 01:31:48,339
您可以在我们用于Wiki的同一GitHub组织中的所有先前人群中找到项目。

888
01:31:48,339 --> 01:31:56,719
因此，在IT协议中，遵循第四个队列，第三个队列，在Slash Project，项目目录中，您会看到所有已在进行的项目。

889
01:31:56,720 --> 01:31:58,280
按照以下内容。

890
01:31:58,480 --> 01:31:59,960
现在我提到的

891
01:31:59,960 --> 01:32:00,500
在开始

892
01:32:00,500 --> 01:32:03,579
该程序受EPF的启发

893
01:32:03,579 --> 01:32:05,060
是因为这些人

894
01:32:05,060 --> 01:32:06,880
花前几周，

895
01:32:06,980 --> 01:32:09,520
奖学金计划的头几个月

896
01:32:09,520 --> 01:32:11,340
了解协议

897
01:32:11,340 --> 01:32:12,520
关于他们的利基，

898
01:32:12,619 --> 01:32:13,360
关于他们的领域。

899
01:32:13,880 --> 01:32:15,880
如果您阅读了他们的项目，

900
01:32:15,880 --> 01:32:16,440
如果您阅读，

901
01:32:16,560 --> 01:32:17,780
他们每周写更新。

902
01:32:17,920 --> 01:32:19,579
您可以每两周看到

903
01:32:19,579 --> 01:32:21,420
或每周文件

904
01:32:21,420 --> 01:32:23,579
由许多才华横溢的人撰写

905
01:32:23,579 --> 01:32:25,100
谁一直在学习以太坊

906
01:32:25,100 --> 01:32:26,500
或其中的不同部分。

907
01:32:26,720 --> 01:32:33,020
您可以看到他们的学习曲线，您可以看到他们一直在做什么，也许

908
01:32:33,020 --> 01:32:38,220
找到他们在那里提到的资源，将他们带到Wiki学习

909
01:32:38,220 --> 01:32:42,619
从他们那里，您可以遵循他们的道路，因为这就是他们创建它的原因，这就是为什么我们

910
01:32:42,619 --> 01:32:49,140
让它公开公开，以便您可以学习它，您可以了解他们的项目并

911
01:32:49,140 --> 01:32:57,700
他们的旅程是的，是的，是的，我相信那是所有人

912
01:32:57,700 --> 01:33:05,600
一周的演示文稿UH现在已经有了第二周的资源

913
01:33:05,600 --> 01:33:11,860
我们将使用轻型植物潜入执行层，但在此之前请查看

914
01:33:11,860 --> 01:33:18,680
第一周的更多资源和本周两部分的一些预读，是的

915
01:33:18,680 --> 01:33:24,700
已经90分钟了，我所有的时间都花了很多时间

916
01:33:25,140 --> 01:33:30,640
因此，如果有的话，让我们花五分钟的时间来解决一些问题，然后将其包裹起来，

917
01:33:32,900 --> 01:33:39,920
是的，哦，哦，非常感谢，乔什，我们有任何疑问，

918
01:33:39,920 --> 01:33:50,319
嗯，所有的所有UM uh链接，所以在这里屏幕截图，这是一个降价的怪物

919
01:33:50,319 --> 01:34:00,720
表明他在那里分享了他的uh uh uh嗯，嗯，嗯，所有这些每周更新，所以你可以

920
01:34:00,720 --> 01:34:06,079
查看斜线项目中的一个人，您可以看到该人一直在从事的项目

921
01:34:06,079 --> 01:34:10,800
如果您感兴趣，就像我不知道对灯塔客户的贡献

922
01:34:10,800 --> 01:34:16,559
uh的隐身创建解决了一个新的信标API的创建，因此，如果您对此感兴趣

923
01:34:16,559 --> 01:34:22,720
那里的不同项目您可以在本周更新中看到该人的旅程

924
01:34:24,399 --> 01:34:29,439
是的，真棒嗯

925
01:34:29,439 --> 01:34:38,000
如果有任何疑问，还有更多评论，请随时继续前进。

926
01:34:38,000 --> 01:34:40,779
我认为我们还有一些时间。

927
01:34:40,779 --> 01:34:47,539
看起来现在有几个人在打字，但我没有看到任何问题

928
01:34:47,539 --> 01:34:52,979
目前来。

929
01:34:52,979 --> 01:35:06,179
因此，它的历史是F之前缺少F。

930
01:35:06,179 --> 01:35:10,379
正是我要做的。

931
01:35:10,379 --> 01:35:16,199
不，我不，我只是，我昨天只是在发短信，他是我的朋友，

932
01:35:16,199 --> 01:35:22,399
我在这里有偏见，我推向了那里的f部分。

933
01:35:22,399 --> 01:35:27,339
无论如何，如果现在没有问题，我的相机不起作用。

934
01:35:29,279 --> 01:35:30,839
不，这太可怕了。

935
01:35:31,839 --> 01:35:33,739
无论如何，如果现在没有问题，

936
01:35:33,739 --> 01:35:37,899
请随时随时在不和谐中使用我。

937
01:35:38,379 --> 01:35:39,939
我在这里为你们。

938
01:35:42,159 --> 01:35:44,579
对我来说是早晨，所以一天的余下时间，

939
01:35:44,920 --> 01:35:47,559
我想我准备回答您的问题。

940
01:35:47,699 --> 01:35:51,439
可以随意将它们放入此线程或相应的通道中。

941
01:35:51,439 --> 01:35:55,719
在左侧，您会看到协议Wiki部分，其中具有不同部分的部分。

942
01:35:55,960 --> 01:36:00,879
因此，请随时询问您是否有什么。

943
01:36:01,259 --> 01:36:01,379
是的。

944
01:36:02,019 --> 01:36:02,460
是的。

945
01:36:02,460 --> 01:36:03,719
非常感谢您的宝贵时间。

946
01:36:04,039 --> 01:36:05,139
我真的很感激。

947
01:36:05,219 --> 01:36:06,399
你们中的许多人出现了。

948
01:36:06,539 --> 01:36:09,099
我不得不为此醒来，所以我真的很感激。

949
01:36:09,199 --> 01:36:11,679
我想醒来的某个地方或至少，就像

950
01:36:11,739 --> 01:36:14,259
这么早就对这么多人进行公开谈话。

951
01:36:17,699 --> 01:36:18,139
惊人的。

952
01:36:18,139 --> 01:36:19,219
非常感谢，马里奥。

953
01:36:19,220 --> 01:36:25,460
这再次是一次很棒的演讲，这次我们肯定会记录下来。

954
01:36:25,460 --> 01:36:32,220
所以，是的，对于那些没有抓住这两次的人，

955
01:36:32,420 --> 01:36:38,579
您可以在录音中看到它，我们将在下周一回来

956
01:36:38,579 --> 01:36:45,960
在执行层上的第二周内容中，列克莱恩的内容。

957
01:36:45,960 --> 01:36:56,640
是的，谢谢你们在星期一下午4点见到你，我相信是的，太棒了，谢谢

958
01:36:56,640 --> 01:36:57,020
好的

959
01:36:57,020 --> 01:37:00,760
再见

960
01:37:15,960 --> 01:37:16,460
你

