1
00:00:30,000 --> 00:00:59,980
谢谢。

2
00:01:00,000 --> 00:01:29,980
谢谢。

3
00:01:30,000 --> 00:01:59,000
¶¶

4
00:02:00,000 --> 00:02:10,000
¶¶

5
00:02:10,000 --> 00:02:20,000
¶¶

6
00:02:20,000 --> 00:02:30,000
¶¶

7
00:02:30,000 --> 00:02:59,979
我爱你。

8
00:03:00,000 --> 00:03:29,979
谢谢。

9
00:03:30,000 --> 00:03:59,979
谢谢。

10
00:04:00,000 --> 00:04:12,039
好的，欢迎回到以太坊协议研究小组。

11
00:04:12,599 --> 00:04:20,800
今天，我们从Mario进行了有关如何运行节点的特别演讲。

12
00:04:20,800 --> 00:04:31,280
深入了解硬件和运行节点的过程，然后我们将拥有

13
00:04:31,280 --> 00:04:38,939
在他进行演示如何设置并开始运行之后，很多次提出问题

14
00:04:38,939 --> 00:04:47,379
测试网是的

15
00:04:47,379 --> 00:05:17,360
跑步研讨会。是的，这里有很多打扰。终于是时候将事情放在实践中了，这是很多理论知识，关于协议架构或关注执行层等的很多讨论等。但是，今天，我想向您展示它的实际工作方式，我们如何将其付诸实践。所以我，如果你还记得我

16
00:05:17,360 --> 00:05:23,360
我问你，什么是以太坊？这是协议，是爱，这是未来，

17
00:05:23,360 --> 00:05:28,160
现在我们将成为所有事物，我们将通过实际运行它来成为以太坊

18
00:05:28,160 --> 00:05:34,240
使用它。所以这很令人兴奋。是的，无论如何，它像相机一样超级苍白。

19
00:05:35,280 --> 00:05:38,960
我还在观看问题，随时在不和谐中删除问题，

20
00:05:38,959 --> 00:05:42,199
有专门的线程。

21
00:05:42,199 --> 00:05:47,519
但是，其中一部分可以跟随研讨会。

22
00:05:47,519 --> 00:05:52,639
所以我要做的就是一个人弄清楚它，

23
00:05:52,639 --> 00:05:56,199
因为我这样做大概每周不止一次

24
00:05:56,199 --> 00:05:57,959
但这仍然适合您。

25
00:05:57,959 --> 00:06:02,359
有很多不同的客户，我记得所有的旗帜和所有壁ni。

26
00:06:02,359 --> 00:06:07,799
因此，您知道，我将要去安装并在此处运行。

27
00:06:07,800 --> 00:06:13,079
房间，您可以跟随我的工作，您可以自己尝试。如果您遇到任何问题

28
00:06:13,079 --> 00:06:18,199
我无法在研讨会期间回答，之后我们将有时间。之后

29
00:06:18,199 --> 00:06:28,040
结束，如果您愿意，它将切换到Jitsi进行更多的交互式会话，如果您想分享

30
00:06:28,040 --> 00:06:33,759
您的屏幕和故障排除，因为这里只有我将共享我的屏幕。我也带来了

31
00:06:33,759 --> 00:06:40,920
如果我的麦克风遇到了这种麻烦，我可以与手机联系在一起，以便我们以后可以对其进行测试。

32
00:06:40,920 --> 00:06:45,099
首先，我将分享我的屏幕。

33
00:06:45,099 --> 00:06:47,980
是的，很棒，很棒。

34
00:06:47,980 --> 00:06:54,819
因此，您正在查看的是Debian 12虚拟机。

35
00:06:54,819 --> 00:06:58,399
因此，实际上，让我们从基础知识开始。

36
00:06:58,399 --> 00:07:05,919
让我们开始进入研讨会大纲，以便我知道我应该谈论什么

37
00:07:05,919 --> 00:07:08,199
因为我在这里概述了这一切。

38
00:07:08,799 --> 00:07:11,539
是的，让我们从介绍开始。

39
00:07:12,719 --> 00:07:16,699
是的，这是拥有您需要的所有资源的文档。

40
00:07:17,419 --> 00:07:22,939
您只需单击即可进入这里的所有位置。

41
00:07:22,939 --> 00:07:32,660
但是，让我们从简短的回顾开始，了解我们在研究金中讨论的内容，我相信

42
00:07:32,660 --> 00:07:38,240
您在研究小组中，因为我确定您的人们了解节点是什么，什么是

43
00:07:38,240 --> 00:07:40,339
客户在这一点上。

44
00:07:40,339 --> 00:07:46,000
只是回顾一下，就像为什么要这样做，这是使用以太坊，对吗？

45
00:07:46,000 --> 00:07:52,879
因此，我们将采用实际实施的规范和以太坊的所有行为

46
00:07:52,879 --> 00:08:00,959
应该这样做，我们将自己执行它，这意味着会有不同的

47
00:08:00,959 --> 00:08:06,100
阶段，客户正在做的不同操作，当然是客户对，

48
00:08:06,100 --> 00:08:09,540
因此，有执行和共识客户端。

49
00:08:09,540 --> 00:08:17,220
现在，您为什么要作为一个人这样做是能够真正使用以太坊。

50
00:08:17,860 --> 00:08:27,120
如果您使用的是钱包，如果您正在开发智能合约，则无论如何您都与以太坊进行互动，例如在博客资源管理器上检查交易

51
00:08:27,120 --> 00:08:33,000
您一直在使用一些第三方提供商，钱包，RPC提供商等。

52
00:08:33,180 --> 00:08:38,220
您信任别人对以太坊当前状态的看法的节点。

53
00:08:38,220 --> 00:08:59,300
但是，这样，您可以运行自己的客户端，您知道，只需以一种无信任的方式进行操作，因为它是免费的，开放的软件，因此您可以准确地看到正在执行的内容，正在执行什么，您可以在上面验证链条上的链条基本上是您自己的机器。

54
00:08:59,299 --> 00:09:10,199
现在，第一件事是选择客户对，选择什么节点的实际组合

55
00:09:10,199 --> 00:09:16,159
我们想要，在您得知有很多的几周内，我们想要什么客户实施

56
00:09:16,159 --> 00:09:27,600
他们中的一个很好的概述是与所有不同的执行客户端不同的概述

57
00:09:28,399 --> 00:09:34,959
共识客户是的，也是运行它们的提示，我们稍后可能会使用此信息

58
00:09:34,959 --> 00:09:40,079
因为它充满了很棒的技巧，并且基本上解释了整个过程，还有一些

59
00:09:40,080 --> 00:09:48,720
每个客户端的简单最小命令，因此如何选择客户uh是阅读他们的一些

60
00:09:48,720 --> 00:09:56,720
他们的一些UM基本文档可能在这里，但这还取决于您是否想

61
00:09:58,400 --> 00:10:02,320
将您的时间投入特定的语言和特定的代码基础，例如您

62
00:10:02,879 --> 00:10:07,920
Java开发人员，因此您可能会更适合您的最佳状态，因为您了解它的方法

63
00:10:07,919 --> 00:10:12,959
更多，等等。因此，语言是一回事。另一部分是客户多样性。这是

64
00:10:12,959 --> 00:10:25,039
如果您要长期运行主节点或使用运行验证器，那么更重要的是

65
00:10:28,159 --> 00:10:32,879
我们不会真正关心这个

66
00:10:32,879 --> 00:10:43,120
这里。我决定出于默认情况下使用它，原因有两个。首先，它是出于某种原因，

67
00:10:43,120 --> 00:10:49,519
因为它易于使用，所以它运行良好，因此不会有任何惊喜。这是其中的一部分

68
00:10:49,519 --> 00:10:54,000
像简单的配置一样，它也具有非常好的日志。它确实很好地解释了它是什么

69
00:10:54,000 --> 00:10:59,919
实际上，我们可以从中学习。当然，如果我们有额外的时间，我们将

70
00:10:59,919 --> 00:11:07,839
将其交换为另一个客户。组合不必相同。这是同一件事

71
00:11:07,839 --> 00:11:12,879
用不同的语言实施。如果您没有适当的测试，那可能会引起麻烦，但是

72
00:11:12,879 --> 00:11:18,879
正如第四周解释的那样，我们进行了非常强大的测试，可确保所有不同

73
00:11:18,879 --> 00:11:26,319
客户应该互相交谈。它可以在手臂上工作吗？当然，它可以运行手臂。不同的

74
00:11:26,320 --> 00:11:32,379
客户为不同架构提供二进制文件，但您也可以自己编译

75
00:11:32,379 --> 00:11:34,879
手臂机甚至休息。

76
00:11:34,879 --> 00:11:40,860
但是，是的，是的，第一件事，选择客户对。

77
00:11:41,040 --> 00:11:47,340
所以我建议你们，你可以完全选择我会的灯塔和灯塔，

78
00:11:47,800 --> 00:11:53,360
但是您只能选择任何其他客户。

79
00:11:53,360 --> 00:11:55,820
我会做一些挑战。

80
00:11:56,039 --> 00:11:58,960
就像，我不确定现在有多少人在这里。

81
00:11:59,340 --> 00:12:02,659
但是，您知道，如果我们至少有20个人，

82
00:12:02,800 --> 00:12:06,159
我们应该能够像每个客户组合一样运行。

83
00:12:06,600 --> 00:12:10,379
因此，如果您想尝试不同的连击，那将很酷。

84
00:12:10,759 --> 00:12:12,600
就像，随时在聊天中写下，就像

85
00:12:12,620 --> 00:12:15,039
您要尝试什么组合。

86
00:12:15,940 --> 00:12:20,740
当您选择客户时，您将继续使用其文档。

87
00:12:20,740 --> 00:12:29,259
文档，所以在这里学习我有一些示例

88
00:12:29,259 --> 00:12:36,039
是的，所以我们可以阅读要打开灯塔文档，以便在我们的情况下

89
00:12:36,039 --> 00:12:44,860
发行发行，我们在这里去狗，我在您知道在投资之前运行主要节点

90
00:12:44,860 --> 00:12:49,500
硬件等等，我建议研究文档。

91
00:12:49,500 --> 00:12:52,539
如果灯塔，他们有这本灯塔书。

92
00:12:52,539 --> 00:12:58,419
让我们看看从他们的github找到文档有多容易。

93
00:12:58,419 --> 00:12:59,419
这是吗？

94
00:12:59,419 --> 00:13:00,419
不，不是文档。

95
00:13:00,419 --> 00:13:01,419
这些不是文档。

96
00:13:01,419 --> 00:13:02,419
这是灯塔书。

97
00:13:02,419 --> 00:13:03,419
我想知道它在哪里。

98
00:13:03,419 --> 00:13:04,740
在这里，灯塔书。

99
00:13:04,740 --> 00:13:05,740
是的。

100
00:13:05,740 --> 00:13:14,779
因此，我们打开了文档，我们将遵循这一点。

101
00:13:14,860 --> 00:13:19,060
是的，所以我们选择客户，

102
00:13:19,060 --> 00:13:23,539
我们使自己熟悉将要发生的事情。

103
00:13:23,539 --> 00:13:25,759
是的，我们有用于JavaScript平板电脑的畅销书，

104
00:13:25,759 --> 00:13:28,539
很棒的红色灯塔，用于主网，非常酷。

105
00:13:28,539 --> 00:13:32,100
好的，我们已经有三个组合了。

106
00:13:32,100 --> 00:13:33,539
是的，环境，

107
00:13:33,539 --> 00:13:35,060
这是另一回事。

108
00:13:35,060 --> 00:13:36,620
这么多人问

109
00:13:36,620 --> 00:13:38,399
硬件要求等。

110
00:13:38,399 --> 00:13:42,279
对于这个研讨会，我想保留硬件要求

111
00:13:42,279 --> 00:13:43,480
尽可能最小。

112
00:13:43,480 --> 00:13:48,000
您现在正在查看的是KVM，这是一台虚拟机。

113
00:13:48,759 --> 00:13:50,420
我什至没有HTOC。

114
00:13:52,039 --> 00:13:56,899
我今天只是为了这个研讨会

115
00:13:56,899 --> 00:14:04,420
演示如何在新鲜系统上进行操作。

116
00:14:04,420 --> 00:14:06,879
因此，我们有三个CPU内核。

117
00:14:07,120 --> 00:14:08,740
我分配了六个Eximories。

118
00:14:08,899 --> 00:14:11,360
这将是一个非常非常小的实例。

119
00:14:11,360 --> 00:14:17,320
当然，我的意思是，这也是在做一些图形接口，最少的图形界面

120
00:14:17,320 --> 00:14:20,240
接口，但是您可以在虚拟服务器上执行此操作。

121
00:14:20,399 --> 00:14:27,060
您可以每月租用一个小型副总裁大约四美元，这足以运行

122
00:14:27,060 --> 00:14:30,360
例如，家庭节点，或者自己尝试。

123
00:14:31,019 --> 00:14:34,580
因此，关于环境，我们在这里使用Wlinux。

124
00:14:34,720 --> 00:14:36,740
它可以在任何Linux发行版上使用。

125
00:14:36,899 --> 00:14:37,700
它在Windows中起作用。

126
00:14:37,840 --> 00:14:38,779
它在Mac OS中起作用。

127
00:14:38,779 --> 00:14:41,180
Mac将与我在这里所做的类似。

128
00:14:41,360 --> 00:14:47,120
Windows步骤可能会更加不同，但是您又转到文档，我们

129
00:14:47,120 --> 00:14:56,080
从介绍安装get and um uh开始，您甚至在此之前都看到第一个go Mac OS

130
00:14:56,080 --> 00:15:04,720
Linux是UH Ubuntu Windows

131
00:15:04,720 --> 00:15:13,279
系统嗯，我将为Debian基于Debian的发行版展示它们，所以是的

132
00:15:13,279 --> 00:15:23,200
我们可以通过获取客户um UH如何安装来了解它，是的，是的，这是

133
00:15:23,200 --> 00:15:27,840
一个全新的安装，但我已经安装了一些基本的东西，是的，您看到我缺少H顶部，但是是的

134
00:15:27,840 --> 00:15:37,220
因此，在Debian中，您可以理想地使用软件包管理器。

135
00:15:37,220 --> 00:15:42,060
对于某些包装经理，尤其是在Debian中可能已经过时的编译器，

136
00:15:42,060 --> 00:15:46,300
我在Debian有一堆过时的包裹，您想直接访问网站，

137
00:15:46,300 --> 00:15:54,060
下载它，去Lang，您可以下载二进制文件，休息等。

138
00:15:54,059 --> 00:16:04,939
不是安装docker嗯，但是是的，所以让我看看我是否有GPG，我想我有

139
00:16:04,939 --> 00:16:11,339
是的，它已经安装了好的酷呃，因为我们只需要在一秒钟内就需要

140
00:16:11,340 --> 00:16:23,720
也许，是的，乔什，你能做到吗

141
00:16:23,720 --> 00:16:27,879
将在那里做一块屏幕。

142
00:16:28,840 --> 00:16:32,940
但是，是的，让我知道麦克风是否还可以。

143
00:16:32,940 --> 00:16:40,280
让我知道您是否能听到我的声音，因为有很多打字等，所以我可以

144
00:16:40,279 --> 00:16:44,439
我想我们应该给迈克打电话，以防万一它困扰您太多。

145
00:16:44,439 --> 00:16:54,959
是的，它不会消失。

146
00:17:10,279 --> 00:17:17,160
我失去了麦克风吗？

147
00:17:17,160 --> 00:17:21,619
我只是想拆除那里的小广场。

148
00:17:21,619 --> 00:17:24,500
没关系。

149
00:17:24,500 --> 00:17:27,680
不，这是完美的。

150
00:17:27,680 --> 00:17:28,680
惊人的。

151
00:17:28,680 --> 00:17:32,519
我只是想在流中有更多的空间。

152
00:17:32,519 --> 00:17:33,519
让我们进入它。

153
00:17:33,519 --> 00:17:34,920
因此，让我们获得。

154
00:17:34,920 --> 00:17:37,759
是的，如果得到太多，请告诉我。

155
00:17:37,759 --> 00:17:39,820
我将尝试不同的事情。

156
00:17:39,820 --> 00:17:43,140
但是，让我们从获得的客户开始。

157
00:17:43,140 --> 00:17:48,220
因此，获得客户的最基本方法是下载其编译的二进制文件。

158
00:17:48,220 --> 00:17:55,620
因此，这就像您可以运行的已经完成的软件，对吗？

159
00:17:55,620 --> 00:17:58,820
我们可以下载并执行它。

160
00:17:58,820 --> 00:18:02,600
因此，这些可执行文件在下载页面中。

161
00:18:02,599 --> 00:18:07,119
您在发行版中看到了灯塔的那一家。

162
00:18:07,119 --> 00:18:16,819
让我们点击安装，然后为了获得，我们在这里看到了，对吗？

163
00:18:16,819 --> 00:18:25,980
因此，让我们继续吧，是的，我们选择平台，对吗？

164
00:18:25,980 --> 00:18:29,219
我们获得了二进制。

165
00:18:29,220 --> 00:18:34,660
但是我在这里做的是我已经下载已经完成的软件已经

166
00:18:34,660 --> 00:18:40,720
我基本上必须信任，对吗？

167
00:18:40,720 --> 00:18:43,600
这是其他人汇编的东西。

168
00:18:43,600 --> 00:18:49,799
我知道，我不能研究它，请确保它是根据代码

169
00:18:49,799 --> 00:18:51,400
因为它自己没有编译。

170
00:18:51,400 --> 00:18:54,600
我们稍后可以演示汇编，但我不想浪费时间

171
00:18:54,600 --> 00:18:55,600
现在。

172
00:18:55,599 --> 00:19:00,599
我们可以做的是验证二进制的签名。

173
00:19:03,099 --> 00:19:08,099
因此，获得标志，您也可以在这里检查一些

174
00:19:08,899 --> 00:19:13,480
获得迹象，他们与PGP的二进制物，

175
00:19:13,480 --> 00:19:17,480
在此处列出的键。

176
00:19:17,480 --> 00:19:20,819
看，我们可以在这里导入它们或直接下载它们。

177
00:19:20,819 --> 00:19:24,919
在我们的情况下，我们想要这个Linux构建器密钥。

178
00:19:24,920 --> 00:19:26,140
是的，好吧，我们在这里。

179
00:19:26,140 --> 00:19:28,120
所以现在让我们导入钥匙，

180
00:19:29,080 --> 00:19:32,680
让我们导入钥匙，

181
00:19:32,680 --> 00:19:37,680
是的，是的，我终于得到了。

182
00:19:40,700 --> 00:19:44,640
我最近发布了它，

183
00:19:44,640 --> 00:19:47,340
我希望它仍然有效。

184
00:19:47,340 --> 00:19:49,740
是的，它会保留它，非常简单。

185
00:19:49,740 --> 00:19:53,660
GPGimport，所以现在我们正在进行公共密钥密码学

186
00:19:53,660 --> 00:19:56,600
所有以太坊都是基于的，对吗？

187
00:19:56,600 --> 00:19:58,560
哦，等等，这是我的任务建造者。

188
00:19:58,560 --> 00:20:01,420
它是否单击Linux One或MacOS One？

189
00:20:14,860 --> 00:20:16,160
是的，这是Linux建造者。

190
00:20:16,160 --> 00:20:21,160
所以现在我使用当地的GNU PGP钥匙链

191
00:20:21,160 --> 00:20:32,500
P键链导入此GO Ethereum Linux Builder的公共密钥，这是一个关键

192
00:20:32,500 --> 00:20:36,240
标志着Linux二进制文件，这是我的钥匙扣的一部分。

193
00:20:36,240 --> 00:20:41,400
现在，我可以在此处使用它来验证此签名。

194
00:20:41,400 --> 00:20:46,700
所以我们有这个。

195
00:20:46,700 --> 00:20:58,039
这是签名，这是让我们更大的报价。

196
00:20:58,039 --> 00:21:04,420
是的，这是可以根据公钥进行验证的签名。

197
00:21:04,420 --> 00:21:11,140
因此，让我们简单地通过GPG验证来做到这一点，现在我们实际上可以通过Pubkey，

198
00:21:11,140 --> 00:21:18,259
它会发现它会找到签名，然后找到二进制文件，以便您看到我们

199
00:21:18,259 --> 00:21:27,060
从这个建筑商那里有一个很好的签名

200
00:21:27,700 --> 00:21:35,780
是的

201
00:21:35,780 --> 00:21:40,900
没有人对我们的二进制纠正，因为尤其是如果你是嗯

202
00:21:41,140 --> 00:21:45,300
严重的体系结构UH一些严重的基础架构，如果您正在运行验证器，这是

203
00:21:45,300 --> 00:21:50,180
这样做必要的是确保文件完整性的事情，因为也许

204
00:21:50,180 --> 00:21:56,740
下载获取以太坊org dot org，也许会妥协，也许有一个黑客服务恶意的二进制文件

205
00:21:56,740 --> 00:22:02,980
试图让您知道间谍您从窃取您的理论和什么，所以您想向您致意

206
00:22:02,980 --> 00:22:09,140
想确保您执行此操作或自己编译，嗯，也许我可以做到这一点

207
00:22:09,140 --> 00:22:18,100
嗯，也许我可以在我们主持的时候很快做到这一点，但是是的，我想证明它

208
00:22:18,100 --> 00:22:23,460
如果您不知道这一点，那是非常重要的一步，如果我们这样做

209
00:22:23,460 --> 00:22:31,380
从Yeah开始，实际上是的，如果有不同的话，我们可以做猫

210
00:22:31,380 --> 00:22:37,060
如果您正在编译，我可以向您展示这一件有趣的事情，实际上可以

211
00:22:37,059 --> 00:22:50,259
获取一堆不同的公用事业。因此，在这里，我们只想克隆回购。然后我

212
00:22:50,259 --> 00:22:54,339
在考虑时会避免汇编灯塔，因为像生锈

213
00:22:54,339 --> 00:23:03,019
时代很糟糕，所以也许可能更快。我希望我的互联网也不会降低

214
00:23:03,019 --> 00:23:12,220
无论如何，它在灯塔中都下载了UM，我们也要前往预先建造的二进制文件

215
00:23:13,579 --> 00:23:20,779
在这里，我们有有关UM发行版的信息，所以让我们转到“版本”页面，然后

216
00:23:20,779 --> 00:23:26,059
研究它，我们不希望实验三个状态发布这是一个版本

217
00:23:26,059 --> 00:23:30,779
更改的灯塔是到三个州的数据库体系结构，这只是

218
00:23:30,779 --> 00:23:38,539
实验现在我们希望这是最新的UM稳定版本五个OH，我们看到了

219
00:23:39,339 --> 00:23:48,139
uh在这里更改更改日志嗯，哦，实际上它实际上很重要，所以

220
00:23:49,339 --> 00:23:59,259
我们想看到的是在这里

221
00:23:59,259 --> 00:24:11,019
灯塔所以让我们下载吧

222
00:24:11,019 --> 00:24:16,299
实际上一件事，所以如果您使用VPS，您知道是否正在使用，如果您只有一些

223
00:24:16,299 --> 00:24:21,660
远程品牌服务器或如果您没有GUI UH，您不需要单击此功能，但是我们可以

224
00:24:21,660 --> 00:24:31,259
您可以获取链接并下载它，就像这样下载自己，现在正在下载

225
00:24:31,259 --> 00:24:36,620
灯塔，但我要杀死它，因为它实际上我不喜欢

226
00:24:36,620 --> 00:24:45,500
在那里，但是您可以做的就是将卷曲用于此操作，您可以执行TLS v 1.3，以确保

227
00:24:45,500 --> 00:24:51,259
它实际上是通过您要从下载的服务器进行加密的端到端加密的，因此，如果您想成为

228
00:24:51,259 --> 00:25:07,759
喜欢您可以像这样下载它的二进制文件，我们就在这里

229
00:25:07,759 --> 00:25:14,480
无论如何，它都没有任何下载任何内容，让我们现在实际上打开包装，所以我们

230
00:25:14,480 --> 00:25:20,000
现在有两个二进制文件

231
00:25:20,000 --> 00:25:31,000
让我们吧。你们知道焦油是来自磁带档案架的，所以从字面上看，焦油是从磁带上来的。

232
00:25:31,000 --> 00:25:43,000
好的，是的，我们在这里有.Lighthouse，很棒。让我们摆脱这一点，让我们带上.org。

233
00:25:43,000 --> 00:25:59,359
是的，我们在这里有猫二进制。

234
00:25:59,359 --> 00:26:06,000
现在，我们和灯塔和猫一起都在这里与我们一起在家里，对吗？

235
00:26:06,000 --> 00:26:07,819
因此，这是打开包装的。

236
00:26:07,819 --> 00:26:13,359
就像，哦，我没有在没有检查BGP密钥之前检查灯塔。

237
00:26:13,359 --> 00:26:18,000
我不确定我是否应该这样做，但也许让我们告诉你，因为，是的，你们，我

238
00:26:18,000 --> 00:26:21,299
看到你们是的，这取决于。

239
00:26:21,299 --> 00:26:25,220
有一些关键服务器可能会给您带来麻烦。

240
00:26:25,220 --> 00:26:29,579
再次下载。

241
00:26:29,579 --> 00:26:34,480
它很有趣，它的克隆很慢，但是下载，是的。

242
00:26:34,480 --> 00:26:35,480
让我们使用它。

243
00:26:35,480 --> 00:26:36,480
这是关键。

244
00:26:36,480 --> 00:26:40,640
要获取密钥，您需要从密钥服务器中获取它。

245
00:26:40,640 --> 00:26:44,400
也许他们也可以在某个地方使用它，但是它可能在密钥服务器中。

246
00:26:44,400 --> 00:26:53,759
因此，也许我们转到GPG，密钥服务器，密钥，OpenPGP.org。

247
00:26:54,400 --> 00:26:59,039
搜索键，我们通过钥匙。

248
00:27:01,120 --> 00:27:02,160
是的，Sigma Prime。

249
00:27:02,160 --> 00:27:03,200
是的，很棒。

250
00:27:03,200 --> 00:27:03,839
我们开始做吧。

251
00:27:03,839 --> 00:27:16,599
它。现在您想倒转。是的，好的，是的，我们将其导入。我们可以列出我们的

252
00:27:16,599 --> 00:27:22,879
向大家展示我们所有人的关键。因此，我们有Mac Builder，我们不小心

253
00:27:22,879 --> 00:27:27,379
做到了我们用于Get的Linux One，现在我们拥有Sigma Prime。所以现在我们可以

254
00:27:27,380 --> 00:27:34,660
实际获取我在哦之前没有验证的签名，它做了便携式或或

255
00:27:36,420 --> 00:27:41,060
是的，便携式是是的，所以这里的区别，您可以在其他软件中注意到它

256
00:27:41,060 --> 00:27:49,220
在其他客户中，这里的区别在于，嗯，这是与不同的uh rest一起编译的

257
00:27:49,220 --> 00:27:56,579
编译器UM UH目标不同的配置，并且有些系统有些

258
00:27:56,579 --> 00:28:01,700
诸如某些debian虚拟机之类的体系结构，这些机器无法理解某些说明

259
00:28:01,700 --> 00:28:08,019
使用默认的性能模式编译，因此，这当然就像UH

260
00:28:08,019 --> 00:28:13,539
您想取得最好的表现，这意味着收获可能较小，例如百分之几

261
00:28:13,539 --> 00:28:17,059
在性能中，最好在自己的机器中编译您的客户

262
00:28:17,700 --> 00:28:25,299
向温柔的用户问好，是的，所以我们有哦，我没有它下载嗯

263
00:28:29,539 --> 00:28:33,619
现在我们可以gpg验证这个

264
00:28:33,619 --> 00:28:43,759
我们在Sigma Prime的Security Sigma Prime有一个很好的签名，这很好。好的，

265
00:28:43,759 --> 00:28:48,739
因此，我相信，如果密钥服务器不妥协并且github不妥协，请

266
00:28:48,740 --> 00:29:00,500
我们在这里有一个很好的植物。因此，实际上让我删除所有这些。

267
00:29:08,900 --> 00:29:14,019
现在我们有了获得和灯塔，这真的很好。基本上，我们准备启动它。

268
00:29:14,019 --> 00:29:21,180
这是完成的存储库，所以我们可以在这里去。

269
00:29:21,180 --> 00:29:25,779
如果您想编译它，那么要做的就是制作它。

270
00:29:25,779 --> 00:29:27,700
我没有它。

271
00:29:27,700 --> 00:29:28,980
首先，一切都在此。

272
00:29:28,980 --> 00:29:35,779
因此，您想始终转到您的文档。

273
00:29:35,779 --> 00:29:38,059
这里有一些文档。

274
00:29:41,059 --> 00:29:46,059
3dst，好的，是的，是的，是的。

275
00:29:47,119 --> 00:29:49,019
没有提及所有依赖关系。

276
00:29:52,559 --> 00:29:54,940
是的，无论如何我都不必做我的。

277
00:29:54,940 --> 00:30:06,279
我相信我已经走了。

278
00:30:06,279 --> 00:30:08,320
是的，它在起作用。

279
00:30:08,320 --> 00:30:11,620
这就是它仍在获得其他包裹的方式。

280
00:30:11,620 --> 00:30:16,299
但是我只是想向你展示，就像当我说《赚钱》时，它将编译

281
00:30:16,299 --> 00:30:26,579
得到，这是一个实用程序，这是该存储库可以做的事情之一。

282
00:30:26,579 --> 00:30:32,000
就像一个二进制文件与其他一堆软件包相互作用。

283
00:30:32,000 --> 00:30:33,700
在这里，您可以看到不同的软件包。

284
00:30:33,700 --> 00:30:45,399
因此，例如，我们可以使用启动节点来运行Dev peer-per-Peer Communicator以达成共识。

285
00:30:45,400 --> 00:30:49,560
因此，给您一个可以做的例子，不仅是制作CAD，而且我可以，我可以

286
00:30:49,560 --> 00:30:56,740
意思是，如果您想做所有的公用事业，我可以像文档所建议的那样赚钱。

287
00:30:56,740 --> 00:31:01,380
但是，让我们在这里做。

288
00:31:01,380 --> 00:31:05,280
所以让我们去这里。

289
00:31:05,280 --> 00:31:06,280
这里。

290
00:31:06,280 --> 00:31:07,280
不。

291
00:31:07,280 --> 00:31:08,280
好的。

292
00:31:08,280 --> 00:31:09,280
现在。

293
00:31:09,280 --> 00:31:10,340
所以，是的。

294
00:31:10,339 --> 00:31:17,619
好吧，现在，是的，您可以构建GAT的每个部分。

295
00:31:17,619 --> 00:31:22,379
因此，如果您只想尝试使用点对点堆栈，那么您可以去

296
00:31:22,379 --> 00:31:29,079
这部分是您编译的，或者您可以做到这一点，这是爬网的所基于的

297
00:31:29,079 --> 00:31:30,079
例如。

298
00:31:30,079 --> 00:31:35,159
因此，如果您想使用爬行节点，则可以修改并编译此实用程序

299
00:31:35,159 --> 00:31:36,299
等等。

300
00:31:36,299 --> 00:31:41,200
因此，汇编客户会给您带来多种利益。

301
00:31:41,200 --> 00:31:46,980
首先，您只能拥有您真正想使用的那些部分，完全相同

302
00:31:46,980 --> 00:31:52,579
汇编，您想要的配置以及优化。

303
00:31:52,579 --> 00:31:59,639
因此，它可能在您的软件和硬件上运行得更快，但最重要的是，

304
00:31:59,639 --> 00:32:01,740
我读了代码，对吗？

305
00:32:01,740 --> 00:32:05,019
在这里，我可以确切地看到正在发生的事情。

306
00:32:05,019 --> 00:32:12,619
可以看到我正在运行我阅读的实际代码，然后我自己编译了它，所以再次

307
00:32:12,619 --> 00:32:19,660
您相信我们拥有的编译器嗯，我们喜欢在这里不信任的设置

308
00:32:19,660 --> 00:32:25,259
呃，任何人都会干扰免费软件，所以是的，那就是我想解释的

309
00:32:25,259 --> 00:32:31,500
汇编部分，但对于想要调查这一点的人的开发人员来说，继续

310
00:32:31,500 --> 00:32:36,940
但是，假设我们已经对其进行了编译或下载或现在的任何二进制文件。我们有

311
00:32:36,940 --> 00:32:43,819
行二进制。因此，当然，这是一个技术研讨会。我不使用任何

312
00:32:44,940 --> 00:32:51,259
第三方运行这个。有这些开发笔记，码头设置等。

313
00:32:51,259 --> 00:32:57,579
我会说出于实际目的，如果您实际上要运行节点

314
00:32:58,460 --> 00:33:04,859
长期使用类似的东西可能会更好，因为它伴随着所有

315
00:33:04,859 --> 00:33:11,259
包装预先配置等，但是如果您想了解其实际工作方式，则需要查看

316
00:33:11,259 --> 00:33:16,379
独自配置，这就是我们现在要做的，我们将如何看待您

317
00:33:16,379 --> 00:33:23,899
实际对其进行配置，这再次可能引起某些问题

318
00:33:23,900 --> 00:33:31,180
对于某人而言，这可能是有问题的，并且不会像某些人一样自动

319
00:33:31,180 --> 00:33:36,500
像这样的包装器，但它为您提供了完整的控制和洞察力，当然也可以

320
00:33:36,500 --> 00:33:39,060
伙计们，所以我们将调查。

321
00:33:39,060 --> 00:33:44,040
是的，我们已经下载并验证了二进制文件，我们已经编译了客户，现在让我们

322
00:33:44,040 --> 00:33:45,680
在测试网上运行它。

323
00:33:45,680 --> 00:33:47,440
因此，让我们开始吧。

324
00:33:47,440 --> 00:33:49,060
检查它，我正在跑步。

325
00:33:49,060 --> 00:33:51,580
好吧，这很容易。

326
00:33:51,579 --> 00:33:54,819
是的，基本上只是在这里执行二进制文件。

327
00:33:54,819 --> 00:33:56,379
最小化firefox。

328
00:33:56,379 --> 00:33:59,619
是否更好。

329
00:33:59,619 --> 00:34:00,960
有什么问题吗？

330
00:34:03,960 --> 00:34:06,539
这是我的小不和谐。

331
00:34:12,000 --> 00:34:14,000
不，等等，我有。

332
00:34:18,779 --> 00:34:19,619
好的。

333
00:34:21,579 --> 00:34:26,860
它只是仅作为信标节点运行teco

334
00:34:29,139 --> 00:34:33,340
这是一个验证器，我不确定您在文档中读到了什么地方

335
00:34:33,340 --> 00:34:39,579
这是什么意思

336
00:34:39,579 --> 00:34:48,679
与um um uh uh uh uh uh uh uh uh um uh um uh um uh

337
00:34:48,679 --> 00:34:52,839
连接到其他信标节点的节点本身，它使其在验证器中起作用

338
00:34:52,839 --> 00:34:57,960
做所有这些验证者职责呃，但是现在我们是从执行部分开始的，我们从get开始

339
00:34:57,960 --> 00:35:03,639
因为就像两年前或以下的时间一样

340
00:35:03,639 --> 00:35:07,799
因此，让我们阅读日志

341
00:35:07,799 --> 00:35:12,359
配置以便我们可以执行它运行默认配置，这当然是以太坊

342
00:35:12,359 --> 00:35:17,480
具有一些默认值的主网，因此我们将首先研究一下，然后如何配置如何配置

343
00:35:17,480 --> 00:35:26,679
如何更改它um，是的，是的，启动uh在主网上默认是uh uh

344
00:35:26,679 --> 00:35:35,079
它用于主要净UM的是同行计数，因此目标最多针对50

345
00:35:35,079 --> 00:35:49,400
同行UH垃圾收集气帽5,000万UH，所以是的，嗯，这就是设置

346
00:35:49,400 --> 00:35:55,000
每个节点的气体呃，是的，您可以选择不同的kzg库

347
00:35:55,000 --> 00:36:03,159
Quad需要的KZG实现是什么是什么不同的是

348
00:36:03,159 --> 00:36:07,559
对不起，我必须在这里将其打破，但是关于不同类型的数据可用性有一个问题。

349
00:36:07,559 --> 00:36:16,199
我想我以前错过了问题。因此，要回答您，基本上有两种事情。

350
00:36:16,199 --> 00:36:23,000
一个就像完整的节点，可以通过snapsync或完整同步实现，并且有存档节点，

351
00:36:23,000 --> 00:36:32,359
这是完全同步的，但区别在于，一个完整的节点并不能保留所有的节点

352
00:36:32,360 --> 00:36:39,400
历史状态，因此，如果您想进入状态，则是以太坊的当前时刻

353
00:36:39,400 --> 00:36:47,559
x资金数量该合同在此数据库中具有此值，依此类推，因此当前快照

354
00:36:47,559 --> 00:36:56,120
以太坊中的所有值仅保留在最后一个或um的最后x量可能100

355
00:36:56,119 --> 00:37:02,599
如果是重复的块或其他东西，但它会修剪所有历史状态，因为它是

356
00:37:02,599 --> 00:37:08,839
完全不必要

357
00:37:08,839 --> 00:37:14,920
仅出于某些目的，这是无用的，它是大量数据，因此

358
00:37:14,920 --> 00:37:22,839
默认设置为这里，默认情况下是获取snapsync full节点，以便您可以看到

359
00:37:22,840 --> 00:37:30,820
这很古老，所以所有历史数据，所有区块链数据，不是

360
00:37:30,820 --> 00:37:36,300
当前状态，但是区块链，我们验证了当前值的所有哈希

361
00:37:36,300 --> 00:37:44,760
为了确保它是一系列块，它保存在古代数据库中，就像

362
00:37:44,760 --> 00:37:47,900
所有历史数据中的几百千兆字节。

363
00:37:47,900 --> 00:37:49,059
所以，是的。

364
00:37:49,059 --> 00:37:53,219
我们可以写入其中，不仅仅是这样。

365
00:37:53,219 --> 00:38:04,519
这是使用卵石而不是LevelDB的一件小小的有趣的事情

366
00:38:04,519 --> 00:38:10,279
现在，因此切换到卵石，也许您也可以配置它。

367
00:38:10,279 --> 00:38:15,599
初始化以太坊协议，编写默认的主要创世纪块，这很重要。

368
00:38:15,599 --> 00:38:20,159
因此，您会看到，默认情况下，我们跑了Mainnet。

369
00:38:20,159 --> 00:38:27,920
因此，它使用它在GET二进制中，它具有创世纪块的硬编码值。

370
00:38:27,920 --> 00:38:32,079
创世纪块本身写在客户中。

371
00:38:32,079 --> 00:38:34,599
因此，它会自动知道该开始的内容。

372
00:38:34,599 --> 00:38:41,480
它使用此硬编码的默认主体创世纪块来初始化数据库。

373
00:38:41,480 --> 00:38:43,480
在这里，您会看到它的价值。

374
00:38:43,480 --> 00:38:49,019
因此，这些是来自Genesis的配置值，即它的链ID一个主

375
00:38:49,019 --> 00:38:50,019
网，对吗？

376
00:38:50,019 --> 00:38:54,820
这是为了添加的，这就是每个人，每个以太坊网络都有不同的

377
00:38:54,820 --> 00:38:56,360
连锁ID。

378
00:38:56,360 --> 00:39:02,159
因此，您知道有L2，有测试网，尤其是具有更高的值，每个值

379
00:39:02,159 --> 00:39:07,719
以太坊的叉子，您可以在Coingecko上看到的数百万

380
00:39:07,719 --> 00:39:08,719
连锁ID。

381
00:39:08,719 --> 00:39:15,599
这很重要，因为有了链条ID，这是您通过交易签名的一部分，

382
00:39:15,599 --> 00:39:19,039
这意味着它不能在另一个链上重播。

383
00:39:19,039 --> 00:39:22,019
这是发生的重要保护。

384
00:39:22,019 --> 00:39:27,719
因此，我们看到当前的共识是股份证明，具体取决于信标链，合并

385
00:39:27,719 --> 00:39:30,339
从中有工作。

386
00:39:30,339 --> 00:39:33,779
这是预后，原始的硬叉及其高度。

387
00:39:33,780 --> 00:39:45,540
因此，您会看到当霍姆斯特德·道叉时

388
00:39:45,540 --> 00:39:49,280
柏林，您会看到街区高度。

389
00:39:49,280 --> 00:39:57,380
因此，客户知道，在此块高度下，这种规则适用，对吗？

390
00:39:57,380 --> 00:40:00,360
然后是合并的时刻。

391
00:40:00,360 --> 00:40:02,060
已知网络合并。

392
00:40:02,059 --> 00:40:06,779
如果您知道自己是较旧的客户端，它已经知道了，您可能仍然是

393
00:40:06,779 --> 00:40:12,940
能够同步它，但它会发现它以后合并了，这是

394
00:40:12,940 --> 00:40:19,179
网络的难度在此时网络合并并发布合并，所以您知道

395
00:40:19,179 --> 00:40:28,779
嗯，最新块当然是零，因为我们

396
00:40:28,780 --> 00:40:34,380
它没有数据库中没有任何东西，然后是呃，是的，没有任何

397
00:40:34,380 --> 00:40:40,300
快照它正在尝试构建第一个快照，并且如您所见，默认情况下它启用了Snapsync

398
00:40:40,300 --> 00:40:45,180
它在Snapscene上运行，SnapSync以一种从中下载快照的方式运行

399
00:40:45,180 --> 00:40:51,500
相对较新的状态的网络，所以就像您知道之前的一些最终块

400
00:40:51,500 --> 00:40:58,059
Day Over或其他东西，然后从这一刻开始构建。

401
00:40:58,059 --> 00:41:04,099
如果我们将其更改为它，那么它将下载所有历史数据，正确并验证

402
00:41:04,099 --> 00:41:05,099
一切。

403
00:41:05,099 --> 00:41:08,900
但这是更实用的方法，方法更快。

404
00:41:08,900 --> 00:41:10,119
这是一个快照。

405
00:41:10,119 --> 00:41:13,260
这是数据库的不同表示。

406
00:41:13,260 --> 00:41:19,780
因此，就像GET数据库，状态数据库，卵石或LevelDB一样，它是Merkle-Patricia-3

407
00:41:19,780 --> 00:41:25,220
鹅卵石的东西，水平的DB东西，它与快照截然不同，这基本上就像

408
00:41:25,220 --> 00:41:29,260
只是帐户和价值的数据库，而不是树。

409
00:41:29,260 --> 00:41:34,320
因此，它需要生成快照。

410
00:41:34,320 --> 00:41:36,140
网络中的客户生成这些快照。

411
00:41:36,140 --> 00:41:44,600
其他客户不会获取它，然后基于他们构建。

412
00:41:44,599 --> 00:41:51,880
您看到它需要信标客户端在引擎API上同步，是的，这是我们的

413
00:41:51,880 --> 00:41:59,799
我们的点对点UH在那里是我们的UH，因为它连接到计算机网络

414
00:41:59,799 --> 00:42:08,839
它为我们提供了uh uh upent键，该节点的身份um um会生成一些默认值是的

415
00:42:08,840 --> 00:42:15,480
IPC是通信端点非常快的uh gwt是我们需要的身份验证

416
00:42:15,480 --> 00:42:24,120
我们将全部设置为它也可以运行另一个端点，是的，这是它运行的uh uh uh此http Server

417
00:42:24,120 --> 00:42:29,240
用于连接您看到它已启用身份验证，因为它正在连接到

418
00:42:29,800 --> 00:42:34,920
嗯，信标节点或这是我在发送中断ctrl c时杀死它的地方，然后杀死它。

419
00:42:34,920 --> 00:42:42,680
它是写下并关闭所有终点。

420
00:42:42,680 --> 00:42:45,680
是的，这就是一个简单的get。

421
00:42:45,680 --> 00:42:48,380
我想向您展示它开始时会发生什么。

422
00:42:48,380 --> 00:42:54,800
因此，在我们遇到更多东西之前，在我们进行配置之前。

423
00:42:54,800 --> 00:42:59,740
是的，让我们让它屏幕吧。

424
00:42:59,740 --> 00:43:03,400
我没有这样的屏幕帮助。

425
00:43:03,400 --> 00:43:10,680
好的，我们不需要字符串嗯

426
00:43:10,680 --> 00:43:17,639
在此上，您看到了您看到的默认值，现在我们想um um um

427
00:43:19,240 --> 00:43:26,360
uh自己配置它，请确保它以我们想要的方式行事

428
00:43:26,360 --> 00:43:34,440
嗯，默认的默认um uh是数据存储在您的主文件夹中的dot perium

429
00:43:34,440 --> 00:43:38,519
这对我来说并不理想，我想以一种更明显的方式拥有它，我想跑步不同

430
00:43:38,519 --> 00:43:47,960
网络，所以我们还将制作一个不同的uh获取数据，让我们制作灯塔数据UM

431
00:43:48,920 --> 00:43:55,480
嗯，让我让我快速查看问题的组合，所以如果您在完整的节点上，

432
00:43:55,480 --> 00:44:02,840
我想抓住全部SD或其他事情，以便您可以看到所有当前数据

433
00:44:02,840 --> 00:44:10,440
您可以看到您的帐户或SD或任何其他代币的UH有多少

434
00:44:10,440 --> 00:44:16,920
目前数据库，但是如果您想在一个街区100万四个八七分之一的街区中知道它

435
00:44:16,920 --> 00:44:23,960
坐着你知道五年前，您需要从拥有的区块链数据中计算出来

436
00:44:23,960 --> 00:44:32,199
而且这是很多计算

437
00:44:32,199 --> 00:44:36,760
您想知道根据每个州的状态过渡来计算所有状态

438
00:44:36,760 --> 00:44:42,199
您在区块链数据中拥有的交易您只需加速您只需保留创建的状态即可

439
00:44:42,199 --> 00:44:48,920
这就像一种天真的方法实际上是在红色和

440
00:44:48,920 --> 00:44:54,200
嗯，他们有这个不同的数据库，在该数据库中，他们像状态一样更改，并且是

441
00:44:54,200 --> 00:44:58,599
复杂得多，就像现在有两个三个trabytes，您可以拥有，但是您

442
00:44:58,599 --> 00:45:03,880
真的不需要它，就像没有人真正在运行它，因为我不喜欢普通用户

443
00:45:03,880 --> 00:45:07,720
需要它与网络互动或喜欢您知道完全验证链条

444
00:45:10,039 --> 00:45:14,519
正确，但完整节点没有所有完整节点具有所有块具有所有这些

445
00:45:14,519 --> 00:45:23,239
古老的古代数据嗯，所以当我去时，我们已经打开了uh是的链数据

446
00:45:25,239 --> 00:45:32,360
在这里，我们在此级别db中都拥有了所有所有数据

447
00:45:32,360 --> 00:45:37,719
鹅卵石格式我们不能只阅读，但这一切都在这里，所以你真的没有你有你

448
00:45:37,719 --> 00:45:42,920
所有嗯，您可以在我不想撒谎但喜欢的客户文档中准确检查它

449
00:45:42,920 --> 00:45:48,840
交易收据，交易信息，块，因为现在仍然是

450
00:45:48,840 --> 00:45:55,559
完整节点。例如，大型，例如，您所说的基本上是为了武力。在最后

451
00:45:55,559 --> 00:46:06,039
来自Dom的谈话，他将其作为历史到期的专业人士的一部分，EIP-444谈论

452
00:46:06,039 --> 00:46:12,519
只是您知道不需要这个古老或像历史数据一样成为嗯

453
00:46:13,480 --> 00:46:18,199
笔记的一部分将使运行uh更容易，因为您真的不需要它

454
00:46:18,199 --> 00:46:23,880
当前状态，但可以验证所有您将所有数据保留相同的创世纪，但在

455
00:46:23,880 --> 00:46:29,159
存档节点您拥有这些额外计算的状态，例如您想要的差异

456
00:46:29,159 --> 00:46:34,199
是的，它强调了档案和UM和UH之间的区别

457
00:46:36,039 --> 00:46:45,000
因此，从一个完整的节点中，您可以完全离线，可以拥有一个完整的节点，然后生成

458
00:46:45,000 --> 00:46:47,840
档案节点数据，对吗？

459
00:46:47,840 --> 00:46:52,980
您拥有所需的所有数据，只需要完成所有荒谬的计算，

460
00:46:52,980 --> 00:46:57,800
每当您想查询某些历史数据时，都无法做到这一点，所以

461
00:46:57,800 --> 00:47:00,860
然后，您可以缓存所有内容，并且有一个存档节点。

462
00:47:00,860 --> 00:47:01,860
所以，是的。

463
00:47:01,860 --> 00:47:03,679
好吧，让我们回到这个。

464
00:47:03,679 --> 00:47:11,779
这是我要配置的第一件事。我们有GetData，所以让我们使用它。所以

465
00:47:11,779 --> 00:47:23,559
首先是它的数据鹿GetData。因此，首先，我们指出要在此存储数据

466
00:47:23,559 --> 00:47:28,119
目录。因此，例如，如果您运行较大的节点，则如果需要，请知道，您知道，

467
00:47:28,119 --> 00:47:32,239
储存的Terabyte，您可能有外部SSD，可能有一些

468
00:47:32,239 --> 00:47:39,679
您想做的地方的外部驱动器，这样就可以指出这样的东西

469
00:47:41,519 --> 00:47:49,759
媒体，无论如何。但是在我们的情况下，我们只想要一个本地，不同的本地

470
00:47:50,399 --> 00:47:53,359
数据库我们可以区分网络等。

471
00:47:53,360 --> 00:48:03,559
嗯，嗯

472
00:48:03,559 --> 00:48:10,559
如果您想从创世纪开始，请将其更改为Full

473
00:48:10,559 --> 00:48:15,940
基本上，即使是默认的，这也不是我向您展示的方式的最小配置

474
00:48:15,940 --> 00:48:22,860
我想到的还有更多选项，但是如果您想看到最低可行

475
00:48:22,860 --> 00:48:27,019
您想来这里，在这里写一个节点。

476
00:48:27,019 --> 00:48:28,400
那么我们需要做什么？

477
00:48:28,400 --> 00:48:33,280
是的，我没有指定它，但是网络是主要网络。

478
00:48:34,200 --> 00:48:36,780
实际上，我应该先向您展示帮助。

479
00:48:37,079 --> 00:48:38,120
是的，让我们展示帮助。

480
00:48:38,640 --> 00:48:41,280
因此，在这里您可以看到所有选项。

481
00:48:41,460 --> 00:48:42,340
有点压倒性。

482
00:48:42,740 --> 00:48:45,079
我不想经历所有这些，

483
00:48:45,280 --> 00:48:48,120
仅仅因为它是一种您知道的，您就可以阅读了。

484
00:48:48,240 --> 00:48:50,099
是的，重要的是，有命令。

485
00:48:50,099 --> 00:49:03,639
因此，我只是作为获取节点执行了，但是这些都是不同的命令，您看到的所有使用GET GET CONSOLE，MANIPULATION DATABASE等cetera等的不同实用程序。

486
00:49:03,639 --> 00:49:08,259
所以，是的，在这里您可以看到。

487
00:49:09,519 --> 00:49:13,199
这是为了如果您内部有一个帐户，则可以使用此内容。

488
00:49:14,319 --> 00:49:16,379
这些是一些旧的，API。

489
00:49:16,699 --> 00:49:22,239
所以，是的，我们想设置已验证的端点，

490
00:49:22,559 --> 00:49:26,859
我们还想设置正常的HTTP，这是错误的，

491
00:49:27,179 --> 00:49:28,879
默认情况下关闭。

492
00:49:28,880 --> 00:49:37,360
因此，我们希望能够通过经典的JSON RPC与我们的节点进行交谈，这就是这。

493
00:49:37,360 --> 00:49:38,880
是的，默认值是这样。

494
00:49:38,880 --> 00:49:41,940
我们也许可以把它留在那里。

495
00:49:41,940 --> 00:49:48,760
是的，更多，您也可以为各种通信启用Web插座。

496
00:49:48,760 --> 00:49:54,840
是的，这是，是的，当然，您可以将所有这些配置放在一个文件中。

497
00:49:54,840 --> 00:49:56,300
您可以指出。

498
00:49:56,300 --> 00:50:01,340
是我在一年中解释数据的卵石或级别DB选项，您可以将您分开

499
00:50:01,340 --> 00:50:08,060
代理人的历史数据要查看不同的UH不同目录，因此您有

500
00:50:08,060 --> 00:50:16,220
就像一个较大的磁盘一样，使用以后的数据哦，我们和我们和这个

501
00:50:16,220 --> 00:50:22,539
是我们选择网络的方式，因此我们只通过它将网络名称传递给这些是预先配置的

502
00:50:22,539 --> 00:50:31,739
网络正确的Mainnet Holoshki和Sefolia在这里是Sefolia um的地方

503
00:50:31,739 --> 00:50:36,619
或他们可以在任何兼容网络上运行的这些客户中的任何一个，但您只需要

504
00:50:36,619 --> 00:50:42,779
提供创世纪和连接的节点，并且能够在另一个测试网上运行或某人

505
00:50:42,780 --> 00:50:45,060
它将很快证明它。

506
00:50:45,060 --> 00:50:54,540
嗯，是的，在启用HTTP API时，安全问题是一个很好的问题，我们

507
00:50:54,540 --> 00:50:58,140
将研究它，让我们看一下选项。

508
00:50:58,140 --> 00:51:06,060
是的，首先，您可以与您的节点交谈。

509
00:51:06,060 --> 00:51:09,680
您使用基于此的不同命名空间。

510
00:51:09,679 --> 00:51:16,559
可以在此处的文档中看到它，以便您看到这些是不同的名称空间

511
00:51:16,559 --> 00:51:24,559
uh得到启用，最多是喜欢的人，因为潜在的危险是管理员

512
00:51:24,559 --> 00:51:30,159
因为这实际上让您喜欢您知道操纵节点（例如添加对等式）删除对等的节点

513
00:51:30,159 --> 00:51:37,359
我在这里看到的第一件事嗯，所以这个操纵节点本身，但调试可以

514
00:51:37,360 --> 00:51:43,519
要危险，因为这里有一个问题，就像嗯，档案笔记，但

515
00:51:43,519 --> 00:51:52,000
例如，如果您像调试一样跑步，请询问历史时刻的一些大数据

516
00:51:52,000 --> 00:51:56,400
您可以喜欢推论节点，您可以真正喜欢停止它，因为它正在进行

517
00:51:56,400 --> 00:52:05,680
尝试计算它，以便有不同的名称空间，但默认情况下，您会发现它已暴露

518
00:52:05,679 --> 00:52:14,000
仅在本地主机中，因此，如果您信任本地计算机或本地网络，则应该全部

519
00:52:14,000 --> 00:52:21,279
对，嗯，您可以知道使用防火墙等等，但是您还可以做的就是决定

520
00:52:21,279 --> 00:52:31,519
您想使用哪些名称空间，我正在尝试在这里找到UM，以便在这里找到评论

521
00:52:31,519 --> 00:52:43,280
这使您可以让RP Secret Ql http地址是的，是的，我是我盲的，所以http.api

522
00:52:43,280 --> 00:52:49,079
让您仅选择要运行的这些名称空间中的哪个

523
00:52:49,079 --> 00:52:55,059
运行它只为您提供有关以太坊链的基本信息，以便您可以

524
00:52:55,059 --> 00:53:01,139
只需选择您可以做的，嗯，这可以添加一点

525
00:53:01,139 --> 00:53:10,259
安全也是的，是的，感谢您的问题，是的，最喜欢它可以是DDOS

526
00:53:10,259 --> 00:53:15,299
问题所以是的，请确保您知道您在没有DDOS的机器上运行它

527
00:53:15,299 --> 00:53:22,659
安全等等，是的，如果您想运行存档模式，这就是您和我启用的地方

528
00:53:22,659 --> 00:53:30,819
您需要基本上禁用垃圾收藏，呃，您可以运行呃

529
00:53:30,819 --> 00:53:36,739
可以保留所有历史，但还有更多只是一个故事，例如缓存

530
00:53:36,739 --> 00:53:44,739
祈祷图像也可以看到您可以喜欢默认情况下删除的一堆东西

531
00:53:44,739 --> 00:53:49,059
大部分节点不需要它，因为它试图尽可能轻巧

532
00:53:49,059 --> 00:53:54,179
但是好的，用一些合理的值运行它。

533
00:53:54,179 --> 00:54:00,400
因此，我们已经在这里开始了。

534
00:54:00,400 --> 00:54:01,440
所以让我们继续。

535
00:54:01,440 --> 00:54:05,639
我们想跑步，这次让我们在holoshki上跑步。

536
00:54:05,639 --> 00:54:07,799
因此，让我们将其添加到前面。

537
00:54:07,799 --> 00:54:13,699
Holoshki。

538
00:54:13,699 --> 00:54:24,319
嗯，是的，我们想启用HTTP，所以让我们启用我们可以选择端口或

539
00:54:24,319 --> 00:54:32,299
地址嗯，默认值为85545，我只是在演示uh，还有其他各种

540
00:54:32,299 --> 00:54:38,339
再次出于安全目的，您可以做的是我可以在这里展示它

541
00:54:38,340 --> 00:54:39,800
比键入更好。

542
00:54:43,140 --> 00:54:45,019
对不起，我到处都是。

543
00:54:45,019 --> 00:54:49,100
是的，您想选择已验证的主机

544
00:54:49,100 --> 00:54:53,180
要连接到您，哪个主机名已验证

545
00:54:53,180 --> 00:54:55,740
与RPC交谈。

546
00:54:55,740 --> 00:54:58,600
因此，这也可以增加一些安全性，

547
00:54:58,600 --> 00:55:00,760
但是，如果您遥不可及，也会给您带来麻烦

548
00:55:00,760 --> 00:55:03,280
访问自己的节点，您会遇到麻烦。

549
00:55:03,280 --> 00:55:06,820
是的，您可以使用这个通配符，但这会更安全。

550
00:55:08,340 --> 00:55:15,539
是的，所以这是我们想做的另一件事，所以这就像JSON RPC，但是现在有

551
00:55:15,539 --> 00:55:23,460
RPC实际上您实际需要能够与共识客户端交谈的RPC

552
00:55:23,460 --> 00:55:42,260
是JWT身份验证的端点，并且已启用了RPC。

553
00:55:42,260 --> 00:55:53,320
因此，这将使我们将其指向值应该是值的地方。

554
00:55:53,320 --> 00:55:54,680
所以让我解释一下。

555
00:55:54,680 --> 00:55:58,980
因此，要在执行和客户端之间进行交流，这是至关重要的，它基本上是

556
00:55:58,980 --> 00:56:02,620
就像在软件中一样，就像以太坊在与另一个以太坊交谈，对吗？

557
00:56:02,620 --> 00:56:07,740
就像，您知道，如果您分开到两个二进制文件之类的东西，他们需要有一个

558
00:56:07,740 --> 00:56:09,440
安全的交流方式。

559
00:56:09,440 --> 00:56:13,840
我们使用此Java网络令牌来做到这一点。

560
00:56:13,840 --> 00:56:22,740
这基本上只是一个随机的32位十六进制，只是一个很大的数字，他们都需要这两个客户

561
00:56:22,739 --> 00:56:32,019
两个客户都需要了解他们才能交谈。因此，我们在开放的情况下创建它

562
00:56:32,019 --> 00:56:38,259
手动，但我们不需要这样做。我们只是告诉他，让我们削减温度，

563
00:56:38,259 --> 00:56:47,139
Slash JWT。是的。是的，我认为基本上就是这样。这确实是基本的事情

564
00:56:47,139 --> 00:56:51,219
您要配置。如果您运行节点，您想知道数据在哪里，

565
00:56:51,219 --> 00:56:59,779
您想知道您的HTTP通信在哪里运行，这种默认的Elder PC，

566
00:57:00,339 --> 00:57:06,419
端口，默认值为8551。我要保留它只是为了演示。

567
00:57:06,419 --> 00:57:13,299
所以，是的，应该这样。让我们看看它是否抱怨。不，它正在运行。所以现在你看到了

568
00:57:13,300 --> 00:57:25,539
它是在1700上运行的，即布拉格7的邮政编码，holešovice，这就是所有这些

569
00:57:25,539 --> 00:57:32,019
硬叉和合并在创世纪的零时发生，对吗？所以已经完成了。

570
00:57:32,019 --> 00:57:35,259
完成了。

571
00:57:35,259 --> 00:57:40,579
然后，上海发生了坎昆在某一时刻激活的。

572
00:57:40,579 --> 00:57:47,039
好的，它已经找到了两个同行，并且正在运行。

573
00:57:47,039 --> 00:57:54,679
但是，如您所见，这是合并后网络，因此共识是信标

574
00:57:54,679 --> 00:57:57,320
可以看到信标客户端，因此我们需要启动一个。

575
00:57:57,320 --> 00:57:59,099
那是我们的下一个挑战。

576
00:57:59,099 --> 00:58:08,380
让我们随身携带窗口，然后在终端下抓住它，然后移动

577
00:58:08,380 --> 00:58:09,679
到灯塔。

578
00:58:09,679 --> 00:58:15,519
所以，是的，再次，我们在这里有灯塔文档。

579
00:58:15,519 --> 00:58:21,519
我们可以找到客户，是的，所以我们得到了JWTC网格。

580
00:58:21,519 --> 00:58:23,920
它是在温度下创建的。

581
00:58:23,920 --> 00:58:26,179
是的，在这里。

582
00:58:26,179 --> 00:58:32,899
嗯，您可以正确阅读它，这是一个非常秘密的价值的价值

583
00:58:32,899 --> 00:58:37,139
但是，是的

584
00:58:37,779 --> 00:58:44,019
所以我们有我们有执行节点，现在我们想好我们不想做

585
00:58:44,019 --> 00:58:50,019
但是我们想运行节点，所以在这里是的，否则应该在某个地方

586
00:58:50,019 --> 00:58:57,300
清除。是的。我认为，就像以ethereum.org上有这些基本示例，但我这样做了

587
00:58:57,300 --> 00:59:02,420
我围绕合并写了这篇文章。从那以后，您知道，也许有些航班重复或

588
00:59:02,420 --> 00:59:10,179
重命名或其他。因此，最好遵循文档。在这里，您也可以看到它也是

589
00:59:10,739 --> 00:59:15,380
要求我们同步检查点。我们会这样做，但它会稍后做。让我们开始

590
00:59:15,380 --> 00:59:24,260
只是默认值。因此，让我们运行灯塔，我们在这里有，您也可以看到它也有很多

591
00:59:24,260 --> 00:59:31,200
它为我们提供的选择，它们大多与GET相似，但也有很大不同

592
00:59:31,200 --> 00:59:35,260
信标部分，但基本配置相似。我们需要选择一个网络，一个

593
00:59:35,260 --> 00:59:42,900
数据DIR并将其连接到API，所以让我们这样做。所以我们想灯塔，所以

594
00:59:42,900 --> 00:59:49,220
您是否看到这些不同的命令，您会看到UH客户经理Beacon Node UH验证器客户端，所以

595
00:59:49,220 --> 00:59:55,220
基本上VN是信标节点BC是有效的客户端，这是两个不同的功能两个

596
00:59:55,220 --> 01:00:01,460
不同的行为在此内两种不同的模式或基本上类似的代码路径

597
01:00:01,460 --> 01:00:08,579
Lighthouse二进制

598
01:00:08,579 --> 01:00:14,179
连接到信标节点，因此，如果我们要赌注，这是我们以后需要做的事情

599
01:00:14,179 --> 01:00:20,019
首先，我们需要设置信标节点，以便从我们需要网络抛光密钥开始

600
01:00:22,259 --> 01:00:32,179
执行终点uh是的，实际上是在这里说的是，是的，我们几乎可以

601
01:00:32,179 --> 01:00:40,739
是的，是的，嗯，如果像某些客户一样

602
01:00:40,739 --> 01:00:47,299
有些人不喜欢这里的协议，吗

603
01:00:47,299 --> 01:00:53,859
想要正确的http部分

604
01:00:53,859 --> 01:01:01,699
我总是开始工作的东西，是的，执行JWT令牌是在邮票中

605
01:01:02,179 --> 01:01:07,179
好的，我们还启用了HTTP端点。

606
01:01:07,179 --> 01:01:08,460
我们基本上已经准备好了。

607
01:01:08,460 --> 01:01:11,119
所以现在我们正在运行灯塔。

608
01:01:11,119 --> 01:01:15,279
因此，现在正在发生的事情，这是我想向您展示的一件有趣的事情。

609
01:01:15,279 --> 01:01:24,399
因为正如我之前展示的那样，它具有硬编码的创世纪文件，并将其写下来

610
01:01:24,399 --> 01:01:26,059
一切。

611
01:01:26,059 --> 01:01:33,980
Holeški和Lighthouse的情况是一种有趣的事情，因为Holeški网络

612
01:01:33,980 --> 01:01:42,380
UH发行了大量的验证器，如果您拥有所有这些资助的人

613
01:01:42,380 --> 01:01:48,539
验证者这个很大的价值，这是很大的空间，就像它是一个一样

614
01:01:48,539 --> 01:01:53,659
百万半验证者，这就像至少有百万半的记录

615
01:01:53,659 --> 01:02:01,339
这就像大量数据，所以存款对不起，呃，嗯

616
01:02:01,339 --> 01:02:08,379
um，如果有UM信标节点，则像某些JSON格式的配置值一样

617
01:02:08,379 --> 01:02:15,420
和SSD格式的实际状态是如此之大，就像100个兆字节，所以他们决定

618
01:02:15,420 --> 01:02:21,259
而不是将另一个100兆字节的文件作为其二进制文件的一部分

619
01:02:21,260 --> 01:02:33,260
硬码UM这个AWS地址您可以在哪里获得uh是的，所以这可能需要时间进行测试

620
01:02:33,260 --> 01:02:39,100
大钱包帐户这是为了为整体钥匙而

621
01:02:39,820 --> 01:02:47,420
网络主应用程序他不会从已知的创世纪开始告诉我，他是

622
01:02:47,420 --> 01:02:49,800
下载创世纪状态。

623
01:02:50,579 --> 01:02:52,180
然后我们失败了。

624
01:02:53,480 --> 01:02:56,760
从创世纪不安全和资本同步数据可用性检查。

625
01:02:56,980 --> 01:02:59,599
您应该从检查点同步安装它。

626
01:02:59,800 --> 01:03:00,920
哦真的吗？

627
01:03:02,639 --> 01:03:03,700
那很有意思。

628
01:03:04,820 --> 01:03:07,139
为什么它是不安全的创世纪同步的？

629
01:03:07,139 --> 01:03:14,940
所以我明白为什么从这个随机下载创世纪是不安全的

630
01:03:14,940 --> 01:03:20,220
服务器就在这里，但令我惊讶的是，它在主网上也可以做同样的事情，并且迫使我进入检查点

631
01:03:20,220 --> 01:03:28,780
因为在检查点同步您，您就会相信您不信任检查点提供商，但让我们

632
01:03:28,780 --> 01:03:35,420
我向您展示，所以我们可以通过与信标UH一起在UH上做些什么

633
01:03:36,059 --> 01:03:43,420
信标笔记最终确定是，您知道是否有一些块最终确定

634
01:03:43,420 --> 01:03:49,340
时间前，就像几个小时前或几天前一样，可能不会只是不仅仅是

635
01:03:53,019 --> 01:04:00,539
这是什么话，很容易重新工作。我不认为就像你知道的历史

636
01:04:00,539 --> 01:04:05,180
几天前会发生变化，因为它需要像数十亿美元的重大泥泞事件一样

637
01:04:05,180 --> 01:04:11,980
数十亿美元，所以我认为这条连锁历史上的最终时刻是

638
01:04:13,420 --> 01:04:23,380
就像我不想信任一些人一样安全，甚至更安全，甚至更安全

639
01:04:23,380 --> 01:04:30,579
随机创世纪我正在从服务器下载它，但是我们信任这些端点，所以有

640
01:04:30,579 --> 01:04:41,019
如您所见，不同的提供商以及我们要做的是，我们在这里连接到他们的笔记

641
01:04:41,019 --> 01:04:48,579
使用美丽的检查点软件，您可以看到什么UM时期最终确定，因此

642
01:04:49,480 --> 01:04:55,840
嗯，我们可以知道您可以通过块路由检查该数据

643
01:04:55,840 --> 01:05:03,460
使用其他节点，以确保您知道它是安全的，并且在这里为此检查点提供了20个检查站

644
01:05:03,460 --> 01:05:11,440
所有这些都最终确定，最终确定，嗯，嗯，封锁是我们的创世纪，就像我们一样，呃，

645
01:05:11,440 --> 01:05:13,179
我们，我们从这里开始。

646
01:05:13,179 --> 01:05:18,720
是的，所以这是一种主观的，例如，嗯，我们称之为我们称之为虚弱的主观性

647
01:05:18,720 --> 01:05:23,159
检查站，嗯，应该在第三周介绍。

648
01:05:23,159 --> 01:05:24,159
您可以研究一下。

649
01:05:24,159 --> 01:05:27,300
您可以更多地研究弱主观性。

650
01:05:27,300 --> 01:05:35,860
这里有很大的一部分。

651
01:05:35,860 --> 01:05:39,060
因此，它说这是主观性证明。

652
01:05:39,060 --> 01:05:44,320
您可以在这里阅读有关此信息。

653
01:05:44,320 --> 01:05:47,580
因此，这是关于主观性检查点的。

654
01:05:47,580 --> 01:05:55,180
因此，我们将使用此网站，并且由于它的注意，我们将下载

655
01:05:55,179 --> 01:05:58,419
我们要下载那里。

656
01:05:58,419 --> 01:06:01,239
让我们随机选择一个。

657
01:06:01,239 --> 01:06:06,599
如果在主网上执行此操作，则应在不同的节点和不同的操作员之间进行检查

658
01:06:06,599 --> 01:06:09,719
拥有更多的安全性。

659
01:06:09,719 --> 01:06:13,639
但是在我们的情况下，让我们与一个人一起去。

660
01:06:13,639 --> 01:06:18,719
我们正在测试网上，实际上我们已经用完了。

661
01:06:18,719 --> 01:06:28,019
是的，现在是Kingholoshki的检查站，可能需要一分钟，但同时

662
01:06:28,019 --> 01:06:34,699
我们还可以再次执行获得，我们将看到会发生什么。

663
01:06:34,699 --> 01:06:45,959
好吧，下载创世纪状态，而我没有，我没有，就像

664
01:06:45,960 --> 01:06:51,960
这个VM我不喜欢固定的两个侧面，我只想向您展示窗户的一边

665
01:06:53,240 --> 01:07:00,920
无论如何，这真是太可怕了

666
01:07:00,920 --> 01:07:04,199
已经加载了检查站，这真的很好

667
01:07:06,599 --> 01:07:13,240
因此，让我们看看我的计算机是否会管理

668
01:07:15,960 --> 01:07:25,260
它不是记录新事物，这是，正在发生的事情。我不确定我的

669
01:07:25,260 --> 01:07:45,000
机器可以处理这个。等待。我们在做什么？ CPU，无论如何。是的，应该醒来

670
01:07:45,000 --> 01:07:53,559
任何时刻的执行点，您都会看到它们是UH，因此它们在8551上成功连接

671
01:07:54,199 --> 01:08:03,000
端口uh端点UH他们成功身份验证，因为它加载了最新的

672
01:08:03,000 --> 01:08:10,760
那里的博客时间戳，嗯，是的，它不能更新合同

673
01:08:10,760 --> 01:08:16,199
它称为拖放信息，因为它不是同步的，所以他们有点互相等待

674
01:08:18,600 --> 01:08:28,920
嗯，想找到更多的同行肯定等待，也许嗯，哦，什么是同行计数是什么

675
01:08:28,920 --> 01:08:33,079
很短。

676
01:08:33,079 --> 01:08:40,260
Maxpierce，对，是的，不记得了。

677
01:08:40,260 --> 01:08:53,560
maxpierce，是三个或小的东西，所以它早点开始同步，不等待

678
01:08:53,560 --> 01:08:57,720
收集更多的同龄人。只想向您展示您开始思考时会发生什么。

679
01:08:57,720 --> 01:09:09,980
嗯，是的。是的，我的机器有点慢，所以这是一回事，但是让我们看看我们的机器

680
01:09:09,979 --> 01:09:25,539
研讨会的概述，看看我们怎么做的好事

681
01:09:25,539 --> 01:09:29,139
我们正在跑步和跑步，我想在一个家庭上演示

682
01:09:29,139 --> 01:09:32,699
家庭是因为需要使用自定义创世纪来完成此操作，并提供

683
01:09:32,699 --> 01:09:39,139
您甚至更深入地了解客户实际在做什么，实际上

684
01:09:39,140 --> 01:09:45,460
它可能会更快地同步，因为这看起来不好。

685
01:09:45,460 --> 01:09:49,539
虽然，就像您看到的那样，它们只是完全连接的。

686
01:09:49,539 --> 01:09:55,280
他们只需要等待片刻才能醒来

687
01:09:55,280 --> 01:09:59,160
连接到网络等。

688
01:09:59,160 --> 01:10:04,260
是的，要下载Ephemer，以运行Ephemer，

689
01:10:04,260 --> 01:10:07,380
让我们去ephemer.dev。

690
01:10:07,380 --> 01:10:10,180
是的，现在要杀死它。

691
01:10:12,920 --> 01:10:15,940
抱歉，所有人的资源。

692
01:10:17,279 --> 01:10:22,180
是的，让我们转到Genesis存储库中的项目存储库。

693
01:10:23,220 --> 01:10:27,739
因此，这就像有关测试网和克隆的一般信息。

694
01:10:28,239 --> 01:10:30,920
就像每周重新启动一样，所以很小。

695
01:10:30,920 --> 01:10:34,920
就像一周价值大部分是空链数据的价值，因此可以同步

696
01:10:34,920 --> 01:10:36,840
非常快，非常非常容易。

697
01:10:37,380 --> 01:10:51,060
这是如何使节点工作的示例。

698
01:10:51,060 --> 01:10:53,600
您会发现这很简单。

699
01:10:53,600 --> 01:10:55,760
这只是一个额外的评论。

700
01:10:55,760 --> 01:10:56,760
因此，让我们从此开始。

701
01:10:56,760 --> 01:11:02,199
我们需要首先下载最新版本，我将其放在这里，但它直接直接

702
01:11:02,199 --> 01:11:03,619
发行。

703
01:11:03,619 --> 01:11:05,859
因此，您会看到119。

704
01:11:05,859 --> 01:11:12,179
9，这个连锁ID，这个创世纪时间，让我们下载所有网络，这是所有测试

705
01:11:12,179 --> 01:11:25,460
我们可以拥有的净数据。好吧，让我们解开它们。因此，它是下载的，并且是测试网的全部，并且

706
01:11:25,460 --> 01:11:30,739
哦，在这里，它只是在这里没有玩，这真是一团糟。所以在这里您看到了所有

707
01:11:30,739 --> 01:11:38,739
不同的是FMR Genesis数据，您基本上需要运行FMR，以阅读此内容

708
01:11:38,739 --> 01:11:45,619
嗯，看看这里发生了什么，呃，基本是定义的创世纪JSON

709
01:11:47,139 --> 01:11:53,300
实际网络uh，因此在这里为不同的帐户提供余额

710
01:11:53,300 --> 01:12:00,099
您知道初始用户的测试人员验证了水龙头的符合测试人员的um

711
01:12:00,739 --> 01:12:09,439
是的，当网络真正启动时，难度，没有额外的数据，Genesis重要性的时间戳。

712
01:12:10,159 --> 01:12:15,539
为了登顶，您还可以看到所有这些帐户。

713
01:12:15,539 --> 01:12:19,779
是的，所以这里有叉子，它们都在零时发生。

714
01:12:20,279 --> 01:12:25,139
只有上海和坎昆以后。

715
01:12:26,119 --> 01:12:26,500
是的。

716
01:12:26,500 --> 01:12:34,260
因此，这基本上就是网络的定义。

717
01:12:34,260 --> 01:12:39,859
但是，您还需要选择更多的东西才能运行它，就像

718
01:12:39,859 --> 01:12:43,899
有关引导笔记的信息。

719
01:12:43,899 --> 01:12:48,739
它是哪一个？

720
01:12:48,739 --> 01:12:56,279
因此，这些是执行层，引导注释，写入，所有数据路由的概括，

721
01:12:56,279 --> 01:13:03,259
该Genesis SSE中的Beacon State将在此下载它。

722
01:13:03,259 --> 01:13:07,399
因此，我们在这里下载了所有这些，我们可以将客户指向它。

723
01:13:07,399 --> 01:13:15,359
因此，要使用此操作，它正在运行，在这里，在Holoshki上，这次让我们

724
01:13:15,359 --> 01:13:19,119
将其指向此测试网。

725
01:13:19,119 --> 01:13:29,619
以及我们如何做到的是，我们需要让它通过记忆直接使其直接使其直接。

726
01:13:29,619 --> 01:13:31,300
因此，首先，我们需要初始化创世纪。

727
01:13:31,300 --> 01:13:36,519
因此，我们需要在其数据库中写下此创世纪。

728
01:13:36,519 --> 01:13:40,420
哦，是的，在这里只是一个例子。

729
01:13:40,420 --> 01:13:41,979
它应该修复。

730
01:13:41,979 --> 01:13:46,720
有一个示例，例如旧版本，但只需转到发布页面并使用

731
01:13:46,720 --> 01:13:47,720
最新一个。

732
01:13:47,720 --> 01:13:50,000
我应该解决这个问题。

733
01:13:50,000 --> 01:13:54,560
这是一个糟糕的例子，但令人困惑。

734
01:13:54,560 --> 01:14:00,480
因此，我们想初始化创世纪，我们用init进行，但首先我们指出

735
01:14:00,480 --> 01:14:01,480
数据鹿。

736
01:14:01,480 --> 01:14:06,520
因此，让我们在此处使用Data Deer内存。

737
01:14:06,520 --> 01:14:15,079
我们想开始下载，这是我在片刻前向您展示的JSON。

738
01:14:15,079 --> 01:14:21,039
现在，在此数据库中创建创世纪。

739
01:14:21,039 --> 01:14:29,300
因此，现在，在ffmary中，我们看到在此处将其数据初始化。

740
01:14:29,300 --> 01:14:31,960
基本上准备运行。

741
01:14:31,960 --> 01:14:41,300
接下来的事情，因此所有变量，所有值，例如迭代号，链ID，

742
01:14:41,300 --> 01:14:44,800
引导音符，等等，等等，等等。

743
01:14:44,800 --> 01:14:49,820
因此，在此文档中，在此中，您可以，您可以

744
01:14:49,820 --> 01:14:57,800
我们知道它们现在很容易地采购您的外壳以拥有这些值。

745
01:14:59,060 --> 01:15:02,100
所以现在我们，我们，您将其加载到外壳中，以便您可以

746
01:15:02,140 --> 01:15:04,279
轻松，轻松地运行这些命令。

747
01:15:04,279 --> 01:15:25,399
让我们再次使用以前放置的内存数据仪。

748
01:15:25,399 --> 01:15:33,500
我们需要告诉他们启动节点，这是引导节点，电子节点，我也想添加

749
01:15:33,500 --> 01:15:39,619
链条ID，只是为了确保我们有正确的链条。

750
01:15:39,619 --> 01:15:42,559
好的，这行不通。

751
01:15:42,559 --> 01:15:45,279
啊，因为未定义链ID。

752
01:15:45,279 --> 01:15:47,159
我怎么...

753
01:15:47,159 --> 01:15:53,879
啊，它不是链，它是网络ID或其他内容。

754
01:15:53,880 --> 01:16:01,039
网络ID，对，好吧，我的错。

755
01:16:01,039 --> 01:16:05,220
网络ID，好的，现在正在运行。

756
01:16:05,220 --> 01:16:14,900
现在，我们正在使用我们创建和下载的这个自定义创世纪。

757
01:16:14,900 --> 01:16:17,000
这是埃弗默里斯网。

758
01:16:17,000 --> 01:16:20,920
您会看到我们正在尝试，我们已经在埃弗默里斯（Ephemeris）上找到了两个同龄人。

759
01:16:20,920 --> 01:16:21,920
那太棒了。

760
01:16:21,920 --> 01:16:22,920
好的。

761
01:16:22,920 --> 01:16:28,880
同时，在灯塔土地上，让我们为灯塔做同样的事情。

762
01:16:29,300 --> 01:16:35,500
Lighthouse拥有这个美丽的仪表板测试网，因此我们可以做，灯塔信标节点，

763
01:16:35,579 --> 01:16:39,340
它具有用于testnet的标志，或者您可以将其简短为dash t，

764
01:16:39,800 --> 01:16:44,480
这使我可以将其指向所有这些值的目录。

765
01:16:44,520 --> 01:16:48,880
我不需要指定，就像，哦，这是创世纪，这是创世纪状态，

766
01:16:48,880 --> 01:16:57,440
这是引导笔记，它可以找到类似目录中的所有内容。

767
01:16:57,440 --> 01:17:00,220
因此，非常非常非常容易。

768
01:17:00,220 --> 01:17:03,100
其余的是相同的。

769
01:17:03,100 --> 01:17:07,680
我只是要复制它。

770
01:17:07,680 --> 01:17:08,680
好的。

771
01:17:08,680 --> 01:17:09,680
好的。

772
01:17:09,680 --> 01:17:12,420
我们肯定会发生一些事情。

773
01:17:12,420 --> 01:17:13,699
它是同步的。

774
01:17:13,699 --> 01:17:15,420
这花了一段时间在Holoshki上。

775
01:17:15,420 --> 01:17:16,760
现在，它发生的速度更快了。

776
01:17:16,760 --> 01:17:18,780
我很高兴能告诉你。

777
01:17:18,780 --> 01:17:26,840
是的，又是的，是的，正在寻找一些同龄人。

778
01:17:26,840 --> 01:17:31,140
它发现了一些可以从中获取数据的东西。

779
01:17:31,140 --> 01:17:36,800
连接的灯塔也发生了同样的事情

780
01:17:36,800 --> 01:17:38,360
并想同步。

781
01:17:38,360 --> 01:17:43,520
现在，它以您的方式同步

782
01:17:43,520 --> 01:17:45,039
看到它可以在几分钟内同步。

783
01:17:45,039 --> 01:17:45,699
太神奇了。

784
01:17:45,699 --> 01:17:52,739
它是超级小的，它的同步如此之快，并且发现它是什么是它同步的是什么

785
01:17:52,739 --> 01:18:01,220
电流或uh新的UH新插槽，然后叉子选择决定获得哦

786
01:18:01,220 --> 01:18:05,220
是新的头吗？

787
01:18:05,220 --> 01:18:10,340
与下一个区块同步，并要求从哪里同步，也正在阅读

788
01:18:10,340 --> 01:18:12,619
执行的数据。

789
01:18:12,619 --> 01:18:15,680
是的，我想这可能需要一秒钟

790
01:18:15,680 --> 01:18:17,560
但这最终将同步。

791
01:18:17,560 --> 01:18:18,659
它正在运行。

792
01:18:18,659 --> 01:18:21,680
这个世代剧对此非常非常轻巧。

793
01:18:24,560 --> 01:18:26,619
因此，例如，LoadStart，您

794
01:18:26,619 --> 01:18:31,199
可以在无需下载Genesis的情况下使用它。

795
01:18:31,199 --> 01:18:33,400
它之所以运行，是因为它在那里进行了硬编码。

796
01:18:33,400 --> 01:18:35,579
其他客户尚未包括在内。

797
01:18:35,579 --> 01:18:37,579
好，所以我们有9分钟。

798
01:18:37,579 --> 01:18:41,739
基本上，这是同步世袭所需的时间最长。

799
01:18:41,739 --> 01:18:44,739
这是最糟糕的时间，因为网络正在重新启动

800
01:18:44,739 --> 01:18:47,579
在大约一个或两个小时。

801
01:18:47,579 --> 01:18:53,140
因此，这就像一周的一个星期，价值两个小时的数据。

802
01:18:53,140 --> 01:18:55,680
但是，如果我在两个小时内这样做，

803
01:18:55,680 --> 01:18:59,019
它将在一秒钟内同步，因为这将是新的工作。

804
01:18:59,019 --> 01:19:04,739
是的，您可以在这里看到它。

805
01:19:07,579 --> 01:19:11,380
在这里，19-00-UTC，我们为此开始了，对吗？

806
01:19:11,519 --> 01:19:11,819
所以，是的。

807
01:19:13,640 --> 01:19:15,619
好吧，就是这样。

808
01:19:15,760 --> 01:19:18,260
因此，现在我们正在运行ephemera。

809
01:19:18,559 --> 01:19:20,039
让我们与节点交谈。

810
01:19:20,159 --> 01:19:23,680
哦，现在我想知道我是否在这里启用了HTTP。

811
01:19:24,739 --> 01:19:25,680
我没有，对吧？

812
01:19:25,680 --> 01:19:27,300
好吧，让我们去做吧。

813
01:19:27,840 --> 01:19:30,800
我们也需要HTTP，因此我们可以使用它。

814
01:19:30,920 --> 01:19:33,680
因为我想向您展示您如何实际与客户沟通。

815
01:19:33,680 --> 01:19:42,980
为此，良好的开始是JSON，或者是客户文档非常好，

816
01:19:42,980 --> 01:20:03,100
或jsonrpc，嗯，这也是很好的文档，但是让我们去做，就像，让我们去做

817
01:20:03,100 --> 01:20:09,260
更特定于客户的。哦，天哪，这是如此慢。哦，我们还可以检查点同步ephemera。

818
01:20:09,260 --> 01:20:14,060
我想有一个Epphemera的检查站同步提供商，这将使它更快。也许我们可以

819
01:20:14,060 --> 01:20:24,620
这样做。顺便说一句，当我运行节点时它会恶化吗？是死亡还是什么？

820
01:20:24,619 --> 01:20:30,579
比我同步节点还要糟糕。

821
01:20:30,579 --> 01:20:39,159
但是在这里，CheckpointSync，您会看到，我们可以使用此网站，希望有效，是的，

822
01:20:39,159 --> 01:20:40,739
要检查点。

823
01:20:40,739 --> 01:20:49,439
所以我们想在这里做什么，我只是去这个checkpointsync-url，它是checkpointsync-sync-sync，

824
01:20:49,439 --> 01:20:51,719
检查点同步URL。

825
01:20:51,719 --> 01:20:56,719
就在这里，它说了检查点中心 - 划带。

826
01:20:56,719 --> 01:20:59,099
那就是这个。

827
01:20:59,099 --> 01:21:00,779
现在它将遵守。

828
01:21:00,779 --> 01:21:03,659
不，这不会遵守。

829
01:21:03,659 --> 01:21:04,659
有用。

830
01:21:04,659 --> 01:21:12,979
但这是拒绝检查点同步的，因为我们需要先进行progDB。

831
01:21:12,979 --> 01:21:13,979
你看？

832
01:21:13,979 --> 01:21:21,919
如果您已经启动了大节点，那么您就不能只是跳过检查点同步，因为

833
01:21:21,919 --> 01:21:25,079
您需要首先删除现有数据库。

834
01:21:25,079 --> 01:21:31,379
因此，我们将要这样做，它将更快。

835
01:21:31,379 --> 01:21:34,639
让我们尝试一下。

836
01:21:34,640 --> 01:21:43,200
我们拥有8545上的HTTP通信。

837
01:21:43,200 --> 01:21:45,980
而且这太轻了。

838
01:21:45,980 --> 01:21:47,400
好，很棒。

839
01:21:47,400 --> 01:21:49,640
我想向您展示的是首先交流

840
01:21:49,640 --> 01:21:53,100
在珊瑚上，只需C-O-R-O。

841
01:21:53,100 --> 01:22:07,320
这里有一些例子吗？

842
01:22:07,320 --> 01:22:12,980
来吧，应该有例子。

843
01:22:12,979 --> 01:22:37,799
所以，是的，它叫，很简单，称为创建访问列表，不，好，很好，很好

844
01:22:37,800 --> 01:22:41,960
这只是域，名称是特定的。

845
01:22:41,960 --> 01:22:46,440
但是，是的，这是一个很好的文档，其中包含示例。

846
01:22:46,440 --> 01:22:48,480
因此，您可以看到所有不同的

847
01:22:49,140 --> 01:22:50,800
所有不同，

848
01:22:53,060 --> 01:22:53,900
哦，来吧。

849
01:22:58,500 --> 01:23:00,940
是的，我们可以使用它，

850
01:23:00,940 --> 01:23:04,900
您可以看到所有不同的

851
01:23:05,800 --> 01:23:07,619
所有不同，

852
01:23:07,800 --> 01:23:31,340
它实际上缺少标题，因为您想做的事，这并不完全正确

853
01:23:31,340 --> 01:23:42,680
可以肯定的是帖子，但您想拥有一个标题，它是内容类型的位置斜杠

854
01:23:42,680 --> 01:23:46,340
它可能想回答。

855
01:23:46,340 --> 01:23:51,340
现在，我们在这里要求什么？

856
01:23:52,020 --> 01:23:55,560
数据，让我们在这里复制它。

857
01:24:05,020 --> 01:24:07,500
是的，对不起，我不习惯环境

858
01:24:07,500 --> 01:24:09,640
因为这只是压力VM

859
01:24:09,640 --> 01:24:13,300
我想去Local主持h。

860
01:24:15,180 --> 01:24:16,020
不。

861
01:24:19,140 --> 01:24:21,640
好吧，我们看到了，

862
01:24:21,640 --> 01:24:24,119
不支持协议版方法，

863
01:24:24,119 --> 01:24:27,400
但是它回答了，太好了，它回答了。

864
01:24:27,400 --> 01:24:29,520
我不知道为什么不支持这一点，

865
01:24:32,079 --> 01:24:33,180
这很有趣，

866
01:24:33,180 --> 01:24:36,740
但是，例如，我们可以询问同步状态。

867
01:24:36,739 --> 01:24:48,079
它不是同步的，已经同步了，已同步，已同步，已同步，已同步，

868
01:24:48,079 --> 01:24:49,079
它是同步的，已同步，已同步，已同步，已同步，已同步，已同步，

869
01:24:49,079 --> 01:24:50,079
它是同步的，已同步，已同步，已同步，已同步，已同步，已同步，

870
01:24:50,079 --> 01:24:51,079
它是同步的，已同步，已同步，已同步，已同步，已同步，已同步，

871
01:24:51,079 --> 01:24:52,079
它是同步的，已同步，已同步，已同步，已同步，已同步，已同步，

872
01:24:52,079 --> 01:24:53,079
它是同步的，已同步，已同步，已同步，已同步，已同步，已同步，

873
01:24:53,079 --> 01:24:58,920
是的，是的，我们看到我们已经同步了，它只是获得了历史障碍，吗

874
01:24:58,920 --> 01:25:05,319
状态之所以实现，是因为我们检查点同步了，所以现在它向后往后走，嗯，你是灯塔

875
01:25:05,319 --> 01:25:14,199
看到UM到达这里很重要一次，每12秒进口新块，所以它正在发生

876
01:25:14,199 --> 01:25:19,640
我们可能没有很多同行，因为我像随机互联网一样在VM上，但是是的

877
01:25:19,640 --> 01:25:25,180
该连锁店每12秒更新一次，因此它遵循当前状态。

878
01:25:25,180 --> 01:25:26,180
因此，它不是同步。

879
01:25:26,180 --> 01:25:27,180
没错。

880
01:25:27,180 --> 01:25:31,400
我期望它会告诉我，就像，你知道，当前的头是什么，它正在同步

881
01:25:31,400 --> 01:25:32,400
等等。

882
01:25:32,400 --> 01:25:33,740
但这没有发生。

883
01:25:33,740 --> 01:25:37,940
让我们使用其他一些。

884
01:25:37,940 --> 01:25:44,660
例如，我们可以对块号询问，例如，对吗？

885
01:25:44,659 --> 01:25:52,739
因此，我在这里问他块号，这是十六进制中的当前块号。

886
01:25:52,739 --> 01:26:03,460
因此，您可以从jsonrpc获得这些答案，其中大部分是在十六进制中编码的

887
01:26:03,460 --> 01:26:08,399
格式，它可以轻松地解码此问题，并且应与当前的FMBRHEAD相对应。

888
01:26:08,399 --> 01:26:13,500
是的，这就是您使用核心角色与之交谈的方式。

889
01:26:13,500 --> 01:26:18,500
当然，这可能是在许多不同的软件包中。

890
01:26:18,779 --> 01:26:21,420
您可以将其作为Web3PI中的Python软件包。

891
01:26:22,060 --> 01:26:25,060
它主要使用，与此RPC的通信

892
01:26:25,060 --> 01:26:29,140
大多用于使用，此URL适合可能

893
01:26:29,140 --> 01:26:32,760
bash脚本或您想快速检查的内容。

894
01:26:33,220 --> 01:26:34,859
但实际上，您使用web3pi

895
01:26:34,859 --> 01:26:39,100
在Dapps上的Ethers.js之类的东西，对吗？

896
01:26:40,159 --> 01:26:42,539
或在Python的后端，依此类推，

897
01:26:42,539 --> 01:26:47,380
或者您使用一些已经存在的工具，

898
01:26:47,380 --> 01:26:50,060
这使它变得更容易并包裹所有这些答案，

899
01:26:50,060 --> 01:26:53,640
因此，您无需手动阅读所有字段

900
01:26:53,640 --> 01:26:58,279
并从不同的编码或其他内容中转移它。

901
01:26:59,180 --> 01:27:04,180
另外，您当然可以在钱包中使用它。

902
01:27:09,060 --> 01:27:11,479
因此，让我们这样做。

903
01:27:11,479 --> 01:27:23,859
我在这里安装了一个元掩体，为此目的进行了研讨会。

904
01:27:23,859 --> 01:27:31,359
它有一些默认的以太坊主网，什么，但是我们可以切换到，好吧，等等

905
01:27:31,359 --> 01:27:33,239
等等，等等，等等。

906
01:27:33,239 --> 01:27:35,879
是的，我想切换网络，添加网络。

907
01:27:35,880 --> 01:27:43,159
因此，在这里我想添加网络，这将指向我自己的网络，哦，等等，有一些

908
01:27:43,159 --> 01:27:44,440
问题，对不起。

909
01:27:44,440 --> 01:27:48,480
我在Mac上的Tech上运行最佳，不错。

910
01:27:48,480 --> 01:27:53,279
是的，如果您需要帮助，我们最终会做到这一点。

911
01:27:53,279 --> 01:27:55,760
是的，手动添加网络。

912
01:27:55,760 --> 01:28:13,159
因此，我们正在做HTTP Localhost，这是它想要的链ID的地方，它无法获取，

913
01:28:13,159 --> 01:28:14,560
很好。

914
01:28:14,560 --> 01:28:16,460
RPC正确吗？

915
01:28:16,460 --> 01:28:19,300
它杀死了吗？

916
01:28:19,300 --> 01:28:20,300
不。

917
01:28:20,300 --> 01:28:22,800
也许我需要允许它。

918
01:28:22,800 --> 01:28:24,600
因此，让我们尝试不同的RPC。

919
01:28:24,600 --> 01:28:33,380
因此，让我们测试它是否不好。

920
01:28:33,380 --> 01:28:36,320
因此，在这种情况下，您可能想做的

921
01:28:36,320 --> 01:28:48,760
是要杀死get＆查看HTTP的帮助，是的，

922
01:28:48,760 --> 01:28:51,480
课程域。

923
01:28:51,479 --> 01:29:05,299
是的，所以也许我们想做查询域或vhost

924
01:29:05,299 --> 01:29:09,659
确保这可能是问题。

925
01:29:14,699 --> 01:29:16,699
好的，我想知道，我想知道。

926
01:29:16,699 --> 01:29:18,519
但这应该起作用。

927
01:29:18,520 --> 01:29:20,800
我不知道这是否总是有效。

928
01:29:20,800 --> 01:29:25,800
我不知道这是否是连锁ID。

929
01:29:25,800 --> 01:29:26,800
Localhost。

930
01:29:26,800 --> 01:29:27,800
我在做什么？

931
01:29:27,800 --> 01:29:28,800
错误，伙计们。

932
01:29:28,800 --> 01:29:29,860
来吧，来吧，帮助我解决这个问题。

933
01:29:29,860 --> 01:29:30,860
这会起作用。

934
01:29:30,860 --> 01:29:31,860
我想做什么？

935
01:29:31,860 --> 01:29:32,860
反而...

936
01:29:32,859 --> 01:29:51,859
也许我想这样做，而不是5？

937
01:29:51,859 --> 01:29:52,920
太糟糕了。

938
01:29:59,759 --> 01:30:00,420
好的。

939
01:30:03,199 --> 01:30:04,279
好吧，让我们看看。

940
01:30:04,460 --> 01:30:05,719
你有什么问题？

941
01:30:10,779 --> 01:30:11,619
住口。

942
01:30:21,859 --> 01:30:38,559
它不是不起作用，这很奇怪，这不是很好，我认为它在我的钱包里

943
01:30:38,559 --> 01:30:44,339
我现在很生气，现在我不知道为什么会说这发生了

944
01:30:44,339 --> 01:30:48,899
提示和窍门，也许我们可以尝试其他钱包，但它总是在MetAmask中像这样起作用

945
01:30:48,899 --> 01:30:54,439
我想知道是什么阻止了我。

946
01:30:54,439 --> 01:30:56,239
什么是链条ID？

947
01:31:06,299 --> 01:31:08,379
它本身应该拿走，对吗？

948
01:31:08,379 --> 01:31:10,199
因为你可以问。

949
01:31:10,199 --> 01:31:14,199
我们只是在另一个窗口中做到了，对吗？

950
01:31:18,899 --> 01:31:36,179
让我再试一次，它将向您显示块数字有效，是Localhost 8 5 4 5，

951
01:31:36,180 --> 01:31:39,659
也正确。

952
01:31:39,659 --> 01:31:42,500
所以我不知道。

953
01:31:42,500 --> 01:31:52,119
是什么是羞耻的ID，这是正确的。

954
01:31:52,119 --> 01:31:58,659
好的，那不是很好，因为我可以通过爬行到达

955
01:31:58,659 --> 01:32:04,460
但是由于某种原因，我无法在Metamask中达到它。

956
01:32:04,460 --> 01:32:09,739
也许我缺少一些东西，也许有一些浏览器设置或其他东西。

957
01:32:09,739 --> 01:32:14,859
是的，无论如何都有浏览器钱包真是个愚蠢的

958
01:32:14,859 --> 01:32:21,859
很抱歉，我现在很失望，我不确定如何，让我们在这里添加ephemera。

959
01:32:21,859 --> 01:32:24,060
嗯，是的。

960
01:32:24,060 --> 01:32:26,699
让我们在这里添加ephemera。

961
01:32:26,699 --> 01:32:32,739
啊，这是令人失望的，这太糟糕了。

962
01:32:32,739 --> 01:32:40,019
这是公共RPC，但仍然很好。

963
01:32:40,019 --> 01:32:43,019
是的。

964
01:32:43,019 --> 01:32:45,619
也许我需要一些额外的冲突，

965
01:32:45,619 --> 01:32:49,699
但是我做了很多次，我认为我需要的一切

966
01:32:49,699 --> 01:32:51,779
只是这个。

967
01:32:51,779 --> 01:32:57,679
我实际上有自己的节点运行，但这是

968
01:32:57,679 --> 01:32:59,340
缺少一些标题。

969
01:32:59,340 --> 01:33:00,739
但这应该起作用。

970
01:33:00,739 --> 01:33:02,300
它应该起作用。

971
01:33:02,739 --> 01:33:08,880
我不知道这是缺少一些愚蠢的冲突，我认为我们有

972
01:33:08,880 --> 01:33:14,079
对不起，这是灯塔

973
01:33:14,079 --> 01:33:20,139
嗯，我们一直在这里运行它，是的，也许课程域是错误的或

974
01:33:20,139 --> 01:33:23,159
这样的东西

975
01:33:32,739 --> 01:33:38,260
哦，哦，天哪，地址是什么

976
01:33:39,699 --> 01:33:42,659
所有接口

977
01:33:50,899 --> 01:33:56,739
好的，很好，也许现在让我们再尝试一次，因为我

978
01:33:56,739 --> 01:33:59,779
变得紧张和好奇，这是一个搜索

979
01:33:59,779 --> 01:34:02,619
希望您学到这么快的东西。

980
01:34:02,619 --> 01:34:03,439
是的。

981
01:34:03,439 --> 01:34:05,059
哦，这很好。

982
01:34:05,059 --> 01:34:09,439
是的，课程版本需要来自Chrome扩展名。

983
01:34:09,439 --> 01:34:12,199
哦，太丑了。

984
01:34:12,199 --> 01:34:14,099
但是让我们尝试一下。

985
01:34:14,099 --> 01:34:15,619
让我们尝试一下。

986
01:34:15,619 --> 01:34:18,239
好的，让我们再次添加一个自定义网络。

987
01:34:20,899 --> 01:34:25,380
是的，现在我想要Moz Extension，这就是一个。

988
01:34:25,380 --> 01:34:28,859
那么我应该在课程域中使用它吗？

989
01:34:29,779 --> 01:34:32,059
好吧，让我们尝试一下。

990
01:34:32,059 --> 01:34:37,059
让我们再试一次。

991
01:34:37,059 --> 01:34:38,340
或许。

992
01:34:38,340 --> 01:34:45,759
啊，现在正在工作。

993
01:34:45,759 --> 01:34:50,239
好吧，我做了一张通配符。

994
01:34:50,239 --> 01:34:53,319
那可能是最糟糕的主意。

995
01:34:53,319 --> 01:35:00,359
嗯，是的，目前它不会让我连接，因为它目前正在使用，因为我已经

996
01:35:00,359 --> 01:35:08,039
现在添加了网络，现在可以工作它使我平静下来，但是是的，这让我失望了，但是

997
01:35:08,039 --> 01:35:14,519
是的，我所能看到的，我要做的就是要放置通配符嗯，是的

998
01:35:14,520 --> 01:35:23,720
它没有指定最多的扩展名，我为课程域做了um通配符

999
01:35:23,720 --> 01:35:29,720
您不应该为主机做通配符的人，而我也在所有界面上运行

1000
01:35:29,720 --> 01:35:35,720
在本地主机中，它正在运行在包括本地主机在内的所有可用接口上，但是

1001
01:35:35,720 --> 01:35:40,760
嗯，这是您不应该做的事情，因为它在VM中，我不介意

1002
01:35:40,760 --> 01:35:50,600
但是您不应该在知道认真的设置中这样做

1003
01:35:50,600 --> 01:35:58,680
只是杀死这一点，我想知道课程域是否会帮助它是一个有趣的

1004
01:35:58,680 --> 01:36:05,880
这是有趣的知识，肯定每年再次添加网络，这是x

1005
01:36:05,880 --> 01:36:17,220
有用。因此，这是我设置在通配符上的核心域。是的，谢谢你

1006
01:36:17,220 --> 01:36:24,680
很多，梅尔兹登。这正是您对Bessu所说的。这是核心领域

1007
01:36:24,680 --> 01:36:30,699
问题。因此，这就像是一个安全功能，它不允许您连接

1008
01:36:30,699 --> 01:36:33,380
从某些随机字符串接口到您的节点

1009
01:36:33,380 --> 01:36:35,420
或类似的东西。

1010
01:36:35,420 --> 01:36:37,420
我想向你展示更多的东西

1011
01:36:37,420 --> 01:36:40,420
有记忆，就像运行一样

1012
01:36:45,239 --> 01:36:46,420
验证器部分。

1013
01:36:46,420 --> 01:36:47,859
让我们看看车间。

1014
01:36:47,859 --> 01:36:50,859
好吧，我们也许可以，是的，x，我们做到了，

1015
01:36:50,859 --> 01:36:51,939
或者也许也是控制台。

1016
01:36:51,939 --> 01:36:53,819
所以有一件事可以做到，

1017
01:36:53,819 --> 01:36:58,819
它是附件的，您需要拥有数据，

1018
01:37:00,699 --> 01:37:06,539
在这里，它是ephemery，现在我们在控制台中，所以不使用corel

1019
01:37:06,539 --> 01:37:11,819
我只能像他直接与他交谈，就像哦，告诉我你的同龄人，这是我的所有同龄人

1020
01:37:11,819 --> 01:37:17,979
连接到等，所以这是我想向你展示的一件小事。

1021
01:37:17,979 --> 01:37:24,300
例如，要像喜欢连接您的节点一样实用，所以您可以做的就是去

1022
01:37:24,300 --> 01:37:32,940
ethernets.io，在这里，您可以看到许多不同的节点，甚至可以检查Ephemery节点

1023
01:37:33,500 --> 01:37:42,940
当前的迭代和这里的帮助您在帮助您找到这些都是所有实例

1024
01:37:42,940 --> 01:37:47,420
它正在运行的点对点客户端，因此您可以选择其中之一并添加

1025
01:37:47,420 --> 01:37:58,319
它是同伴，你知道吗？所以我要连接。现在，我编辑了此Enote的同行。我只是编辑

1026
01:37:58,319 --> 01:38:05,720
通知的注释。它将其编辑为量化宽度

1027
01:38:05,720 --> 01:38:13,380
它，这将有助于发现更多的同龄人等。然后当我去统计

1028
01:38:13,380 --> 01:38:21,779
我看着它，或者当我转到笔记部分时，嗯，您可以看到最新的笔记

1029
01:38:21,779 --> 01:38:26,980
嗯，好的，这是我知道您可以看到所有有关它的信息

1030
01:38:26,980 --> 01:38:32,420
然后连接到这个轨道，您可以自己阅读所有这些值，这是很好的好方法

1031
01:38:32,420 --> 01:38:41,140
确保您看到它是嗯，是的

1032
01:38:41,140 --> 01:38:44,980
而不是另一种方式，以便您可以确保像拨打与您的拨号一样

1033
01:38:44,980 --> 01:38:51,300
节点还可以，所以这是您可以做的事情，但是是的一件事如何添加同行

1034
01:38:51,300 --> 01:38:57,940
就像使用控制台一样，因为您想做的就是您知道没有这个

1035
01:38:57,940 --> 01:39:08,100
在此之前，使用IPC使用的是使用UM尝试使用此IPC文件作为通信

1036
01:39:08,100 --> 01:39:16,260
有了节点，您可以拥有的就是只有引擎吃，我知道网络会像这样的网络3

1037
01:39:16,260 --> 01:39:25,060
安全的安全UM UH uh uh umh命名空间在您的普通节点上启用，然后通过IPC连接到

1038
01:39:25,060 --> 01:39:32,740
admin和uh是的，处理您的节点，所以这是一个很好的例子

1039
01:39:32,739 --> 01:39:38,179
信任，因为您可以验证他们的数据，所以呃，这些不是我所显示的

1040
01:39:38,179 --> 01:39:44,340
就像爬网的实例一样，它只是为了获取，以便他们可以更轻松地收集您的数据

1041
01:39:45,460 --> 01:39:51,059
所以现在嗯，让我们进行一些民意调查，您想切换客户或我们可以转到

1042
01:39:51,059 --> 01:39:57,219
验证器就像我们现在已经超过90分钟了，验证器是我的最后一件事

1043
01:39:57,220 --> 01:40:04,180
想向你展示我不确定我是否可以，但让我们像电影上最简单的那样研究它

1044
01:40:04,180 --> 01:40:15,220
让我们快速去做吧，让我们去启动板，让我们去这里，让我们去抵消还可以的

1045
01:40:15,220 --> 01:40:18,659
首先，让我们从秋天那里得到一些钱，所以很容易我不需要教你

1046
01:40:18,659 --> 01:40:33,199
它。啊，它只是加载。好的。地址在这里。谢谢。我们有。如果我们想成为

1047
01:40:33,199 --> 01:40:38,539
经过验证，我们需要学习所有重要的东西。是的，是的，是的。不要做。

1048
01:40:38,539 --> 01:40:41,880
阅读。特别是如果您使用的是主应用程序。但是现在我只想告诉你如何

1049
01:40:41,880 --> 01:40:49,800
存款和嗯，这实际上也是一个很好的知识来源

1050
01:40:49,800 --> 01:40:55,239
LaunchPad为您提供了有关不同客户的一些很好的信息

1051
01:40:55,239 --> 01:41:00,199
作为验证器的责任和我喜欢跳过的配置

1052
01:41:00,199 --> 01:41:08,199
因为我们知道所有这些，嗯，它告诉您如何生成钥匙，所以是的

1053
01:41:08,199 --> 01:41:16,119
我想向您展示的东西，以太坊验证器的工作方式是它正在使用

1054
01:41:16,119 --> 01:41:24,439
某种UM私有键可以签署证明数据或发布新博客

1055
01:41:24,439 --> 01:41:32,119
您需要用钥匙签名

1056
01:41:32,119 --> 01:41:40,199
存款合同是在以太坊上的最富有的合同

1057
01:41:40,920 --> 01:41:47,960
然后您将您的交易存入其中

1058
01:41:48,519 --> 01:41:53,960
嗯，然后激活您的Volator，因此您会看到这是您可以阅读的存款合同

1059
01:41:53,960 --> 01:42:01,159
这里的代码，您始终确保您在Mainnet上与此合同上的互动

1060
01:42:02,119 --> 01:42:09,159
因此，在Ephemery或测试网上，它在不同的地址上，例如4242。

1061
01:42:09,159 --> 01:42:16,340
如果您使用的是Windows之类的东西，则可以像这样的GUI使用，但是我们可以简单地使用

1062
01:42:16,340 --> 01:42:25,659
使用此终端生成密钥。

1063
01:42:25,659 --> 01:42:38,539
它。我下载了存放存款CLI。因此，让我们打开它。在这里我们有这个功能

1064
01:42:38,539 --> 01:42:44,260
称为存款。我们可以使用现有的或新的助记符。你需要

1065
01:42:44,260 --> 01:42:53,939
首先制作一个密码。让我们作为新的做。这使您可以生成钥匙

1066
01:42:53,939 --> 01:42:57,599
要导入您的验证器，然后运行它。

1067
01:42:57,599 --> 01:42:59,219
让我们运行它。

1068
01:42:59,219 --> 01:43:03,759
在这种情况下，我们希望它很重要。

1069
01:43:03,759 --> 01:43:05,279
我们需要密码。

1070
01:43:05,279 --> 01:43:12,739
好的，我们需要写下来。

1071
01:43:12,739 --> 01:43:17,159
即使在测试网上也写下来也是一件好事。

1072
01:43:17,159 --> 01:43:20,979
它发生在我身上，我正在运行它，我丢失了它。

1073
01:43:20,979 --> 01:43:25,299
我无法恢复它们，我不得不再次存入它很烦人，所以你想

1074
01:43:27,699 --> 01:43:34,659
检查钥匙，现在我们有了可以使用的密钥，可以使用

1075
01:43:37,619 --> 01:43:46,259
使用押金可以，是的，是的是数据，因此存款数据将信息告知网站

1076
01:43:46,260 --> 01:43:53,060
有关我们将要签订合同的验证器公共密钥的数据，它将

1077
01:43:53,060 --> 01:44:00,180
帮助我们进行交易嗯，这就像一个嗯，就像是一种简单的漫步方式

1078
01:44:00,820 --> 01:44:06,980
好吧，我们有一个32 FM阵列测试，这是我了解我了解的一个验证器

1079
01:44:06,980 --> 01:44:11,300
嗯，我要快速进行它是一件好事，但是您可以阅读此信息以了解

1080
01:44:11,300 --> 01:44:14,779
而且赌注要好得多。

1081
01:44:15,860 --> 01:44:17,500
让我们去存款。

1082
01:44:20,360 --> 01:44:25,119
我想向您展示的是您如何导入，

1083
01:44:25,119 --> 01:44:28,520
哦，等等，我有30个吃饭，但我需要更多

1084
01:44:28,520 --> 01:44:30,220
因为有费用，对吗？

1085
01:44:30,220 --> 01:44:32,239
当然，有费用。

1086
01:44:33,880 --> 01:44:35,380
存款再次在哪里？

1087
01:44:35,380 --> 01:44:37,119
好吧，再一次。

1088
01:44:39,180 --> 01:44:40,720
我再次需要地址。

1089
01:44:41,300 --> 01:44:48,579
好吧，这实际上是我需要将其更改为38的好点。

1090
01:44:52,640 --> 01:45:00,920
在这里，我们又走了

1091
01:45:00,920 --> 01:45:19,720
希望它仍然没有约束以前的交易。

1092
01:45:19,720 --> 01:45:26,079
好的，所以主要是这样。

1093
01:45:26,079 --> 01:45:37,420
因此，我们现在已经存款，只是存款，现在的灯塔在这里，您会在

1094
01:45:37,420 --> 01:45:46,319
其次，有一个新的验证器在等待，所以问题是现在我们必须

1095
01:45:46,319 --> 01:45:49,039
等待，等一下。

1096
01:45:49,039 --> 01:46:00,380
因此，激活网络上的验证器需要数小时。

1097
01:46:00,380 --> 01:46:03,199
是的，您看到它在量化宽松中。

1098
01:46:03,199 --> 01:46:06,880
它是在43秒前完成的，需要16至20。

1099
01:46:06,880 --> 01:46:18,359
因此，在此测试的一生中，它不会发生，因为它将不活动。

1100
01:46:18,359 --> 01:46:24,439
它是这样的，所以一直待定直到它死了，所以我们不想激活我们不想激活

1101
01:46:24,439 --> 01:46:30,359
这个，但我想向你展示，但我仍然想向你展示我们的后续行动

1102
01:46:31,399 --> 01:46:37,079
我们有那些钥匙，让我们假装我们正在等待激活

1103
01:46:38,359 --> 01:46:43,239
所以我们去灯塔，这次我们想运行有效的客户哦，但在我们需要之前

1104
01:46:43,239 --> 01:46:56,000
要导入数据，因此我们需要导入使用的密钥。

1105
01:46:56,000 --> 01:47:10,920
因此，让我们做客户经理，从数据鹿中导入它的数据灯塔。

1106
01:47:13,239 --> 01:47:15,239
是的，lhdata，好的。

1107
01:47:17,239 --> 01:47:23,639
测试网指向内存，可悲的是下载中。

1108
01:47:26,439 --> 01:47:28,439
真是一团糟。

1109
01:47:29,819 --> 01:47:35,059
目录使我们进入了实际

1110
01:47:38,059 --> 01:47:40,059
验证的键文件。

1111
01:47:43,239 --> 01:47:53,319
没想到好吧，哦，我需要做的好，现在我输入密码，所以您想要什么

1112
01:47:53,319 --> 01:47:57,399
当然，如果您有成千上万的验证者，您想做的是创建一个

1113
01:47:57,399 --> 01:48:03,239
文件或仅重复使用密码，嗯，如果您做的话，有一个功能

1114
01:48:03,239 --> 01:48:13,159
大约发短信，但现在我们将其导入灯塔数据库，我们在此处拥有验证器UH

1115
01:48:13,159 --> 01:48:20,319
因此，您会看到它是公钥，现在我们也能够运行灯塔。

1116
01:48:20,319 --> 01:48:24,159
我的意思是，您始终可以运行验证器，但这不会有帮助。

1117
01:48:24,159 --> 01:48:36,840
因此，现在我们需要将其作为实际有效客户端运行。

1118
01:48:36,840 --> 01:48:50,600
因此，再次，我们要使用t进行下载，因此我们需要这里的数据，即lhdata，

1119
01:48:50,600 --> 01:48:52,819
我认为可能是。

1120
01:48:52,819 --> 01:48:54,720
我不知道。

1121
01:48:54,720 --> 01:48:59,400
等待，等等，这将是knote，为什么？

1122
01:48:59,400 --> 01:49:00,400
为什么？

1123
01:49:00,400 --> 01:49:03,060
我没有在bknote上启用HTTP？

1124
01:49:03,060 --> 01:49:04,060
我做到了。

1125
01:49:04,060 --> 01:49:06,640
哦，我做到了。

1126
01:49:06,840 --> 01:49:13,520
好的，当然，验证器使用HTTP端点连接到信标节点。

1127
01:49:14,239 --> 01:49:16,079
因此需要启用它。

1128
01:49:17,480 --> 01:49:20,039
而且您在这里看到它已连接到信标节点。

1129
01:49:21,060 --> 01:49:25,140
在这里，它连接到浮游保护的信标节点。

1130
01:49:26,199 --> 01:49:28,960
它正在等待激活。

1131
01:49:29,400 --> 01:49:34,699
因此，您会看到要激活需要一段时间。

1132
01:49:34,699 --> 01:49:46,039
如果您正在运行验证器，这是您想要始终设置的东西。

1133
01:49:46,039 --> 01:49:48,920
我有吗？

1134
01:49:48,920 --> 01:49:49,920
不。

1135
01:49:49,920 --> 01:49:53,159
我没有。

1136
01:49:53,159 --> 01:50:04,439
因此，将您的地址设置为作为收费收件人的地址，现在我们已经成功

1137
01:50:04,439 --> 01:50:09,559
在验证器期间。很抱歉，我无法向您展示电台，这将需要

1138
01:50:09,559 --> 01:50:14,839
一段时间以存入。如果我足够聪明，我会将其存放在研讨会之前，

1139
01:50:14,839 --> 01:50:20,519
实际上，我今天早上做了，但它仍然没有激活。是的，这是最好的

1140
01:50:20,519 --> 01:50:25,139
我现在可以做。是的，您看到它又回到了信标节点，它正在等待，

1141
01:50:25,139 --> 01:50:32,439
因此，现在验证器客户端正在坐着和等待信标节点检查

1142
01:50:32,439 --> 01:50:39,719
因为它得到了这条龙的导入新块，最后灯塔节点抱怨

1143
01:50:39,719 --> 01:50:47,399
它只有一对不好

1144
01:50:47,399 --> 01:50:56,199
现在因为我们不再需要它，但是是的，这是一个家庭，这就是记忆

1145
01:50:56,199 --> 01:51:05,239
ephemera设置还可以，呃，嗯，是的，是的，我想我们要在将近两个小时

1146
01:51:05,239 --> 01:51:09,800
我认为这还远远不够，我看不到任何问题

1147
01:51:11,559 --> 01:51:17,960
哦，呃，不，在下一个时代不会被激活

1148
01:51:18,519 --> 01:51:25,319
像在许多时期一样被激活，uh uh正在寻找执行，对不起，共识规格

1149
01:51:25,319 --> 01:51:31,159
在激活周期很好地解释的地方，寻找激活期，这取决于

1150
01:51:31,159 --> 01:51:38,199
关于队列中有多少验证者，这取决于

1151
01:51:38,199 --> 01:51:44,439
等待那个

1152
01:51:44,439 --> 01:51:47,559
这一切还不是活跃，我应该昨天做到，对不起。

1153
01:51:47,560 --> 01:51:49,020
它。

1154
01:51:49,020 --> 01:51:56,560
是的，无论如何，如果您有任何疑问，请告诉我。

1155
01:51:56,560 --> 01:52:02,380
如果您还有其他想法，您想让我演示，我们讨论了环境

1156
01:52:02,380 --> 01:52:05,340
和客户。

1157
01:52:05,340 --> 01:52:09,980
我们通过二进制来吸引客户，然后进行了编译。

1158
01:52:09,980 --> 01:52:12,940
我们没有做Docker，但是如果您想这样做，可以做到。

1159
01:52:12,939 --> 01:52:19,259
您可以编写自己的Docker脚本，也可以使用官员，这很容易您只需

1160
01:52:19,259 --> 01:52:21,500
Docker Run。

1161
01:52:21,500 --> 01:52:30,339
Docker设置更有问题的是您需要知道如何处理

1162
01:52:30,339 --> 01:52:37,579
端口和网络，无论您要以主机模式运行还是要创建它

1163
01:52:37,579 --> 01:52:42,659
例如，当您连接到不同客户端时，它是最好的

1164
01:52:42,659 --> 01:52:44,119
它在某些撰写文件中。

1165
01:52:44,119 --> 01:52:46,819
所以，是的，就像码头机上的一些事情。

1166
01:52:49,819 --> 01:52:52,519
由于这是一个自定义的创世纪，我们做到了。

1167
01:52:52,519 --> 01:52:54,159
我们没有尝试不同的客户。

1168
01:52:54,159 --> 01:52:56,460
我们应该尝试其他一些客户。

1169
01:52:56,460 --> 01:53:00,260
我建议Nimbus和Erigon的原因

1170
01:53:00,260 --> 01:53:02,019
尼布斯非常轻巧，我

1171
01:53:02,019 --> 01:53:05,800
知道这将是我低硬件上的问题

1172
01:53:05,800 --> 01:53:06,599
这里。

1173
01:53:06,599 --> 01:53:09,099
从这个角度来看，埃里贡也很有趣。

1174
01:53:12,659 --> 01:53:18,720
从其同步的角度来看，埃尔贡很有趣。

1175
01:53:18,720 --> 01:53:25,720
就像它具有舞台同步，并且有关此刻正在发生的事情的有趣日志。

1176
01:53:25,720 --> 01:53:34,500
因此，您实际上可以看到这种不同的同步范式，它也使用红色。

1177
01:53:34,500 --> 01:53:41,139
我们访问了RPC，我们使用了验证器，但我没有进入SystemD设置，但是也许我们

1178
01:53:41,139 --> 01:53:42,139
可以稍后再做。

1179
01:53:42,140 --> 01:53:49,420
现在，如果您想继续前进，我们可以去EPFSG研讨会。

1180
01:53:53,480 --> 01:53:56,460
没关系。

1181
01:53:56,680 --> 01:53:57,220
这是一个很好的链接。

1182
01:53:57,539 --> 01:53:59,500
无论如何，在这里，我们可以在这里见面。

1183
01:53:59,700 --> 01:54:06,220
如果您想继续，我们将来到此GT并关闭录音，我们可以做更多的练习。

1184
01:54:06,220 --> 01:54:12,060
是，如果您有任何东西，您知道自己的东西，您可以分享屏幕，我可以

1185
01:54:12,060 --> 01:54:16,940
问你一些你可以问我一些问题，我可以做一些故障排除，但你知道你是否

1186
01:54:16,940 --> 01:54:24,060
还有其他任何问题，例如继续前进的临时迭代，这是一周

1187
01:54:24,060 --> 01:54:28,780
现在，我们要做一个月的嗯，但是现在是星期四晚上的每周

1188
01:54:28,779 --> 01:54:39,179
或星期四晚上。我如何看交易孟买？是的，你正在使用

1189
01:54:39,179 --> 01:54:51,340
RPC，正如我在以太坊董事会所展示的JSON-RPC一样。这是最好的文档

1190
01:54:51,340 --> 01:54:57,300
如果您想查看所有不同的电话，都可以很好地解释。

1191
01:54:57,300 --> 01:55:03,100
所以，是的，如果您想查看斑点，则需要使用信标API。

1192
01:55:03,100 --> 01:55:08,739
那些在...

1193
01:55:08,739 --> 01:55:16,500
是的，这个。

1194
01:55:16,500 --> 01:55:21,100
因此，对于斑点，您可以读取每个插槽的斑点。

1195
01:55:21,100 --> 01:55:26,380
在...不是事件...中...不？

1196
01:55:26,380 --> 01:55:30,400
不，就是这样...等待它不打开？

1197
01:55:30,400 --> 01:55:32,440
发生了什么事？发生了什么事？

1198
01:55:32,440 --> 01:55:35,320
啊，好的，现在，哦，天哪。

1199
01:55:35,320 --> 01:55:39,560
好的，呃，信标，信标，不，不，这是...

1200
01:55:44,320 --> 01:55:46,320
该死，那是哪一个？

1201
01:55:51,100 --> 01:55:54,340
啊，在这里。

1202
01:55:54,340 --> 01:55:59,660
哦，是的。

1203
01:55:59,660 --> 01:56:05,180
因此，根据博客，您可以在此处获取博客餐饮。

1204
01:56:05,180 --> 01:56:07,079
这些博客对用户并不有趣。

1205
01:56:07,079 --> 01:56:15,220
除非您要对历史记录进行归档，否则您实际上并不需要获得它们

1206
01:56:15,220 --> 01:56:16,220
或一些东西。

1207
01:56:16,220 --> 01:56:18,140
您无需访问博客。

1208
01:56:18,140 --> 01:56:25,300
您可能想看到的是Mempool中的交易，那就是...

1209
01:56:25,300 --> 01:56:27,440
来吧，应该是...

1210
01:56:27,440 --> 01:56:32,180
抱歉，我现在对这次演讲感到失望。

1211
01:56:32,180 --> 01:56:35,539
但这只是IT名称空间。

1212
01:56:35,539 --> 01:56:52,699
因此，您可以通过哈希进行交易，但是您不想这样做。

1213
01:56:52,699 --> 01:57:01,500
您想做的就是在这里使用“ tote池”。

1214
01:57:01,500 --> 01:57:07,039
它使您可以研究它。

1215
01:57:07,039 --> 01:57:09,260
您会看到它需要更多的内容，这是

1216
01:57:09,260 --> 01:57:11,899
如果您想看它，您正在寻找什么。

1217
01:57:11,899 --> 01:57:14,760
是的，当然，会议记录。

1218
01:57:14,760 --> 01:57:16,460
所以记录了这一点。

1219
01:57:16,460 --> 01:57:18,380
现在我将其关闭并切换到Jitsi

1220
01:57:18,380 --> 01:57:19,960
有关更多现场会议。

1221
01:57:19,960 --> 01:57:23,920
因此，如果您有更多的询问或其他问题，

1222
01:57:23,920 --> 01:57:26,140
我们可以去吉西。

1223
01:57:26,140 --> 01:57:28,539
是的，我想那是节目。

1224
01:57:28,539 --> 01:57:30,920
我认为就是这样，伙计们。

1225
01:57:31,500 --> 01:57:34,260
好的。非常感谢，马里奥。

1226
01:57:34,520 --> 01:57:37,420
是的，如果您想继续参加

1227
01:57:37,420 --> 01:57:41,819
并从马里奥（Mario）获得一些动手帮助，

1228
01:57:42,180 --> 01:57:43,640
前往吉西。

1229
01:57:44,439 --> 01:57:45,340
谢谢，大家。

1230
01:57:46,460 --> 01:57:48,720
是的，非常感谢您的制作

1231
01:57:48,720 --> 01:57:50,420
整个两个小时与我在一起。

1232
01:57:50,539 --> 01:57:51,199
我很感激。

1233
01:57:51,220 --> 01:57:52,779
我希望你学到了一些东西。

1234
01:57:52,899 --> 01:57:53,979
我希望这不是太基础

1235
01:57:53,979 --> 01:57:57,800
并给了您一些有用的技能。

1236
01:57:58,539 --> 01:58:00,779
也许，是的。

1237
01:58:01,500 --> 01:58:13,260
否则我们将更多的代理商见到你们，谢谢乔什，谢谢大家再见

