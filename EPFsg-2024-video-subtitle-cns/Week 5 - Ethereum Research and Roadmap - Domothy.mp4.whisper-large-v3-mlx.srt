1
00:01:30,000 --> 00:01:32,000
所以

2
00:02:00,000 --> 00:02:29,979
©BF-Watch TV 2021

3
00:03:30,000 --> 00:03:59,979
谢谢。

4
00:04:00,000 --> 00:04:29,980
我们下次见。

5
00:04:30,000 --> 00:04:59,980
谢谢。

6
00:05:00,000 --> 00:05:17,819
好吧，欢迎来到以太坊协议研究小组的第五周。

7
00:05:18,579 --> 00:05:20,120
感谢您加入我们。

8
00:05:20,120 --> 00:05:32,240
今天的演讲将在以太坊路线图和目前正在发生的一些研究途径上作者。

9
00:05:33,699 --> 00:05:36,920
马里奥，我们现在能听到您的声音吗？

10
00:05:37,459 --> 00:05:39,199
是的，当然。嘿，大家，你能听到我的声音吗？

11
00:05:39,199 --> 00:05:39,660
惊人的。

12
00:05:40,220 --> 00:05:43,280
是的，非常感谢。我的相机再次熄灭。

13
00:05:43,840 --> 00:05:48,340
是的，谢谢您的介绍，乔什。我想你说的好吧。

14
00:05:48,339 --> 00:05:54,339
今天，我们正在Domothee谈论协议未来的路线图研究。

15
00:05:54,679 --> 00:06:00,560
在过去的三到四个星期中，我们介绍了协议不同领域的介绍和杂草

16
00:06:00,560 --> 00:06:02,859
以及这一切如何融合在一起。

17
00:06:02,959 --> 00:06:06,199
但这只是当前实例，即协议的当前版本。

18
00:06:06,799 --> 00:06:15,399
因此，未来带来了许多新的改进和功能，以及我们需要在到达那里之前需要弄清楚的许多有趣的研究。

19
00:06:15,399 --> 00:06:19,799
因此，我非常感谢今天有Damothee在这里告诉我们所有有关这些的信息。

20
00:06:19,799 --> 00:06:22,839
是的，舞台是你的。

21
00:06:22,839 --> 00:06:25,139
好的。谢谢你有我。

22
00:06:25,139 --> 00:06:27,359
我看到了第一张幻灯片。

23
00:06:27,359 --> 00:06:28,439
完美的。

24
00:06:28,539 --> 00:06:30,239
嗨，大家好。

25
00:06:30,239 --> 00:06:32,239
我的合法姓氏是Damothee。

26
00:06:32,599 --> 00:06:36,659
我喜欢将自己描述为以太坊的喉舌

27
00:06:37,099 --> 00:06:39,439
基金会研究研发。

28
00:06:39,439 --> 00:06:43,439
所以今天我要带您浏览整个路线图。

29
00:06:43,439 --> 00:06:44,439
所以整个

30
00:06:45,399 --> 00:06:50,839
您从Vitalik看到的全部图表，他每年更新

31
00:06:51,639 --> 00:06:57,719
乍一看，这有点混乱，所以我希望它能有所了解

32
00:06:57,719 --> 00:07:03,639
通过所有不同的敦促

33
00:07:03,639 --> 00:07:09,719
免费为我演示

34
00:07:09,720 --> 00:07:16,520
和从上到下。是的，乍一看，从外部的角度来看，这有点混乱。所以

35
00:07:17,560 --> 00:07:23,960
我真的很想得到...就像我做我的工作正确一样

36
00:07:23,960 --> 00:07:29,320
实际上，这是一个非常美丽的路线图，所有的碎片都合并在一起形成一个

37
00:07:30,040 --> 00:07:38,440
美丽的区块链。是的，我为所有的冲动都有一点TLDR。所以我要去一个

38
00:07:38,439 --> 00:07:46,600
它始于我们都知道的合并是以太坊历史上最重要的事件。

39
00:07:47,399 --> 00:07:50,199
TLDR是更好的股份证明。

40
00:07:51,180 --> 00:07:54,920
我们会看到我得到了所有这些幻灯片。

41
00:07:55,779 --> 00:07:57,699
因此，信标连锁店发布。

42
00:07:58,399 --> 00:08:00,620
从信标链到合并。

43
00:08:00,740 --> 00:08:05,079
我只是在这里使用执行层和信标链窃取图表。

44
00:08:05,079 --> 00:08:12,219
就像在合并之前一样

45
00:08:12,219 --> 00:08:18,919
所有的责任只是验证者投票。我的猫会是

46
00:08:18,919 --> 00:08:24,699
在整个演讲中令人讨厌。我提前道歉。是的

47
00:08:24,699 --> 00:08:28,639
因此，信标连锁店有将近一百万个主动验证器，所以很多

48
00:08:28,639 --> 00:08:32,860
与合并相比，合并增强的经济安全

49
00:08:34,039 --> 00:08:36,039
我在聊天中看到了评论

50
00:08:37,539 --> 00:08:43,199
与现场证明相比，在像整个整体之前没有罚款之前的工作证明

51
00:08:43,199 --> 00:08:49,580
只是您浪费了哈希的税率，而您不会得到回报，而现在你们都得到了回报

52
00:08:49,899 --> 00:08:55,740
如果您喜欢恶意或做任何事情，您会受到处罚吗？那不是

53
00:08:55,740 --> 00:09:02,039
在信标链规范中指定。是的，那是1100亿美元的

54
00:09:02,039 --> 00:09:09,860
经济安全。之后，我只是去刷牙委员会，

55
00:09:09,860 --> 00:09:15,860
轻度协议非常快。这基本上是一个

56
00:09:15,860 --> 00:09:22,740
数百万个有效的签名，以验证每个时代，就像我认为

57
00:09:22,740 --> 00:09:31,100
每个插槽的512。对于不想验证的客户来说，这非常沉重

58
00:09:31,100 --> 00:09:38,680
一切。因此，相反，我们有512个验证器的旋转，它们喜欢额外的重量

59
00:09:38,680 --> 00:09:44,879
对于链的头是什么。这就是客户基本上信任那里的东西。喜欢

60
00:09:44,879 --> 00:09:51,919
这不是一种无信任的时尚，而是验证每个签名，但这是一个很好的

61
00:09:51,919 --> 00:09:58,219
协议如果您想拥有一个非常轻的客户端并知道规范链中的哪个块。

62
00:09:58,219 --> 00:10:08,579
因此，您可以看到我在GitHub上有关A16Z的Helios客户端的注释中添加的此链接

63
00:10:08,579 --> 00:10:14,620
因为他们非常简洁地介绍了Light Client协议，并且实际上建立了客户

64
00:10:14,620 --> 00:10:21,419
使用了。是的，只要我看过一个委员会，就把它留在你的脑海

65
00:10:21,419 --> 00:10:24,319
Leakeline协议将稍后再回来。

66
00:10:28,059 --> 00:10:30,919
将来的另一个项目是秘密领袖选举

67
00:10:31,459 --> 00:10:34,919
它将增强类似

68
00:10:36,620 --> 00:10:38,479
基本上，领导者是验证者

69
00:10:38,479 --> 00:10:41,779
那是在那个插槽上提出一个块。

70
00:10:42,360 --> 00:10:45,759
现在，这是一个偏执中的已知缺陷

71
00:10:45,759 --> 00:10:48,360
这位领导者提前知道。

72
00:10:48,360 --> 00:11:03,680
就像您可以认为，从理论上讲，还有一个攻击向量，例如大型池或恶意验证器可以将IP与特定验证器相关联，然后对该特定验证器发起拒绝服务攻击。

73
00:11:03,680 --> 00:11:10,159
因此，他们将无法提出一个块，然后所有的MVV将流入下一个块。

74
00:11:11,259 --> 00:11:15,899
现在，我们还没有看到到目前为止的这种攻击或任何附近的攻击。

75
00:11:16,100 --> 00:11:18,340
所以敲木头，这不会发生。

76
00:11:18,360 --> 00:11:24,919
但是，如果确实发生了，我们将使此项目开始更加优先。

77
00:11:25,139 --> 00:11:32,200
我们知道称为WISC的协议，基本上是每个验证器添加了一个随机位，

78
00:11:32,480 --> 00:11:38,419
对此潜在验证者列表有自己的随机性。

79
00:11:38,779 --> 00:11:43,480
就像你一样简单地简化了你，你

80
00:11:43,480 --> 00:11:49,779
没有人知道下一个领导者是谁是那个领导自己，他们在揭示一个障碍时露出自己

81
00:11:49,779 --> 00:11:55,039
因此，不可能提前攻击他们，因为您不知道自己必须攻击谁

82
00:11:58,539 --> 00:12:00,159
盒子里的盒子

83
00:12:00,159 --> 00:12:02,480
不，中间有一条小线

84
00:12:02,480 --> 00:12:09,340
因此，就像现在一样，它们就像行左侧的一切都是所做的，右边的一切都是

85
00:12:09,340 --> 00:12:10,420
是什么

86
00:12:10,419 --> 00:12:16,459
是的，这基本上是进度。因此，秘密领袖选举就像一半了，因为我们知道该怎么做

87
00:12:16,459 --> 00:12:20,159
但是，就像没有渴望实施它一样，也不是

88
00:12:20,459 --> 00:12:27,299
高优先级，然后就像我说的那样，除非我们开始看到实际的严重攻击，否则我们知道该实施什么

89
00:12:30,799 --> 00:12:36,519
之后，我不确定在共识层的第三周中谈论了多少

90
00:12:36,519 --> 00:12:42,000
但基本上，这是这个新概念在合并后添加到链条中

91
00:12:42,759 --> 00:12:48,019
12.6分钟或两个时代后。你有这个块。这就是最终确定的

92
00:12:48,919 --> 00:12:54,199
一个是绿色的粉红色。我认为您必须按照我们的要求，但我认为蓝色是

93
00:12:54,899 --> 00:12:57,079
大票和

94
00:12:57,559 --> 00:12:59,319
绿色就像普通物品一样

95
00:12:59,319 --> 00:13:05,759
但是就像这三个一样，只会导致大量的SSF，然后粉红色就像

96
00:13:06,519 --> 00:13:10,899
我认为这完全是用于量子的东西。

97
00:13:10,899 --> 00:13:12,139
是的。

98
00:13:12,139 --> 00:13:13,659
因此，这就像一个遥远的未来。

99
00:13:17,240 --> 00:13:18,759
是的，这么最终。

100
00:13:18,759 --> 00:13:21,199
12.6分钟后，块最终确定。

101
00:13:21,199 --> 00:13:23,659
然后，如果您想把这个块淘汰

102
00:13:23,659 --> 00:13:25,819
在链条上，这将花费您很多。

103
00:13:25,819 --> 00:13:29,659
就像裸露的最低限度是股份的三分之一

104
00:13:29,659 --> 00:13:31,740
只需立即蒸发。

105
00:13:31,740 --> 00:13:34,159
然后，这将是非常可检测的东西。

106
00:13:34,159 --> 00:13:38,860
所以这是我们想增强的东西

107
00:13:38,860 --> 00:13:42,079
并让这个终结发生每个插槽，

108
00:13:42,079 --> 00:13:46,659
每12秒或可能超过12秒

109
00:13:46,659 --> 00:13:51,039
如果我们增加了插槽时间，例如到达那里的方式。

110
00:13:54,659 --> 00:13:57,879
因此，我认为同步委员会被削减了，

111
00:13:57,879 --> 00:14:01,259
但是他们有较重的奖励。

112
00:14:01,259 --> 00:14:03,120
我不确定处罚方。

113
00:14:03,120 --> 00:14:04,279
这是一个很好的问题。

114
00:14:09,879 --> 00:14:10,860
好吧，是的。

115
00:14:10,860 --> 00:14:14,620
所以有一个，SSF是一个活跃的研究领域

116
00:14:14,620 --> 00:14:16,779
还有几种到达那里的方法。

117
00:14:16,779 --> 00:14:19,919
大部分都与签名数量有关

118
00:14:19,919 --> 00:14:23,019
我们必须在信标链上进行处理。

119
00:14:23,019 --> 00:14:26,220
所以现在有100万个活跃验证器

120
00:14:26,220 --> 00:14:29,879
这太重了，无法在一个插槽中做。

121
00:14:29,879 --> 00:14:32,580
所以当我们这样做时，

122
00:14:32,580 --> 00:14:37,720
与MaxeB一样，我们可以使用较少的验证器，以后我将要处理的验证器。

123
00:14:37,720 --> 00:14:39,720
或者我们可以...

124
00:14:43,780 --> 00:14:47,860
或者我们可以像旋转盖这样的活动验证器更少。

125
00:14:49,860 --> 00:14:57,700
就像只有一百万个验证器一次活跃，您只能有一小部分，并且会定期入睡。

126
00:14:57,700 --> 00:15:03,220
这意味着攻击性结局的成本将下降，但您仍然需要

127
00:15:03,220 --> 00:15:09,860
如果不是超级多数，则至少大部分股份，但实际的削减将下降

128
00:15:09,860 --> 00:15:18,580
如果涉及的主动验证器较少。是的，有一个关于Vitalik的ETH研究文章

129
00:15:18,580 --> 00:15:24,820
为此有一些解决方案路径。其中一个是拥有大型验证者

130
00:15:24,820 --> 00:15:33,940
2-13验证者而不是一百万。因此，它从一百万到8,192。进而

131
00:15:33,940 --> 00:15:42,100
具有某种分布式验证器堆栈，以保持无许可验证的目标。

132
00:15:42,100 --> 00:15:47,780
好吧，我要放开钥匙。那会把他闭嘴。

133
00:15:47,779 --> 00:15:55,639
是的，签名汇总计划是我基本上过度简化的另一种

134
00:15:55,639 --> 00:15:59,120
为了时间和简单。

135
00:15:59,120 --> 00:16:02,620
但是现在，我们认为这是在下一个幻灯片中。

136
00:16:02,620 --> 00:16:03,620
是的。

137
00:16:03,620 --> 00:16:08,919
在左侧，您拥有整个验证器和位字段的子网。

138
00:16:08,919 --> 00:16:11,100
这将汇总到一个签名中。

139
00:16:11,100 --> 00:16:17,480
因此，您可以将它们折叠成一个签名，而不是验证每个签名

140
00:16:17,480 --> 00:16:21,320
这只是每个验证器签名的总和。

141
00:16:22,360 --> 00:16:23,980
为此，您需要一些字段。

142
00:16:23,980 --> 00:16:28,220
因此，如果受影响的验证者

143
00:16:28,220 --> 00:16:31,680
是否签名，或证明块。

144
00:16:33,000 --> 00:16:37,899
是的，将来，这张幻灯片就像双重。

145
00:16:37,899 --> 00:16:41,800
第一部分是具有这种量子的bink链链

146
00:16:41,800 --> 00:16:44,840
因为我们今天使用的

147
00:16:44,840 --> 00:16:47,960
已知容易受到量子计算机的影响。

148
00:16:47,960 --> 00:16:51,540
因此，所有依赖密码学的电曲线的一切，

149
00:16:51,540 --> 00:16:54,340
即我们在标准链上使用的BLS签名，

150
00:16:54,340 --> 00:16:56,420
那将不得不离开

151
00:16:56,420 --> 00:16:59,240
如果以及何时获得可扩展的量子计算机。

152
00:16:59,240 --> 00:17:02,920
否则，可能会发生大量问题。

153
00:17:04,180 --> 00:17:09,180
是的，同样，Vitalik有这篇文章

154
00:17:09,600 --> 00:17:12,880
在鲜明的聚集中，因为鲜明，

155
00:17:12,880 --> 00:17:16,900
对于那些不知道的人，这是一个简洁的

156
00:17:16,900 --> 00:17:20,400
零知识证明完全依赖于哈希。

157
00:17:20,400 --> 00:17:23,380
众所周知，量子计算机

158
00:17:23,380 --> 00:17:24,680
不能惹哈希。

159
00:17:24,680 --> 00:17:27,960
因此，如果您只是用证据汇总的东西

160
00:17:27,960 --> 00:17:30,740
有人签了

161
00:17:30,740 --> 00:17:33,440
我们可以拥有一个防量子的信标链

162
00:17:33,440 --> 00:17:37,140
以及更井井有条的人。

163
00:17:37,140 --> 00:17:40,080
而且您会看到右边有点混乱

164
00:17:40,080 --> 00:17:42,580
每个人验证者汇总的签名

165
00:17:42,579 --> 00:17:45,119
当他们收到它们之前，直到我们走到最后。

166
00:17:47,259 --> 00:17:51,619
然后我们获得了最终的汇总签名

167
00:17:51,619 --> 00:17:54,480
或者说是每个验证者投票的证明

168
00:17:54,480 --> 00:17:56,099
与位字段。

169
00:17:56,099 --> 00:18:00,539
又一次，就像量子的东西一样，

170
00:18:00,539 --> 00:18:02,720
只是聚集很酷

171
00:18:03,919 --> 00:18:06,500
因为这是一个非常困难的问题

172
00:18:06,500 --> 00:18:09,019
要拥有这些位字段，例如汇聚在一起

173
00:18:09,019 --> 00:18:11,480
当您是以前的证明之一

174
00:18:11,480 --> 00:18:16,620
已经具有验证器签名，然后您要汇总它们。

175
00:18:16,620 --> 00:18:19,039
我认为这就是合并。

176
00:18:19,039 --> 00:18:23,759
我很快就浏览了每个项目。

177
00:18:23,759 --> 00:18:26,000
如果有一些问题，我可以花一些时间。

178
00:18:26,000 --> 00:18:27,740
所以我给你看我的猫。

179
00:18:27,740 --> 00:18:29,599
他是发出所有声音的人。

180
00:18:29,599 --> 00:18:42,059
可及的橙色猫。

181
00:18:42,639 --> 00:18:43,759
他们非常可替代。

182
00:18:46,099 --> 00:18:46,879
我的心。

183
00:18:48,219 --> 00:18:49,599
他只是想注意。

184
00:18:51,779 --> 00:18:53,559
好吧，接下来是激增。

185
00:18:53,659 --> 00:18:56,719
我认为这更有趣。

186
00:18:56,720 --> 00:19:01,700
因为是的，是的，是...

187
00:19:01,700 --> 00:19:06,920
是的，该存储将为汇总提供更多数据可用性。

188
00:19:07,000 --> 00:19:10,579
我将再次大而简化这意味着什么

189
00:19:10,579 --> 00:19:13,079
涉及所有多项式魔术。

190
00:19:14,000 --> 00:19:17,620
因此，首先是10,000英尺的滚动。

191
00:19:17,860 --> 00:19:20,059
我们必须了解滚动的含义

192
00:19:20,059 --> 00:19:23,039
以及为何以太坊拍摄以滚动为中心的路线图。

193
00:19:23,039 --> 00:19:41,039
因此，基本上是缩放以太坊，目标一直是某种形式的碎片，而不是让每个验证器检查整个链条，而是我们将拥有一个像迷你区块链这样的碎片，每个验证者都像是负责区块链的较小子集。

194
00:19:41,039 --> 00:19:49,680
区块链，但事实证明，这不仅很难做到，而且一旦我们这样做，

195
00:19:49,680 --> 00:19:56,159
将变得更加成熟，准备扩大规模，他们不会使用这些碎片太多

196
00:19:56,159 --> 00:20:01,440
正如我们希望他们会的那样，我们要做的就是我们要说好吧，我们不会扩展

197
00:20:02,079 --> 00:20:07,519
执行，但我们只专注于数据，然后这些数据将是可扩展的

198
00:20:07,519 --> 00:20:12,519
并转换为汇总的第2层执行。

199
00:20:13,139 --> 00:20:14,700
而真是太酷的东西

200
00:20:14,700 --> 00:20:17,200
这是诚实的多数假设

201
00:20:17,200 --> 00:20:20,779
至少有51％的验证者必须说实话

202
00:20:20,779 --> 00:20:23,079
进入n中的一个

203
00:20:23,079 --> 00:20:27,220
诚实的参与者只需要一个

204
00:20:27,220 --> 00:20:30,859
确保汇总会诚实地参与。

205
00:20:31,819 --> 00:20:33,900
所以有两个品牌的汇总品牌，

206
00:20:33,900 --> 00:20:36,139
乐观和零知识。

207
00:20:36,140 --> 00:20:40,320
乐观的是，将您的头缠住非常简单。

208
00:20:40,520 --> 00:20:44,080
基本上，每次交易都被淘汰到第一层，

209
00:20:44,080 --> 00:20:48,140
而且它们都被认为是有效的，而无需一一检查。

210
00:20:48,300 --> 00:20:52,380
因此，他们乐观地假设交易有效。

211
00:20:52,680 --> 00:20:56,000
但是，如果它们不有效，那么有人可以拿走数据并说，

212
00:20:56,040 --> 00:20:58,259
嘿，音序器是邪恶的。

213
00:20:58,400 --> 00:21:01,340
他试图打印一堆数据或窃取资金

214
00:21:01,340 --> 00:21:05,420
不涉及私钥。

215
00:21:05,420 --> 00:21:12,620
因此，在第1层上有某种欺诈证据可以纠正这一点，但只有在存在分歧时。

216
00:21:12,940 --> 00:21:21,360
因此，这就像拥有一个法律制度，您拥有法院执行的合同。

217
00:21:21,360 --> 00:21:28,980
但实际上，仅仅能够执行合同的威胁就足以让每个人诚实地参加。

218
00:21:29,820 --> 00:21:35,300
因为否则，每次向法庭的每一份合同都不会像社会那样很好地扩展。

219
00:21:35,420 --> 00:21:39,080
因此，这是一种类比，使我早期就对我发出了点击。

220
00:21:40,380 --> 00:21:44,900
零知识的滚动在涉及的密码中涉及更多的密码，

221
00:21:45,380 --> 00:21:49,539
您拥有这些简洁的证据，这些证据只是压缩了整个

222
00:21:49,539 --> 00:21:53,980
在第二层执行的简短证明可以通过第一层进行验证。

223
00:21:56,360 --> 00:21:56,660
和...

224
00:21:59,660 --> 00:22:02,779
在这两种情况下，您都需要两者...

225
00:22:02,779 --> 00:22:05,339
第1层上可用的所有汇总数据。

226
00:22:05,559 --> 00:22:07,379
就像在乐观的卷起一样，

227
00:22:07,420 --> 00:22:08,960
您需要能够拥有数据

228
00:22:08,960 --> 00:22:11,279
能够挑战恶意的人。

229
00:22:12,399 --> 00:22:13,720
在这两种情况下，也

230
00:22:13,839 --> 00:22:16,899
您希望能够强制交易包容性。

231
00:22:17,240 --> 00:22:19,240
因此，例如，如果您有资金

232
00:22:19,240 --> 00:22:22,299
那是一个想审查您的音序器，

233
00:22:22,359 --> 00:22:24,539
那么您可以通过第1层合同

234
00:22:24,539 --> 00:22:27,759
并迫使您的资金回到第1层

235
00:22:27,759 --> 00:22:29,379
或退出其他卷起。

236
00:22:30,139 --> 00:22:30,579
所以...

237
00:22:30,579 --> 00:22:36,319
这就是10,000英尺的卷起。

238
00:22:36,319 --> 00:22:41,659
我看到了将L1数据转换为L2执行的问题。

239
00:22:41,659 --> 00:22:45,859
这是一种手浪的手。

240
00:22:45,859 --> 00:22:48,699
第1层提供有关这些斑点空间的数据。

241
00:22:48,699 --> 00:22:51,619
我将在下一张幻灯片中浏览。

242
00:22:51,619 --> 00:22:53,039
这就是卷起的使用。

243
00:22:53,039 --> 00:22:55,659
他们只是将所有执行的脱链处决。

244
00:22:55,659 --> 00:22:59,779
在第1层上很快验证了这一点。

245
00:22:59,779 --> 00:23:05,779
但是验证主要依赖于数据，而不是实际执行。

246
00:23:06,119 --> 00:23:11,399
所以我不确定如何解释比这更简单，

247
00:23:11,460 --> 00:23:15,879
因为您必须对执行中的数据具有这种心理模型

248
00:23:15,879 --> 00:23:17,639
和第一层，第二层。

249
00:23:17,639 --> 00:23:21,740
但这就是10,000费用的汇总。

250
00:23:21,960 --> 00:23:26,420
因此，在整个演示文稿中，我只是非常简单地简化了很多东西。

251
00:23:26,420 --> 00:23:33,220
是的，好吧。我对卷起的训练轮有幻灯片。因此，要提前

252
00:23:33,220 --> 00:23:40,980
今天的卷起仍然有很多风险。当您可以在l2b.com上看到所有内容时。

253
00:23:42,100 --> 00:23:50,420
现在，我们很乐意让卷起完全不可变和成熟。没有许可元素

254
00:23:50,420 --> 00:23:59,140
无论如何，没有多功能和有限的治理。对于汇总和

255
00:23:59,140 --> 00:24:05,380
最终游戏是它将像第1层一样毫无信任，但今天还不是

256
00:24:05,940 --> 00:24:14,340
这就是我们的目标。好吧，所以在我们去4844之前，这是大事

257
00:24:14,339 --> 00:24:20,980
上星期。我需要快速解释什么是数据可用性采样，您将不得不

258
00:24:20,980 --> 00:24:27,619
与我一起忍受那个，因为这是一个非常酷的概念。它非常参与很多数学，但是

259
00:24:27,619 --> 00:24:33,859
如果您付出一些努力来了解我在说什么，那是值得的。

260
00:24:34,740 --> 00:24:39,459
因此，数据可用性采样是关于回答问题的

261
00:24:39,459 --> 00:24:44,179
数据可用吗？因为请记住如果您有乐观的卷起，您需要

262
00:24:44,180 --> 00:24:50,600
有数据以防止审查制度和坏事使恶意

263
00:24:50,600 --> 00:24:55,400
音序器。因此，如果我们知道数据可用，那么我们知道汇总

264
00:24:55,400 --> 00:25:00,140
安全，有人可以挑战音序器。所以天真的方式是

265
00:25:00,140 --> 00:25:03,799
下载所有数据。因为隐含地，如果您能够下载所有

266
00:25:03,799 --> 00:25:11,960
数据，这意味着它可用。但这并不是很好。我们想要

267
00:25:11,960 --> 00:25:17,960
要在第1层上获得更多数据。因此，我们要做的就是获取这些数据，

268
00:25:17,960 --> 00:25:24,680
使其成为多项式方程，通过在更多点上评估该方程来扩展它，并

269
00:25:24,680 --> 00:25:30,340
然后使用所谓的多项式承诺方案，该方案在下一个幻灯片中。并来自

270
00:25:30,340 --> 00:25:35,160
在那里您可以随机抽样。所以不用担心。我只是要解决所有这些

271
00:25:35,160 --> 00:25:41,220
一一一个步骤，但这是您知道两个要点的想法

272
00:25:41,220 --> 00:25:46,400
制作一条线，三分是抛物线，然后是斑点

273
00:25:46,400 --> 00:25:52,140
496点四千九十分使这么大的多项式和我

274
00:25:52,140 --> 00:25:56,920
有一个非常简单的示例，例如数据在哪里1 3 2 2

275
00:25:56,920 --> 00:26:01,740
扩展到立方方程，然后您可以再进行四个

276
00:26:01,740 --> 00:26:10,140
点。这给了您7、21、48、92。从那里，您有了这八个。你知道

277
00:26:10,140 --> 00:26:14,380
这些点中的任何四个都足以重建相同的多项式。然后你

278
00:26:14,380 --> 00:26:20,779
可以重新评估它并获得1、3、2、2个数据。这是第一个见解是

279
00:26:20,779 --> 00:26:27,380
50％的扩展数据足以恢复100％的数据。所以这是一件事

280
00:26:27,380 --> 00:26:34,420
请记住下一张幻灯片，因为我们深入研究了其他大型多项式承诺计划。所以

281
00:26:35,780 --> 00:26:41,460
ETH研究中的所有内容都依赖于多项式。到处都是这种魔力。

282
00:26:42,180 --> 00:26:44,660
是的，我现在让这只猫越过相机了。

283
00:26:46,740 --> 00:26:52,980
是的，所以我要采用相同的立方方程。基本上，您将不得不忍受

284
00:26:52,980 --> 00:27:00,420
再次与我一起在这个黑匣子函数上提交，这有点像一个哈希

285
00:27:01,059 --> 00:27:06,740
属性，但所有这些都具有数千个系数和成千上万的多项式

286
00:27:06,740 --> 00:27:13,779
然后，它将其压缩成一个单个字节，例如yeak，例如一个知道和所有节点的哈希

287
00:27:13,779 --> 00:27:18,660
知道这项承诺，这就是他们将用来验证我们所谓的证明

288
00:27:18,660 --> 00:27:27,980
开场证明。是的，所以我喜欢您的节点可以要求的这个子弹

289
00:27:27,980 --> 00:27:32,360
随机数据点。因此，您选择一到八。在我的示例中，就像选择三个一样。

290
00:27:32,519 --> 00:27:38,200
然后，您询问声称具有数据的网络或验证器。你说，

291
00:27:38,200 --> 00:27:45,500
给我第三个数据点。然后您将收到两个值。因此验证器

292
00:27:45,500 --> 00:27:52,619
您正在收到声称在三个评估的多项式P等于两个，但不仅等于

293
00:27:52,619 --> 00:27:58,500
他给你一个证明pi，那就是你用来验证的

294
00:27:58,500 --> 00:28:05,880
承诺让三个p的p实际上等于两个，因此您不需要

295
00:28:05,880 --> 00:28:10,799
为了评估整个多项式的整个承诺，因为成千上万

296
00:28:10,799 --> 00:28:15,200
系数。它需要太多时间。因此，您只是依靠这些证据。

297
00:28:16,399 --> 00:28:23,440
请记住，从上一张幻灯片中，有50％的数据足以恢复100％的数据。就是这样

298
00:28:23,440 --> 00:28:30,559
有点像一个小游戏

299
00:28:30,559 --> 00:28:36,399
您发布了所有数据，然后您要问我一个随机点我无法

300
00:28:36,400 --> 00:28:40,400
如果我能给您数据和证明，

301
00:28:40,400 --> 00:28:44,259
然后，这意味着至少可以使用此样本。

302
00:28:44,259 --> 00:28:49,259
而且，如果我只发布1％的数据，那还不够。

303
00:28:50,920 --> 00:28:55,120
您要求我的样本将是1％的机会

304
00:28:55,120 --> 00:28:58,400
恰好是我确实发布的人之一。

305
00:28:58,400 --> 00:29:02,000
因此，如果我想最大限度地欺骗你

306
00:29:02,000 --> 00:29:03,759
相信数据可用

307
00:29:03,759 --> 00:29:08,680
数据实际上没有。是的，我将不得不发布一些东西

308
00:29:08,680 --> 00:29:17,579
就像49.9％的数据一样，您无法重建整个数据。因此，您可以在最糟糕的情况下思考

309
00:29:17,579 --> 00:29:25,940
案例场景，您的样本有二分之一的机会刚刚发生了

310
00:29:25,940 --> 00:29:32,740
我确实发布的数据。因此，这还不足以满足。所以你只是问

311
00:29:32,740 --> 00:29:37,539
对于我无法预测的另一个随机数据点。然后，如果恰好在半场

312
00:29:37,539 --> 00:29:43,359
我确实发表了，然后两个样本都将归功于25％。然后你要求另一个

313
00:29:43,359 --> 00:29:52,079
样本是12.5％。只有30个样本之后，您会发现这是十亿个机会

314
00:29:52,079 --> 00:29:58,339
被欺骗。因此，在某个时候，这是不切实际的，好吧，我很满意。

315
00:29:58,339 --> 00:30:03,819
我没有下载整个数据。我只做30个样本，但足以

316
00:30:03,819 --> 00:30:08,899
确信我可以使用数据。因此，这基本上就是数据的症结

317
00:30:08,899 --> 00:30:19,899
抽样我们将用于扩展此数据可用性。和事情

318
00:30:19,899 --> 00:30:24,339
重要的是要知道，与

319
00:30:24,339 --> 00:30:30,199
数千个系数。验证它在计算方面也很短

320
00:30:30,199 --> 00:30:36,839
需要电源。和那30个符号，它们独立于多少数据

321
00:30:36,839 --> 00:30:41,319
实际上。因此，即使只有1兆字节或一千个trabytes

322
00:30:41,319 --> 00:30:46,000
30个样本为您提供了十亿个机会。所以这是一个

323
00:30:46,000 --> 00:30:51,699
持续的。这是一件神奇的事情，是30

324
00:30:51,700 --> 00:30:59,080
不管实际上有多少数据，示例都足够了。是的，节点

325
00:30:59,080 --> 00:31:03,660
是...能够回答这个问题是仅通过做一些数据可用的数据

326
00:31:03,660 --> 00:31:08,539
样本检查和满足而无需全部

327
00:31:08,539 --> 00:31:14,420
下载所有内容的负担，这是...我们这样做的非常简单的方法

328
00:31:14,420 --> 00:31:23,779
目前在区块链中进行。因此，我们可以回到EIP-4844

329
00:31:23,779 --> 00:31:30,860
最近在Mainnet上激活，这是大事。它为这个大舞台设定了舞台

330
00:31:30,860 --> 00:31:35,640
我刚刚谈论的抽样，但现在没有大量的抽样。我们

331
00:31:35,640 --> 00:31:42,259
在上面的小熊维尼（Pooh Meme）中仍然存在于上面的小熊维尼（Winnie）中。我们依靠每个

332
00:31:42,259 --> 00:31:47,220
节点下载每个斑点，但是它的构造方式是我们已经在做

333
00:31:47,220 --> 00:31:53,140
多项式魔术多项式魔术与我们要依靠的承诺方案

334
00:31:53,140 --> 00:31:59,539
在KCG上，对于那些想深入研究的人来说，这是一个相对简单的

335
00:32:00,980 --> 00:32:06,259
加密结构，如果您愿意忽略配对，而将它们以面值为单位

336
00:32:06,259 --> 00:32:12,259
但是，是的，因为我们正在下载所有必须保守的一切

337
00:32:12,259 --> 00:32:16,879
带宽和存储的条款，所以我们要从每个街区开始

338
00:32:16,879 --> 00:32:22,579
最多六个，它们全部，这是1.559的EIP的价格

339
00:32:22,579 --> 00:32:26,000
如果您在一个块中的每个块中有三个以上，那么下一个块是

340
00:32:26,000 --> 00:32:31,160
在平均达到三个，现在我们会变得更加昂贵

341
00:32:31,160 --> 00:32:37,400
这样做基本上是平均每块一个斑点。 1.16屏幕截图

342
00:32:37,400 --> 00:32:43,759
从昨晚开始，但情况有很大不同。因此，这很便宜

343
00:32:43,759 --> 00:32:49,880
斑点仍然是一种方式。所以那是10到负18。我认为

344
00:32:49,880 --> 00:32:56,560
这是一个十四千万，或者是十亿分之一。就是这样

345
00:32:56,559 --> 00:33:01,379
现在可以在链上发布数据非常便宜。我从

346
00:33:01,379 --> 00:33:06,440
我认为etherscan是仲裁中张贴了六个斑点

347
00:33:06,440 --> 00:33:15,019
交易，这使他们付出了……它得到了786,000

348
00:33:15,019 --> 00:33:25,139
大约每个斑点的WAV，基本上什么都没有。

349
00:33:26,559 --> 00:33:29,159
哦，是的，之后我们要去量子。

350
00:33:32,019 --> 00:33:33,700
斑点费还会燃烧吗？

351
00:33:34,000 --> 00:33:35,799
是的，这就像基本费用。

352
00:33:36,279 --> 00:33:40,059
斑点费用于管理拥塞。

353
00:33:40,319 --> 00:33:41,579
所以它也被烧毁。

354
00:33:41,759 --> 00:33:44,200
而且您可以进行超声检查。

355
00:33:44,200 --> 00:33:45,259
而且他们有一个小部件。

356
00:33:45,259 --> 00:33:48,740
我想现在我们总共五个

357
00:33:48,740 --> 00:33:51,079
已被汇总和数据烧毁。

358
00:33:51,200 --> 00:33:54,539
因此，我们仍然很拥挤，这很酷。

359
00:33:54,539 --> 00:33:58,299
我们在第2层上几乎便宜，几乎免费的交易。

360
00:34:01,680 --> 00:34:01,980
是的。

361
00:34:01,980 --> 00:34:08,079
之后，我们在未来的未来有同样的量子

362
00:34:08,079 --> 00:34:09,880
因为现在，

363
00:34:09,880 --> 00:34:14,940
好的，我们拥有KCG承诺计划几乎是完美的，

364
00:34:14,940 --> 00:34:19,000
除了它不是量子证明的事实，并且需要值得信赖的设置。

365
00:34:19,000 --> 00:34:22,279
所以我不知道谁参加了聊天，

366
00:34:22,280 --> 00:34:28,860
但是我们有超过14万个贡献者，这再次是n个假设中的1个。

367
00:34:29,180 --> 00:34:38,019
因此，我们需要以一个随机的秘密，以使您在生成后必须在将来扔掉这个秘密。

368
00:34:38,080 --> 00:34:40,500
否则，您可以做出虚假证明。

369
00:34:40,660 --> 00:34:49,920
只要这140,000名贡献者的单个参与者是诚实的，那就足以让整个事情说实话。

370
00:34:49,920 --> 00:35:01,340
因此，它被称为值得信赖的设置，但就我们而言，它无关紧要，因为它没有140,000台计算机很多。

371
00:35:01,340 --> 00:35:11,120
因此，将来我们想将KCG加热到基于开始或格子的东西，

372
00:35:11,120 --> 00:35:16,620
这是量子计算机无法破坏的另一件疯狂的密码学。

373
00:35:16,620 --> 00:35:22,660
它可能会再次开始，因为它总是开始的。

374
00:35:22,660 --> 00:35:31,039
以及远的未来的另一个项目，或者取决于我们想要得到的深入的参与是交叉的

375
00:35:31,039 --> 00:35:36,940
汇总互操作性。所以我们知道流动性

376
00:35:36,940 --> 00:35:41,320
碎片化，现在卷起是一件事情。我们

377
00:35:41,320 --> 00:35:47,420
想要拥有更无缝的体验，而这些体验都被抽象了。所以那里

378
00:35:47,420 --> 00:35:51,559
您可以在基于卷起和预先确认的情况下查找很多东西吗？

379
00:35:51,559 --> 00:35:58,400
共享测序。我认为其中有些会在其他冲动中回来。

380
00:35:58,400 --> 00:36:01,000
我喝水时，我只是要检查问题。

381
00:36:05,480 --> 00:36:08,320
在CL或EL上，所有这些事情都在哪里？

382
00:36:09,019 --> 00:36:15,280
是的，共识层接收斑点并验证可用性。

383
00:36:15,280 --> 00:36:19,660
因此，您在只是布尔值的共识层上具有此功能。

384
00:36:19,960 --> 00:36:20,980
数据可用吗？

385
00:36:22,119 --> 00:36:28,180
以及在共识层上的验证器，它们会收到斑点。

386
00:36:28,179 --> 00:36:31,859
然后，由于他们收到了斑点，他们知道它可用。

387
00:36:32,199 --> 00:36:33,819
因此，满足了此功能。

388
00:36:34,019 --> 00:36:35,319
然后他们可以证明斑点。

389
00:36:36,119 --> 00:36:39,699
在执行层上，您所看到的只是KCG承诺。

390
00:36:39,940 --> 00:36:43,159
因此，多项式的大型提交功能。

391
00:36:44,379 --> 00:36:47,539
当然，它必须与实际的BLOB数据匹配。

392
00:36:47,659 --> 00:36:49,639
因此，这是验证者所做的另一项检查。

393
00:36:49,919 --> 00:36:56,759
但是，数据一直存在于共识层上，直到18天后修剪或类似的东西。

394
00:36:58,179 --> 00:37:08,519
所以现在我们正在祸害，这是我也不是...

395
00:37:08,519 --> 00:37:14,119
我要快速浏览每个项目，但是它必须...

396
00:37:14,119 --> 00:37:19,859
所有这些都与Mev和Staking Economics有关。

397
00:37:19,859 --> 00:37:25,539
因此，我在这里只有一些幻灯片，例如谈论PBS提案建造者的分离。

398
00:37:25,539 --> 00:37:35,880
基本上，对MEV的所有研究得出的结论是MEV市场是不可避免的。

399
00:37:35,880 --> 00:37:38,259
因此，我们至少必须驯服它。

400
00:37:38,259 --> 00:37:46,340
因此，独奏者仍然可以使用此收益

401
00:37:46,340 --> 00:37:48,820
由专业验证者赚取。

402
00:37:48,820 --> 00:37:55,099
因此，我们采用所有集中元素，然后将它们放入这个角落

403
00:37:55,099 --> 00:37:57,440
这些建筑商可以自由专业

404
00:37:57,440 --> 00:38:01,539
并变得超级富裕，并处理任何提取

405
00:38:01,539 --> 00:38:03,839
并具有最好的优化算法，

406
00:38:03,839 --> 00:38:06,219
最好的带宽，最好的一切。

407
00:38:06,219 --> 00:38:09,759
我们现在有MIF的提升，

408
00:38:09,759 --> 00:38:11,940
这是不合时件的PBS，

409
00:38:11,940 --> 00:38:14,619
哪种是创可贴解决方案

410
00:38:14,619 --> 00:38:16,719
直到我们实际上可以赋予它。

411
00:38:18,599 --> 00:38:23,599
是的，我在这里。

412
00:38:23,599 --> 00:38:27,980
关于最小化选择验证者必须做出的句子。

413
00:38:27,980 --> 00:38:32,000
因此，如果不是PBS和Mefboost，

414
00:38:32,199 --> 00:38:36,019
那么您将有验证者有很多选择可以做出

415
00:38:36,019 --> 00:38:39,199
关于如何提取最佳价值，

416
00:38:39,420 --> 00:38:43,299
这很糟糕，因为它伤害了不能专注的唯一stakers。

417
00:38:43,579 --> 00:38:46,679
因此，相反，您可以最大程度地减少Stakers的选择

418
00:38:46,679 --> 00:38:51,179
通过仅需从建筑商那里挑选最高的出价。

419
00:38:51,179 --> 00:38:57,259
因此，我们如何驯服MEV周围的权力下放问题。

420
00:38:57,259 --> 00:39:05,399
是的，这就是MEV助推器。将来我们希望将其纳入协议中

421
00:39:05,399 --> 00:39:14,819
直接，我们不必依靠可信赖的继电器。我们有更好的好东西，例如燃烧

422
00:39:14,820 --> 00:39:21,220
MVV平滑堆积产量，这本身就是另一个主题。

423
00:39:21,220 --> 00:39:25,760
因为一旦我们获得了PV，该协议就会知道MVV有多少

424
00:39:25,760 --> 00:39:32,660
实际上发生在顶部和应用程序中，当您认为时有点疯狂

425
00:39:32,660 --> 00:39:33,660
关于它。

426
00:39:33,660 --> 00:39:38,600
您将能够在EVM内部使用某种MVV来执行各种

427
00:39:38,600 --> 00:39:42,700
疯狂的事情。

428
00:39:42,699 --> 00:39:48,939
另一个项目是包含列表，这些列表正在发出很大的噪音

429
00:39:48,939 --> 00:39:56,059
在下一个叉子中，希望能使验证者像Solostaker一样强迫

430
00:39:56,059 --> 00:39:59,879
建筑商包括某些交易。

431
00:39:59,879 --> 00:40:07,819
即使建筑商是集中的，他们仍然受到限制。

432
00:40:07,820 --> 00:40:14,519
在交易中限制了他们必须包括的交易，因此他们无法做类似的事情

433
00:40:14,519 --> 00:40:19,580
过去，我们已经看到了MEV OFAC交易。

434
00:40:19,580 --> 00:40:23,440
今天仍然是一个很大的问题。

435
00:40:23,440 --> 00:40:27,820
是的，我可以很快就可以的终结游戏块制作

436
00:40:27,820 --> 00:40:29,840
在Vitalik的博客上查看。

437
00:40:29,840 --> 00:40:30,840
基本上是...

438
00:40:30,840 --> 00:40:37,180
就像我裁剪了图，但三个箭头来自区块链的各种路径

439
00:40:37,179 --> 00:40:44,299
如果您想扩展到数十亿个用户

440
00:40:44,299 --> 00:40:50,059
该块生产必须集中，但块的验证将被分散

441
00:40:50,059 --> 00:40:55,500
并且将有输入反审查的保护措施，例如包含列表，可能

442
00:40:55,500 --> 00:41:03,099
我们可以拥有的更多小小工具，嗯，结论清单中将进行哪种交易

443
00:41:03,099 --> 00:41:04,759
因此，这只是任何交易。

444
00:41:04,759 --> 00:41:09,099
就像验证者只是在Mempool中看到交易

445
00:41:09,099 --> 00:41:10,819
并将它们放在遮挡列表中。

446
00:41:10,819 --> 00:41:13,440
然后，建造者被迫包括它们。

447
00:41:19,420 --> 00:41:21,319
是的，所以执行票。

448
00:41:24,000 --> 00:41:25,279
看到它只是说探索。

449
00:41:25,279 --> 00:41:26,519
所以这不是保证

450
00:41:26,519 --> 00:41:28,219
我们实际上会得到那个链子

451
00:41:28,219 --> 00:41:32,219
但这是贾斯汀·德雷克（Justin Drake）的最新ID。

452
00:41:33,099 --> 00:41:34,900
您可以看到这个饮食研究帖子。

453
00:41:35,699 --> 00:41:38,239
但这是一种非常优雅的方法...

454
00:41:40,239 --> 00:41:42,079
好的，这很容易。

455
00:41:42,779 --> 00:41:48,759
这是一种应对MEV的优雅方式，以及所有扭曲的产量对独奏

456
00:41:48,759 --> 00:41:53,039
通过基本上出售提前提议块的权利。

457
00:41:53,519 --> 00:41:54,980
像在彩票中。

458
00:41:55,239 --> 00:41:57,400
这就是门票一词的来源。

459
00:42:00,460 --> 00:42:01,420
这是...

460
00:42:01,420 --> 00:42:07,740
这再次是更多的分离。因此，在证明链中哪个块的想法之间

461
00:42:07,740 --> 00:42:13,820
与提出一个实际块相比。因此，它最初被称为Adtestor-Proposer分离

462
00:42:13,820 --> 00:42:23,340
在重命名为执行票之前。我不会花太多时间来花太多时间，但是

463
00:42:23,340 --> 00:42:28,220
这是一个非常优雅的小设计。所以我鼓励任何人去ETH研究帖子

464
00:42:28,219 --> 00:42:31,459
这是在Wiki的笔记中链接的。

465
00:42:33,359 --> 00:42:35,719
但是，是的，我喜欢它仍然保持

466
00:42:35,719 --> 00:42:38,519
Dejan MEV彩票未经许可

467
00:42:38,519 --> 00:42:40,079
对于任何想玩它的人。

468
00:42:40,079 --> 00:42:42,659
因为这是独奏贴纸提到的

469
00:42:42,659 --> 00:42:43,579
他们今天爱。

470
00:42:43,579 --> 00:42:48,139
但这是我们不想在那里的东西

471
00:42:48,139 --> 00:42:49,739
因为梅夫很尖

472
00:42:49,739 --> 00:42:51,980
这是拉动的动机。

473
00:42:54,939 --> 00:42:55,779
是的。

474
00:42:55,780 --> 00:43:06,780
之后，我对应用程序播放器的这两个小项目进行了MBV最小化，这对核心协议研究的关注不多。

475
00:43:06,780 --> 00:43:12,700
但这只是为了向发展智能合约和DAPP的人们推动。

476
00:43:12,920 --> 00:43:18,160
如果要捕获或防止MBV，请记住MBV。

477
00:43:18,380 --> 00:43:23,140
因此，诸如奶牛运动之类的东西在防止夹有三明治方面非常酷。

478
00:43:23,139 --> 00:43:27,519
这就是应用程序播放器发生的事情。

479
00:43:27,519 --> 00:43:32,579
这不是协议的关注点。

480
00:43:32,579 --> 00:43:38,559
然后，预先确认是我之前简短提到的，这基本上是

481
00:43:38,559 --> 00:43:44,339
使构建者承诺将您的交易纳入下一个块的方法。

482
00:43:44,339 --> 00:43:49,739
因此，就像在块实际包含该块之前确认您的交易一样。

483
00:43:49,739 --> 00:43:52,980
而且有多种方法可以做到这一点。

484
00:43:52,980 --> 00:43:58,119
是的，它与执行票和各种重新修订计划搭配得很好。

485
00:43:58,119 --> 00:43:59,119
是的。

486
00:43:59,119 --> 00:44:02,280
有一些ETH研究。

487
00:44:02,280 --> 00:44:07,500
我认为它们在我注释的路线图中链接在一起。

488
00:44:07,500 --> 00:44:08,960
是的。

489
00:44:08,960 --> 00:44:16,380
下一个灰心的大事是Staking Economics。

490
00:44:16,380 --> 00:44:21,519
如果幸运的话，可能在下一个叉子中可能是最大的最大叉子正在提高最大效果

491
00:44:21,519 --> 00:44:22,519
平衡。

492
00:44:22,519 --> 00:44:27,159
因此，目前的最低限度和最大利益均为32 ETH。

493
00:44:27,500 --> 00:44:32,179
因此，如果您的验证者像额外的ETH一样积累，而您的余额为33，则

494
00:44:32,300 --> 00:44:35,619
然后，您仍然只能在32 ETH上赚取收益

495
00:44:36,019 --> 00:44:38,400
这就是我们所说的有效余额。

496
00:44:38,400 --> 00:44:40,119
就像你的余额是33一样，

497
00:44:40,320 --> 00:44:44,759
就信标连锁而言，您的有效平衡仍然32。

498
00:44:45,759 --> 00:44:50,259
Max EB的目标是将其一直升至2048年。

499
00:44:50,260 --> 00:44:57,400
因此，主要的好处是唯一的利益用户是您会自动复合。

500
00:44:57,400 --> 00:45:00,220
因此，就像这里的榜样一样。

501
00:45:00,220 --> 00:45:05,360
如果您从32到33，那么您会自动启动额外的ETH

502
00:45:05,360 --> 00:45:08,640
依靠自己的平衡并赚取奖励。

503
00:45:10,680 --> 00:45:15,240
但是，主要目标是从协议的角度来看，您将拥有

504
00:45:15,240 --> 00:45:17,500
相同数量的股份的验证器较少。

505
00:45:17,500 --> 00:45:33,039
因此，所有关于签名聚合和带宽开销的东西都从一个大的滴答池上滴答了成千上万的验证器，都将能够合并并发送单个签名而不是数千个签名。

506
00:45:33,039 --> 00:45:43,039
因此，这将大大减少开销，并成为通往单个插槽最终终结的途径之一，但也删除了...

507
00:45:43,840 --> 00:45:46,280
抱歉，我忘了我要说的话。

508
00:45:46,280 --> 00:45:49,860
是的，这是进入单个老虎机大结局的途径

509
00:45:49,860 --> 00:45:53,420
并减少节点的带宽要求。

510
00:45:57,060 --> 00:45:58,600
诸如块空间未来之类的概念

511
00:45:58,600 --> 00:46:00,980
您实际上有未来的街区。

512
00:46:00,980 --> 00:46:02,500
这有点相关，

513
00:46:02,500 --> 00:46:04,840
但是执行票更多

514
00:46:04,840 --> 00:46:07,280
关于信标提案块。

515
00:46:09,220 --> 00:46:11,920
有一点区别，

516
00:46:11,920 --> 00:46:14,680
但是我不会去。

517
00:46:16,280 --> 00:46:18,880
我不会太深入。

518
00:46:22,780 --> 00:46:25,760
是的，Staking经济学曲目中的下一个项目

519
00:46:25,760 --> 00:46:29,240
正在探索总股份上限。

520
00:46:29,240 --> 00:46:32,460
因此有一个有争议的建议

521
00:46:32,460 --> 00:46:36,540
从CASPAR on ETH研究改变发行

522
00:46:36,540 --> 00:46:40,580
曲线使得在某个点之后可能会

523
00:46:40,580 --> 00:46:41,400
变负。

524
00:46:41,400 --> 00:46:44,360
因此，如果您考虑一下，这有点奇怪。

525
00:46:44,360 --> 00:46:48,340
如果您的占用收益率就像负1％，

526
00:46:48,340 --> 00:46:53,240
但是它得到了MEV和交易费用的补偿

527
00:46:53,240 --> 00:46:54,700
这样你是1％

528
00:46:54,700 --> 00:46:56,980
即使您实际上付了信标链

529
00:46:56,980 --> 00:46:59,000
为了成为验证者的权利，

530
00:46:59,000 --> 00:47:02,740
您仍然没有从MEV中获利

531
00:47:02,740 --> 00:47:05,000
和执行层活动。

532
00:47:06,059 --> 00:47:11,059
是的，它仍然与拥有太多验证器有关

533
00:47:12,380 --> 00:47:14,059
这意味着太多的开销，

534
00:47:14,059 --> 00:47:20,980
但是，经济弊端也有太多的股份，供应库存。

535
00:47:21,920 --> 00:47:24,739
因此，目标定位是另一个小主意。

536
00:47:24,960 --> 00:47:28,460
就像我们想要大约25％的供应

537
00:47:28,460 --> 00:47:32,400
然后喜欢直接在协议中的enshrine

538
00:47:32,400 --> 00:47:38,259
然后喜欢有某种发行曲线，以便在不到25％的情况下奖励更多

539
00:47:38,259 --> 00:47:40,860
当超过25％时，奖励更少。

540
00:47:40,860 --> 00:47:49,620
但这是一个活跃的研究领域，是的，下一个小项目

541
00:47:49,620 --> 00:47:56,140
是液体占集中化的液体集中率是否有很多担忧

542
00:47:56,140 --> 00:48:03,539
放入游泳池和LST，因此有一些想法，以供液体散落

543
00:48:03,539 --> 00:48:10,800
直接内部的令牌，这是有效的零费用

544
00:48:10,800 --> 00:48:18,320
比实际的放入池和我的其他想法要小的集中率

545
00:48:18,320 --> 00:48:24,160
看到的流动正在限制削减惩罚，因此，如果将其限制在两个ETH之类的东西上

546
00:48:24,160 --> 00:48:30,960
您可以拥有完全无信任和无风险的LST，例如UH，有两个饮食的纽带

547
00:48:30,960 --> 00:48:37,120
像现在一样的火箭池，现在仍然有可能是火箭池验证器

548
00:48:37,119 --> 00:48:41,759
只是弄乱了最终性，然后将他们的全部股份削减，包括

549
00:48:41,759 --> 00:48:47,359
属于游泳池，但如果我们将削减的罚款限制在2e，那么只有他们的债券才能得到

550
00:48:47,359 --> 00:48:54,239
砍了，然后其余的回到游泳池，这样就像一个相对简单的

551
00:48:54,239 --> 00:49:04,480
调整标准链机构，使这些分散的LST比集中式的LST更可行

552
00:49:04,480 --> 00:49:08,380
这就是祸害。

553
00:49:08,380 --> 00:49:14,719
这是我将花更多时间上的另一个。

554
00:49:14,719 --> 00:49:16,440
因为这是...

555
00:49:16,440 --> 00:49:19,320
这是下一件大事...

556
00:49:19,320 --> 00:49:27,159
就像，我们得到了合并，我们得到了4844和blobspace，然后virkle树是下一个大事

557
00:49:27,159 --> 00:49:28,159
在我看来。

558
00:49:28,159 --> 00:49:29,880
因为它们很酷。

559
00:49:29,880 --> 00:49:33,980
这将是一个非常有趣的升级。

560
00:49:33,980 --> 00:49:42,179
因此，首先，我不知道谁对状态与历史的概念太熟悉。

561
00:49:42,179 --> 00:49:46,980
我认为这很简单，但要迅速解决。

562
00:49:46,980 --> 00:49:52,300
您可以在这里使用该块n在PowerPoint中制作的这个小区块链。

563
00:49:52,300 --> 00:49:58,320
这就像当前的块，然后引用N-1块，该块N-1引用了块N-2。

564
00:49:58,320 --> 00:50:03,000
因此，所有这些通过块都是使您转移和交易的历史记录

565
00:50:03,000 --> 00:50:07,179
那是在以太坊上发生的。

566
00:50:07,519 --> 00:50:08,880
并计算这些交易

567
00:50:08,880 --> 00:50:10,519
给您当前状态。

568
00:50:10,659 --> 00:50:13,219
因此所有的余额和所有合同变量

569
00:50:13,219 --> 00:50:14,059
和这样的东西。

570
00:50:14,960 --> 00:50:18,179
所以现在，当我们同步链时，

571
00:50:18,260 --> 00:50:20,139
您基本上必须同步历史，

572
00:50:20,800 --> 00:50:21,460
计算状态，

573
00:50:21,519 --> 00:50:23,260
然后您可以开始检查余额

574
00:50:23,260 --> 00:50:26,079
并验证正在进行的新交易。

575
00:50:26,460 --> 00:50:27,519
问题是，

576
00:50:27,559 --> 00:50:28,920
有更好的方法吗？

577
00:50:29,219 --> 00:50:30,300
答案是肯定的。

578
00:50:30,519 --> 00:50:32,920
同样，正如我们所看到的，有了多项式魔术。

579
00:50:33,000 --> 00:50:43,039
因此，如我在上一张幻灯片中所说的那样，今天该州只是从历史上计算出来的。

580
00:50:43,039 --> 00:50:49,539
但它也以树形式结构，原因是我们将要看到的原因。

581
00:50:49,539 --> 00:50:53,579
这是我与四个参与者一起制作的非常简单的状态树

582
00:50:53,579 --> 00:50:55,219
自己的余额。

583
00:50:55,219 --> 00:51:02,800
两个是一个节点，您刚刚掩盖了两个不同孩子的价值。

584
00:51:02,800 --> 00:51:04,960
然后，您将其加在一起。

585
00:51:04,960 --> 00:51:06,620
然后您进行了串联。

586
00:51:06,620 --> 00:51:09,720
然后，您一直到状态根。

587
00:51:11,160 --> 00:51:14,220
这就是您在块标题中所拥有的。

588
00:51:14,220 --> 00:51:16,960
因此，没有交易，

589
00:51:16,960 --> 00:51:18,300
您可以访问状态根。

590
00:51:18,300 --> 00:51:19,460
这就是您可以使用的

591
00:51:19,460 --> 00:51:22,660
制作所谓的状态访问证明。

592
00:51:22,660 --> 00:51:27,660
是的，您可以证明鲍勃拥有五个ETH

593
00:51:27,840 --> 00:51:30,160
在这个非常简单的例子中。

594
00:51:30,160 --> 00:51:32,000
您刚收到一个兄弟节点。

595
00:51:32,000 --> 00:51:35,559
因此，您喜欢发送节点。

596
00:51:35,559 --> 00:51:37,840
好吧，得到了，猫把东西敲了出来。

597
00:51:37,840 --> 00:51:38,780
真的很烦人。

598
00:51:39,920 --> 00:51:44,920
再次，默克尔的证明是一件非常简单的事情。

599
00:51:44,980 --> 00:51:47,199
您只显示A，发送兄弟姐妹。

600
00:51:47,199 --> 00:51:48,800
因此，您发送了爱丽丝的兄弟姐妹

601
00:51:48,800 --> 00:51:52,360
然后，您发送了查理和戴夫的节点，

602
00:51:52,360 --> 00:51:53,880
只是串联。

603
00:51:56,300 --> 00:51:57,320
是的，是的。

604
00:51:57,320 --> 00:52:01,019
黄色节点是证明的一部分

605
00:52:01,019 --> 00:52:03,659
绿节点是您可以计算的节点

606
00:52:03,659 --> 00:52:05,199
在您的尽头验证证明。

607
00:52:05,199 --> 00:52:07,219
因此，如果您只是一路做哈希

608
00:52:07,219 --> 00:52:09,719
到达州路线，您可以验证其检查

609
00:52:09,719 --> 00:52:12,639
随着块标题中的州路线，

610
00:52:12,639 --> 00:52:15,940
您得到的，就像您满意鲍勃有五个ETH

611
00:52:15,940 --> 00:52:19,139
然后您可以

612
00:52:20,139 --> 00:52:22,199
您可以发送到诸如轻客户端之类的东西

613
00:52:22,199 --> 00:52:24,480
那无法访问

614
00:52:24,480 --> 00:52:26,500
仅检查同步委员会

615
00:52:26,500 --> 00:52:29,400
和执行层上的块标头

616
00:52:29,400 --> 00:52:32,000
这不必计算所有交易。

617
00:52:34,539 --> 00:52:38,960
但是最大的收获是这些证明

618
00:52:38,960 --> 00:52:41,160
开始变得越来越大

619
00:52:41,160 --> 00:52:44,960
当我们变得越来越大的状态时，无法控制

620
00:52:44,960 --> 00:52:47,579
这是以太坊的不变的事情。

621
00:52:47,579 --> 00:52:51,920
每个交易基本上都会增加状态。

622
00:52:53,000 --> 00:52:57,460
因此，这是一个非常...

623
00:52:57,460 --> 00:53:01,139
再次有同一棵树，但现在是一棵垂直树。

624
00:53:01,139 --> 00:53:04,099
因此每个节点基本上都是一个数字。

625
00:53:04,099 --> 00:53:05,760
只是被视为一个数字

626
00:53:05,760 --> 00:53:08,280
然后，您再次进行多项式魔术。

627
00:53:10,340 --> 00:53:13,659
因此，现在没有拥有状态根源，而是

628
00:53:13,659 --> 00:53:16,400
它看起来像是哈希等的串联。

629
00:53:16,400 --> 00:53:18,440
这只是一项多项式承诺

630
00:53:18,440 --> 00:53:21,400
正如我们在数据采样中看到的那样。

631
00:53:21,400 --> 00:53:25,380
所以我有这个，是的，同一例子。

632
00:53:25,380 --> 00:53:27,059
为了证明鲍勃拥有五个ETH，

633
00:53:27,059 --> 00:53:33,420
您只需要证明状态根是与第一个兄弟姐妹相匹配的承诺...

634
00:53:33,420 --> 00:53:38,000
第一个孩子是pi 1证明的承诺C1。

635
00:53:38,320 --> 00:53:42,079
然后您知道承诺C1。

636
00:53:42,219 --> 00:53:44,119
您可以使用证明PI 2。

637
00:53:45,000 --> 00:53:49,279
因此，您不需要实际的兄弟姐妹，这是最大的收益。

638
00:53:51,440 --> 00:53:53,400
是的，这是下一个想法。

639
00:53:53,500 --> 00:53:54,579
您不需要所有这些节点。

640
00:53:54,579 --> 00:54:03,779
您只需要路径和中间节点以及插值的多项式证明

641
00:54:03,779 --> 00:54:07,579
多项式实际上为您提供了适当的价值。

642
00:54:07,579 --> 00:54:14,000
最大的好处是，证明实际上可以与批处理开口合并，这是另一个

643
00:54:14,000 --> 00:54:21,940
深度密码学的事情具有多项式的承诺，我不会解决。

644
00:54:21,940 --> 00:54:30,440
是的，所以之后，一旦我们将交易与处女座树进行交易，它就会变得像整个

645
00:54:30,440 --> 00:54:32,360
区块链是...

646
00:54:32,360 --> 00:54:33,900
您可以拥有无​​状态验证器。

647
00:54:33,900 --> 00:54:36,780
我不知道从哪里开始。

648
00:54:36,780 --> 00:54:38,500
我只是开始。

649
00:54:38,500 --> 00:54:41,720
就像我之前说的那样，处女座的证明要短得多。

650
00:54:41,720 --> 00:54:48,840
但是，由于现在您不需要兄弟姐妹，就可以拥有一棵更宽的树。

651
00:54:48,840 --> 00:54:55,140
您可以有一棵拥有256个孩子的树，而不是我们今天拥有的16个

652
00:54:55,140 --> 00:55:00,600
默克尔·帕特里夏（Merkle Patricia Tree），州根。

653
00:55:00,600 --> 00:55:03,360
不仅如此，垂直树也很友好。

654
00:55:03,360 --> 00:55:06,960
因此，与批次尴尬的哈希相比。

655
00:55:06,960 --> 00:55:13,019
您将看到证据，然后将它们汇总在一起。

656
00:55:13,019 --> 00:55:16,200
它的可能性更高。

657
00:55:16,199 --> 00:55:22,279
只需要查询我在谈话开始时提到的类似客户协议

658
00:55:22,279 --> 00:55:27,879
然后他们知道块在规范链内，然后将其与这些

659
00:55:27,879 --> 00:55:33,000
工作批准他们可以知道他们可以查询余额的余额和另一个

660
00:55:34,759 --> 00:55:39,639
任何拥有股份

661
00:55:39,639 --> 00:55:44,519
说好的，这是你的平衡，实际上你不能这样欺骗你

662
00:55:46,199 --> 00:56:00,019
最大的是无状态，那就是您旋转节点或验证器，

663
00:56:00,179 --> 00:56:01,759
而且您实际上并不需要历史记录。

664
00:56:01,980 --> 00:56:04,099
您会收到一个块，n。

665
00:56:04,419 --> 00:56:06,960
您对国家一无所知。

666
00:56:06,960 --> 00:56:10,539
您所看到的只是块标头内的状态根。

667
00:56:11,319 --> 00:56:13,399
而且您有这个称为障碍见证的新东西，

668
00:56:13,400 --> 00:56:18,539
基本上，这是计算交易所需的所有证明。

669
00:56:19,059 --> 00:56:23,240
因此，如果您看到鲍勃向其他人发送5个ETH，

670
00:56:23,380 --> 00:56:26,940
然后，您需要证明他实际上拥有这5个ETH。

671
00:56:27,320 --> 00:56:28,860
这将成为证人的一部分。

672
00:56:29,160 --> 00:56:32,039
因此，您实际上不需要计算所有以前的块

673
00:56:32,039 --> 00:56:34,660
要满足鲍勃有5个ETH。

674
00:56:35,039 --> 00:56:36,800
您只是要检查这个证人，

675
00:56:37,059 --> 00:56:40,160
这将由Verkle Trees批准。

676
00:56:40,760 --> 00:56:42,320
所以就像瞬间同步，

677
00:56:42,320 --> 00:56:47,240
但这也减轻了整个舞台上存储的负担

678
00:56:47,240 --> 00:56:57,440
这是很多食物和权利操作，只是阅读聊天

679
00:56:57,440 --> 00:56:59,660
迅速地

680
00:57:02,320 --> 00:57:08,559
是的，无状态是一件大事，但只有

681
00:57:08,559 --> 00:57:10,460
垂直树是因为

682
00:57:10,460 --> 00:57:13,699
奇迹的证明太庞大了，街区证人就像

683
00:57:14,500 --> 00:57:20,779
如果我们有很多访问该州的交易，则可能很长

684
00:57:23,759 --> 00:57:26,099
这些无状态验证器在某个地方运行吗？

685
00:57:26,099 --> 00:57:32,219
好吧，今天不是因为我们没有垂直树，但是这就像一个选择

686
00:57:32,219 --> 00:57:37,359
如果需要，请同步整个状态，或者开始同步和检查块

687
00:57:37,359 --> 00:57:46,980
目击者仅是，是的，像客户一样的最后一枚子弹点甚至

688
00:57:46,980 --> 00:57:52,679
更轻，因为他们只有这个同步委员会和工作证明

689
00:57:52,679 --> 00:57:58,179
检查弹跳和东西以及无状态的另一个被低估的方面是

690
00:57:58,179 --> 00:58:05,000
像这种应用程序一样依靠某种需要索引的devs

691
00:58:05,000 --> 00:58:12,759
余额的价值是专门针对其应用程序的用户，如今必须依靠

692
00:58:12,759 --> 00:58:20,839
主要是在集中式索引上，因为如果他们想跟踪用户余额和其他

693
00:58:20,839 --> 00:58:27,419
仅与用户相关的变量，他们仍然必须同步整个状态，但是

694
00:58:27,420 --> 00:58:39,480
当您想拥有以前的状态时，这很尴尬，因为您必须索引一切，然后跟踪过去的余额，例如过去的状态，而不仅仅是当前状态。

695
00:58:39,880 --> 00:58:45,659
因此，您可以想象一下随着时间的推移将令牌或某些东西的价格图形图。

696
00:58:46,500 --> 00:58:53,559
因此，目前，大型存档节点的图表或访调员非常依赖，因为很难运行一个。

697
00:58:53,559 --> 00:59:00,360
但是，使用垂直树的结构，您只能拥有您只能拥有

698
00:59:00,360 --> 00:59:05,519
执行与您的应用程序相关的块，因此如果有一千个块

699
00:59:05,519 --> 00:59:10,840
在过去，只有30个实际触摸您的智能合约，那么您只能执行

700
00:59:10,840 --> 00:59:16,559
这30个街区，并在后端更新您的财产，以进行您想做的任何事情

701
00:59:16,559 --> 00:59:23,420
向您的前端向用户显示信息，所以我想这会像

702
00:59:23,420 --> 00:59:26,659
这是一个被低估的方面，我看不到人们提到足够多。

703
00:59:26,659 --> 00:59:30,559
所以这是我现在正在大喊大叫的事情。

704
00:59:30,559 --> 00:59:33,460
再一次，之后。

705
00:59:33,460 --> 00:59:34,460
是的。

706
00:59:34,460 --> 00:59:35,780
努力所有的东西。

707
00:59:35,780 --> 00:59:36,780
那就是...

708
00:59:36,780 --> 00:59:40,639
就像，垂直树很酷。

709
00:59:40,639 --> 00:59:44,680
这是对状态访问的非常简单的验证，但仍然不够好。

710
00:59:44,680 --> 00:59:46,400
我们想...

711
00:59:46,400 --> 00:59:49,860
我们希望拥有所有事物的知识证明。

712
00:59:49,860 --> 00:59:56,940
因此，类似的客户协议已经很轻

713
00:59:56,940 --> 01:00:02,780
同步委员会从每27小时到今天的过渡都是

714
01:00:02,780 --> 01:00:06,000
一个证明您可以很快验证。

715
01:00:06,000 --> 01:00:08,700
这只是一个小鼻涕。

716
01:00:08,700 --> 01:00:13,840
从那里开始，下一个合乎逻辑的步骤也是要嘲笑信标链的过渡。

717
01:00:13,840 --> 01:00:19,320
因此，这将有效地使LikeClient协议过时。

718
01:00:19,320 --> 01:00:25,800
如果您只能有一个snark来验证整个信标链的签名和余额

719
01:00:25,800 --> 01:00:28,680
和削减和一切。

720
01:00:28,680 --> 01:00:30,960
这就是共识层。

721
01:00:30,960 --> 01:00:34,200
在执行层上，您想要一个蛇。

722
01:00:34,200 --> 01:00:38,780
您想窃取垂直状态访问证明。

723
01:00:38,780 --> 01:00:43,620
这将使验证障碍证人的速度更快。

724
01:00:43,619 --> 01:00:47,400
您可以将每个证据合并为单个蛇。

725
01:00:49,699 --> 01:00:54,000
是的，绝对的最后游戏是每个...

726
01:00:54,000 --> 01:00:56,619
所有EVM的执行都是sn虫。

727
01:00:56,619 --> 01:00:59,039
因此，您会收到一个块，然后检查一个sn虫。

728
01:00:59,559 --> 01:01:03,880
然后那几乎没有证明只检查一切

729
01:01:03,880 --> 01:01:07,619
而且您不必对自己进行实际的EVM计算。

730
01:01:08,339 --> 01:01:10,039
您只会收到块。

731
01:01:10,039 --> 01:01:16,960
您进行了我上面提到的进一步滚动的数据采样，并验证了这些证据

732
01:01:16,960 --> 01:01:23,679
而且您对数据可用，并且执行实际上与

733
01:01:23,679 --> 01:01:29,900
下一个块的结果状态根。所以这就像非常未来派的东西，但很酷

734
01:01:29,900 --> 01:01:35,960
zkroll-offs实际上是在zkevms上，我们最终可以将其带回核心

735
01:01:35,960 --> 01:01:42,460
协议，然后有一个完整的圆圈。然后，这就是我们获得可扩展第1层执行的方式

736
01:01:42,460 --> 01:01:56,800
所有这些ZK-PROFFORM。是的，在预编译中的ZK-EVM-UPCODE，我只想提及它

737
01:01:56,800 --> 01:02:04,400
简而言之，因为EVM可以有办法验证EVM证明，这甚至非常酷。

738
01:02:04,400 --> 01:02:10,139
因此，您可以在本地支持EVM支持的非常简单的ZK汇总。

739
01:02:12,760 --> 01:02:16,900
因此，您可以在里面喜欢EVM证明，

740
01:02:16,900 --> 01:02:22,079
EVM证明通过EVM中的重新编译验证的验证。

741
01:02:22,240 --> 01:02:24,720
因此，这就像非常未来派的东西。

742
01:02:27,860 --> 01:02:31,019
这种对国家的暗示会使A2S无关紧要吗？

743
01:02:31,019 --> 01:02:38,539
但是，从长远来看，它们仍然会相关，但对于可伸缩性而言并不重要，但是

744
01:02:39,659 --> 01:02:45,019
我也想说的是可伸缩性化合物，因此，如果您毫不费力地扩展一层

745
01:02:45,019 --> 01:02:50,780
秤层也二了，所以有一个分形缩放的想法，您可以查找

746
01:02:51,420 --> 01:02:58,380
无论如何或至少这就是我期望的

747
01:02:58,380 --> 01:03:01,280
正是乔什。

748
01:03:01,280 --> 01:03:05,519
如果您扩展L1并缩放L2。

749
01:03:05,519 --> 01:03:10,660
我没有提到它，但无国籍的垂直树，您将能够

750
01:03:10,660 --> 01:03:13,340
轻松将气体限制三倍。

751
01:03:13,340 --> 01:03:21,720
因此，无国籍后，便宜的第1层费用也将非常酷。

752
01:03:21,720 --> 01:03:24,079
之后，最后两个非常...

753
01:03:24,079 --> 01:03:25,740
我没有太多要说的。

754
01:03:25,739 --> 01:03:31,339
所以我只是要快速过去。清除是关于拥有更简单的协议。所以

755
01:03:32,139 --> 01:03:39,500
那一张大票是历史到期。因此，EIP-4444也绰号四个四分之一。

756
01:03:40,859 --> 01:03:46,859
简而言之，预计节点不会存储超过一年的历史。

757
01:03:47,500 --> 01:03:55,099
这让我们感到可怕，因为我们习惯了节点验证整个区块链，但是

758
01:03:55,099 --> 01:03:59,759
但事实证明，以太坊试图实现的目标并不是必需的

759
01:03:59,759 --> 01:04:02,299
作为实时结算层。

760
01:04:02,759 --> 01:04:06,259
所以我不知道是谁这么说的。

761
01:04:06,299 --> 01:04:10,860
我认为这是蒂姆·巴科（Tim Bako）在我不知道几点前的推文中。

762
01:04:10,860 --> 01:04:17,199
但这基本上是您问一千个节点，最新块是什么，

763
01:04:17,279 --> 01:04:18,719
然后，您将有一些分歧。

764
01:04:19,239 --> 01:04:21,360
就像有人没有及时收到障碍

765
01:04:21,360 --> 01:04:24,739
并认为以前的街区是链的头部和类似的东西。

766
01:04:25,099 --> 01:04:32,139
但是，如果您问他们，10 000街区是什么，他们都会同意这一点

767
01:04:32,139 --> 01:04:41,819
历史，因此，这就不同意历史，尤其是在最终确定的块上，所以

768
01:04:41,819 --> 01:04:47,019
基本上不可能

769
01:04:47,019 --> 01:04:54,940
我们从简化客户端代码库中得出，因此类似于所有先前规则的内容

770
01:04:54,940 --> 01:05:00,619
较早的叉子今天不再相关，然后您可以从代码库中删除该叉

771
01:05:00,619 --> 01:05:06,460
仅关注当今协议实际运作方式。当然，它消除了很多

772
01:05:06,460 --> 01:05:12,940
节点的存储要求。从技术上讲，可以在任何时候实施for柱。

773
01:05:12,940 --> 01:05:17,659
这不是硬叉。就像节点之间的某种点对点惯例一样。

774
01:05:17,659 --> 01:05:24,739
因此，在激活它之前，我们希望通过其他方式可靠地访问历史记录。

775
01:05:25,099 --> 01:05:41,659
因此，最分散的一个类似于门户网络，该网络是专门用于共享历史记录和类似客户访问的状态访问证明的协议。

776
01:05:41,659 --> 01:05:49,519
但是，拥有诸如Bittorrent或Blockexplorers之类的旧历史将有更多选择。

777
01:05:49,519 --> 01:06:00,739
是的，尼克斯（Nixo）基本上是我们想要的软件...我不太了解点对点的情况

778
01:06:00,739 --> 01:06:09,019
但是EIB 4444只是...节点只是不再需要为那些询问它的人服务旧历史。

779
01:06:09,019 --> 01:06:11,920
是的

780
01:06:11,920 --> 01:06:15,719
下一个

781
01:06:15,719 --> 01:06:17,619
清除是国家到期

782
01:06:17,619 --> 01:06:19,739
我个人不相信这是

783
01:06:19,739 --> 01:06:21,719
永远不会发生，因为它破裂了太多

784
01:06:21,719 --> 01:06:23,900
东西，这是一种较低的方式

785
01:06:23,900 --> 01:06:25,340
优先级与

786
01:06:25,340 --> 01:06:26,739
这

787
01:06:26,739 --> 01:06:29,659
PBS之间的同步性

788
01:06:29,659 --> 01:06:30,900
和无国籍

789
01:06:30,900 --> 01:06:33,259
使其优先级降低

790
01:06:33,259 --> 01:06:34,619
但是，是的

791
01:06:34,619 --> 01:06:37,860
这是一个显着的改变

792
01:06:37,860 --> 01:06:44,099
Vitalix今年的路线图更新，他刚刚将其从大型蓝色物品降低到

793
01:06:44,099 --> 01:06:48,980
只是一个绿色，但就我个人而言，我不相信会发生，因为您会有

794
01:06:48,980 --> 01:06:57,220
延长地址的长度，然后在状态时期进行各种疯狂的事情

795
01:06:57,220 --> 01:07:05,780
然后重新部署跨州的同样令牌，并验证太多的破坏变化，但仍然

796
01:07:05,780 --> 01:07:11,860
在那里提到。我仍然在那里提到，因为它在运行地图上。进而...

797
01:07:16,260 --> 01:07:21,060
是的。是的。只想废除国家。是的。我认为您可以拥有一个无国籍客户

798
01:07:21,060 --> 01:07:26,019
像部分无国籍。因此，如果国家的一部分没有永远被触摸，

799
01:07:26,019 --> 01:07:32,500
然后，您可以在本地修剪它。您可以激光将节点重点放在状态下

800
01:07:32,500 --> 01:07:36,699
这与您关心的帐户或汇总有关以及类似的内容有关。

801
01:07:36,880 --> 01:07:40,519
因此，这就是为什么我认为国家到期并不是一件大事的原因。

802
01:07:41,219 --> 01:07:42,920
现在不是优先事项。

803
01:07:43,239 --> 01:07:49,420
然后清除的最后一个小项目是各种协调。

804
01:07:49,920 --> 01:07:52,820
因此，就像执行层使用所谓的RLP

805
01:07:52,820 --> 01:07:56,800
用于交易和块的序列化。

806
01:07:57,019 --> 01:08:00,039
而在共识层上是SSZ。

807
01:08:00,039 --> 01:08:06,739
将来，我们想简化这一点，并将所有内容完全移至SSZ

808
01:08:06,739 --> 01:08:13,039
然后逐步淘汰所有交易类型，例如1559年之前的旧类型

809
01:08:13,039 --> 01:08:20,840
并可能朝着所有访问列表在交易和类似内容中被强制列出的计划

810
01:08:20,840 --> 01:08:27,399
但这是一个...做到这是研究的积极领域，我想

811
01:08:27,399 --> 01:08:33,759
是的，这就是我对挥霍的全部说法。

812
01:08:33,759 --> 01:08:38,920
挥霍是我们想要在核心协议上拥有的全部，但不合适

813
01:08:38,920 --> 01:08:39,920
其他任何地方。

814
01:08:39,920 --> 01:08:44,879
只是我们要挥霍并拥有这些杂物。

815
01:08:44,879 --> 01:08:51,279
因此，最大的是EOF，它是EVM对象格式。

816
01:08:51,279 --> 01:08:58,159
最近有很多EIPS坐在某种程度上，但是正在进行中

817
01:08:58,800 --> 01:09:06,639
重组EVM的某些方面，我实际上并不是与EOF谈论的人，所以我

818
01:09:06,639 --> 01:09:12,079
只是要，但是我只是将链接放在有关EOF概述的链接中，但我的理解是

819
01:09:12,079 --> 01:09:20,479
像以前兼容的方式一样，将来可以升级EVM，以便于

820
01:09:20,479 --> 01:09:26,879
在核心协议中具有EOF，然后第2层可以创新并利用它。你有

821
01:09:26,879 --> 01:09:36,239
他们自己的小evms升级内容并尝试不需要更改1层

822
01:09:36,239 --> 01:09:40,959
每次。是的，那就是EOF。

823
01:09:44,719 --> 01:09:49,039
此购买的另一个大票是帐户抽象，此时

824
01:09:49,039 --> 01:09:56,239
以太坊的十年未解决的问题是带有私钥的钱包

825
01:09:56,239 --> 01:10:03,739
平衡和东西很糟糕，就像它很糟糕，就像没有办法有一个人

826
01:10:03,739 --> 01:10:09,579
否则支付您的汽油费用，没有办法像想到的那样轻松地批量交易

827
01:10:09,579 --> 01:10:15,600
必须首先批准一个令牌，然后在下一次交易中交换它，没有一个

828
01:10:15,600 --> 01:10:22,960
关注关键安全的担忧，当您缩小加密世界时，这是一种

829
01:10:22,960 --> 01:10:29,360
令人尴尬的是，您不能做简单的事情，例如撤销钥匙或旋转它，而没有像

830
01:10:29,360 --> 01:10:33,840
尴尬地将所有资金一个一个一个一个昂贵的资金移动，需要大量时间

831
01:10:36,079 --> 01:10:42,400
是的，来自帐户抽象的其他东西是支出条件和社交恢复，所以您

832
01:10:42,399 --> 01:10:49,159
因此，您可以拥有，而不是拥有一个钥匙的热钱包，而与冷钱包相比，

833
01:10:50,059 --> 01:10:56,659
您可以拥有自定义的支出条件，或者我每天可以花费X含量的资金。

834
01:10:57,099 --> 01:11:04,299
但是，如果我想这样做，如果我想一次移动太多乐趣，我需要一个额外的钥匙，就像在冷藏中一样。

835
01:11:04,299 --> 01:11:10,619
因此，您可以有一个单一的钱包来完成所有这些事情，并将可信赖的监护人像恢复人员一样。

836
01:11:10,619 --> 01:11:13,220
而且有很多...

837
01:11:13,220 --> 01:11:17,760
智能钱包的设计空间基本上是无限的。

838
01:11:18,539 --> 01:11:21,819
但是现在，我们只有这些EOA，这真是可怕。

839
01:11:23,239 --> 01:11:33,340
是的，大型EIP和ERCS是3074，将对EOA的控制权委托给智能合约。

840
01:11:33,500 --> 01:11:38,220
我认为，由于政治原因，这不在Vitalik的路线图上。

841
01:11:38,220 --> 01:11:42,420
但是我个人在3074年看涨下一个港口。

842
01:11:43,640 --> 01:11:47,320
ERC-4337是智能钱包标准

843
01:11:47,320 --> 01:11:49,840
这不会影响核心协议，

844
01:11:50,079 --> 01:11:50,860
至少今天不是

845
01:11:51,079 --> 01:11:54,880
但这是标准化的一个非常好的协议，

846
01:11:55,760 --> 01:12:00,840
在所有EVM链中具有相同的标准

847
01:12:00,840 --> 01:12:03,260
而不是每个卷起

848
01:12:03,260 --> 01:12:05,159
拥有自己的小本地标准

849
01:12:05,159 --> 01:12:06,199
用于账户抽象。

850
01:12:06,199 --> 01:12:11,920
最终可以转换一个EOA

851
01:12:11,920 --> 01:12:14,800
到与4337兼容的智能钱包

852
01:12:14,800 --> 01:12:16,399
在协议中，

853
01:12:16,639 --> 01:12:20,279
这就是培训中的实践中的意思。

854
01:12:21,760 --> 01:12:23,760
那基本上会给我们

855
01:12:23,760 --> 01:12:28,420
我们渴望的说法抽象乌托邦。

856
01:12:30,300 --> 01:12:33,760
是的，EIP-15509 EIP-15509。

857
01:12:33,760 --> 01:12:37,239
这总是一个大问题

858
01:12:37,239 --> 01:12:38,640
当他们看到路线图时。

859
01:12:38,640 --> 01:12:39,659
就像，这是什么意思？

860
01:12:39,659 --> 01:12:42,640
我以为1.559已经很棒。

861
01:12:42,640 --> 01:12:44,820
那么，什么会使它成为最终游戏？

862
01:12:44,820 --> 01:12:47,760
和我看到的三个主要主要

863
01:12:47,760 --> 01:12:51,460
使其更像是自动做市商曲线。

864
01:12:54,980 --> 01:12:58,060
就像跟踪以前的用法

865
01:12:58,060 --> 01:12:59,039
在上一个块中，

866
01:12:59,039 --> 01:13:01,119
您只能跟踪多余的气体。

867
01:13:01,119 --> 01:13:07,539
多余的气体。因此，如果您超越1500万目标，例如，如果您只超过1600万，

868
01:13:07,539 --> 01:13:13,039
然后，随着时间的流逝，这将增加一百万美元的气体。

869
01:13:13,920 --> 01:13:20,539
这使它更加稳定，因为实际上它实际上并没有针对1500万。

870
01:13:20,539 --> 01:13:28,220
就像目标下方的63、64。因为如果您超过12.5％，并且

871
01:13:28,220 --> 01:13:30,380
然后您下降了12.5％，

872
01:13:30,380 --> 01:13:32,340
然后，它实际上并不能使您恢复到零。

873
01:13:32,500 --> 01:13:34,060
它使您略低于零。

874
01:13:34,860 --> 01:13:37,360
所以这就像1559年的怪异怪癖

875
01:13:37,360 --> 01:13:40,760
通过跟踪多余的气体可以增强这种情况。

876
01:13:41,960 --> 01:13:46,460
另一个好处是

877
01:13:46,460 --> 01:13:49,440
它使审查制度成本更高。

878
01:13:49,440 --> 01:13:52,060
因为现在，如果您的块建筑商决定

879
01:13:52,060 --> 01:13:55,860
要删除A，无论出于何种原因，都不包括交易，

880
01:13:55,980 --> 01:13:57,760
然后他们只是放弃优先费。

881
01:13:57,760 --> 01:14:06,320
但是有了这种设计，他们将不得不放弃我不会介入的全部费用，但是

882
01:14:08,720 --> 01:14:16,000
今天，它仍然会燃烧到今天的1.5.5.0，但审查的机会成本将是

883
01:14:16,000 --> 01:14:23,840
全部费用，而不仅仅是从构建器等心理模型的方式来看的优先费用，

884
01:14:23,840 --> 01:14:31,039
可以从协议中购买多余的气体，然后通过交易来弥补它。所以这是什么

885
01:14:31,039 --> 01:14:36,720
这将在某个时候发生。否则，其他两个是多维的

886
01:14:36,720 --> 01:14:46,319
EIP-1559。就像我们今天的斑点一样。以太坊资源的定价是二维

887
01:14:46,319 --> 01:14:52,560
截至上周，这非常酷。但是您可以迈出一步，然后做更多的资源

888
01:14:52,560 --> 01:15:01,420
就像拥有呼叫数据的价格分别定价，这样它不会影响状态，对国家的写作或阅读成本。

889
01:15:01,539 --> 01:15:07,880
然后，您可以独立于计算和类似的内容来管理块尺寸。

890
01:15:08,020 --> 01:15:10,320
因此，这将使它更加高效。

891
01:15:11,500 --> 01:15:22,260
它将消除这种怪异的怪癖，将所有东西捆绑在一起。

892
01:15:22,260 --> 01:15:26,500
我们必须考虑到一切最坏的情况。

893
01:15:27,400 --> 01:15:33,320
今天，我们必须考虑最坏的情况

894
01:15:33,320 --> 01:15:35,960
有人向国家写一堆东西

895
01:15:35,960 --> 01:15:38,880
只是破坏每个节点的存储空间。

896
01:15:39,760 --> 01:15:42,100
我们必须使写信给国家昂贵，

897
01:15:42,260 --> 01:15:45,460
但我们也必须使编写大量呼叫数据变得昂贵

898
01:15:45,460 --> 01:15:48,039
然后制作节点无法遵循的大块。

899
01:15:48,039 --> 01:15:53,560
相反，我们可以根据每个资源分别量身定制最坏情况。

900
01:15:55,319 --> 01:15:59,800
这将是多维EIP-1559的好处。

901
01:16:00,840 --> 01:16:06,199
最后一件事是使基本峰值计算时间意识到。

902
01:16:06,920 --> 01:16:13,159
因为现在，如果验证者出于任何原因错过了一个插槽，那么下一个块就是

903
01:16:13,159 --> 01:16:16,340
它将有更多的交易可以填写。

904
01:16:16,340 --> 01:16:19,159
从协议的角度来看

905
01:16:19,159 --> 01:16:21,619
这只是意味着突然的需求翻了一番

906
01:16:21,619 --> 01:16:24,840
因为该协议不知道小插槽。

907
01:16:24,840 --> 01:16:26,920
它只是将其视为需求的尖峰，

908
01:16:26,920 --> 01:16:29,579
但实际上，这是一个

909
01:16:29,579 --> 01:16:30,960
这实际上并不是需求的激增。

910
01:16:30,960 --> 01:16:34,559
这只是一个，就像供应短缺一样。

911
01:16:35,960 --> 01:16:40,519
是的，有时间的EIP 4396

912
01:16:40,519 --> 01:16:42,340
基本费用计算的一部分。

913
01:16:43,159 --> 01:16:48,300
我认为这是最后一个。

914
01:16:48,300 --> 01:16:50,300
是的。

915
01:16:50,300 --> 01:16:57,139
因此，这种羽毛具有深厚的密码学，例如完全同构加密

916
01:16:57,139 --> 01:17:00,619
以及一杆签名以及所有这些超级未来派的东西。

917
01:17:00,619 --> 01:17:04,619
这是一个积极的研究领域。

918
01:17:04,619 --> 01:17:10,519
不仅来自以太坊研究，而且还来自实际的密码学研究

919
01:17:10,520 --> 01:17:12,280
在密码学的前沿

920
01:17:12,280 --> 01:17:14,460
然后弄清楚我们可以做什么。

921
01:17:14,460 --> 01:17:19,460
因此，我认为单光签名是最好的例子。

922
01:17:19,580 --> 01:17:21,940
你可以看到贾斯汀·德雷克

923
01:17:21,940 --> 01:17:26,240
阅读使用量子计算机的本文

924
01:17:26,240 --> 01:17:28,740
以及许多其他未来派的密码学。

925
01:17:28,740 --> 01:17:31,840
然后您可以拥有签名

926
01:17:31,840 --> 01:17:35,420
在您签署消息后，这实际上会摧毁自己。

927
01:17:35,420 --> 01:17:38,860
并且有一种有潜在整合的方法

928
01:17:38,859 --> 01:17:44,299
像我们拥有量子计算机一旦我们拥有的远远未来，区块链就像在远的未来一样

929
01:17:44,299 --> 01:17:51,500
消除将全部砍伐的需求，但我需要强调这确实是未来派的

930
01:17:51,500 --> 01:17:57,899
但这是超级酷的东西，下一件大事就像加密孟买

931
01:17:57,899 --> 01:18:03,819
总共可以消除所有有毒的MEV，因为您不知道自己的交易

932
01:18:03,819 --> 01:18:09,579
包括实际代表，因此您不能将较高滑倒或提取的人夹

933
01:18:09,579 --> 01:18:20,859
来自单个用户的东西，但它仍然像无毒的MBV一样，像套利一样

934
01:18:20,859 --> 01:18:28,939
两次交换和清算仍将其留在桌子上，因此仍然会有MBV

935
01:18:28,939 --> 01:18:33,539
现有的是要位于块的顶部。

936
01:18:33,539 --> 01:18:43,779
是的，我会记住要回去分享有关单发签名的论文。

937
01:18:43,779 --> 01:18:50,339
是的，最后一项是BDF，可验证的延迟功能，简而言之只是

938
01:18:50,339 --> 01:18:54,059
您只是在哪里...

939
01:18:54,060 --> 01:19:01,260
一个方向的速度非常慢。因此，就像您可以验证您必须等待或喜欢

940
01:19:01,980 --> 01:19:05,820
做一些花费您很多时间的功能，然后您可以轻松验证它

941
01:19:05,820 --> 01:19:10,380
事实之后。因此，这就像工作证明，但不可分析。和

942
01:19:11,580 --> 01:19:16,140
基本上，它将使用信标链提高随机性。因为今天不是

943
01:19:17,260 --> 01:19:22,860
它不是完全随机的。因为像负责提议块的验证者一样

944
01:19:22,859 --> 01:19:28,439
决定故意错过他们的插槽，以弄乱随机性，但这就像一点点

945
01:19:28,439 --> 01:19:39,420
控制了很多UH的摄像机上有更多的保留

946
01:19:39,420 --> 01:19:45,039
最近的一篇论文证明了我们希望与VDS所希望的建筑

947
01:19:45,039 --> 01:19:50,839
实际上是虚弱的

948
01:19:50,840 --> 01:19:55,039
我们并不严格需要它，但是拥有它会很好。

949
01:19:55,039 --> 01:20:01,619
因此，就像在挥霍路线图的尽头一样。

950
01:20:01,619 --> 01:20:04,520
是的，那是我的演讲。

951
01:20:04,520 --> 01:20:05,680
谢谢你的观看。

952
01:20:05,680 --> 01:20:08,699
而且我想我们有更多的时间，例如10分钟的问题。

953
01:20:16,619 --> 01:20:17,279
太棒了，Dom。

954
01:20:17,279 --> 01:20:18,199
非常感谢。

955
01:20:18,199 --> 01:20:18,699
是的。

956
01:20:18,699 --> 01:20:21,300
那是路线图上的一个很好的演讲。

957
01:20:21,300 --> 01:20:27,300
看来我们现在有很多问题可能正在聊天中输入。

958
01:20:31,179 --> 01:20:33,220
是的，让我们看看我们在这里要说的话。

959
01:20:33,220 --> 01:20:50,720
嗯，我很好奇，您对什么是最高优先事项有一个类似的看法

960
01:20:50,720 --> 01:20:58,260
在路线图上的主题uh，因为他们都知道他们被同时开发和研究

961
01:20:58,260 --> 01:21:04,119
那么，您认为我们应该看的奶油是什么？

962
01:21:05,340 --> 01:21:08,300
好吧，我认为下一个优先事项是Verkle树，

963
01:21:08,300 --> 01:21:10,900
这是下一个叉子中有希望的包容性。

964
01:21:11,180 --> 01:21:15,539
但是默克尔状态树之间的过渡

965
01:21:15,539 --> 01:21:17,159
我们今天进入了Verkle树

966
01:21:17,159 --> 01:21:20,960
仍然是我们必须同时权衡的一些选择。

967
01:21:21,159 --> 01:21:24,619
但是我相信这是下一个叉子的大型物品。

968
01:21:24,619 --> 01:21:31,460
但是，是的，上周的一切都很酷，斑点空间只是缓解了很多

969
01:21:31,460 --> 01:21:37,979
围绕两层的扩展问题，这是一个给我们更多的时间来做其他大事

970
01:21:37,979 --> 01:21:46,479
是的，看来Verkle绝对像是大部分研究，并且有很多

971
01:21:46,479 --> 01:21:53,159
在其实施实施中，您认为的是一种

972
01:21:53,159 --> 01:21:59,439
您知道的主题仍然有很多研究，或者也许很多

973
01:21:59,439 --> 01:22:05,760
那就是，您知道，这个研究小组中的某人可能想接受

974
01:22:05,760 --> 01:22:14,720
宠物项目之类的东西。我认为PBS的PBS有很多权衡，我们已经

975
01:22:14,720 --> 01:22:22,000
在各种设计上都在骑自行车，并且在延迟和

976
01:22:22,000 --> 01:22:27,000
提出的各种设计总是有东西

977
01:22:29,159 --> 01:22:30,500
那不太可行。

978
01:22:30,500 --> 01:22:34,119
牢记事物总是很奇怪，

979
01:22:34,119 --> 01:22:36,340
特别是包含清单。

980
01:22:36,340 --> 01:22:39,680
喜欢无状态验证者的包含列表

981
01:22:39,680 --> 01:22:41,039
网格不好。

982
01:22:41,039 --> 01:22:44,000
因此，这是另一个活跃的研究领域。

983
01:22:44,000 --> 01:22:48,119
所以我，我担心我们将不得不解决

984
01:22:48,119 --> 01:22:52,239
因为像Enshrine PBS一样，最不糟糕的设计，

985
01:22:52,239 --> 01:22:54,180
真可惜

986
01:22:54,180 --> 01:22:56,899
因为PBS本身作为一个概念非常酷。

987
01:22:59,880 --> 01:23:00,699
凉爽的。

988
01:23:03,920 --> 01:23:07,680
Oxai问，什么一件事具有最大的潜力

989
01:23:07,680 --> 01:23:10,300
简化所有这些复杂性？

990
01:23:12,979 --> 01:23:15,479
就像PBS一样

991
01:23:15,479 --> 01:23:17,140
还是一般只是路线图？

992
01:23:17,140 --> 01:23:20,380
我认为他们通常指的是路线图。

993
01:23:22,619 --> 01:23:24,860
似乎路线图中的很多东西

994
01:23:24,860 --> 01:23:28,480
只需在协议中添加越来越复杂即可。

995
01:23:28,480 --> 01:23:31,980
像清除的东西一样

996
01:23:34,680 --> 01:23:37,619
有什么可能像降低复杂性

997
01:23:37,619 --> 01:23:39,220
或允许其中一些复杂性

998
01:23:39,220 --> 01:23:41,800
与自己一起工作？

999
01:23:42,920 --> 01:23:44,500
我不太确定。

1000
01:23:44,500 --> 01:23:46,100
是的。

1001
01:23:46,100 --> 01:23:47,760
简化的东西。是的。

1002
01:23:47,760 --> 01:23:52,000
就像有一些事情出现并以更简单的方式解决相同的目标一样，

1003
01:23:52,000 --> 01:23:58,720
与我们计划的其他内容相比，这样的权衡将非常重。

1004
01:23:58,720 --> 01:24:02,980
但是就像路线图一样。

1005
01:24:02,980 --> 01:24:07,660
不，我不会说石头固定，但这是多年研究的结果。

1006
01:24:07,660 --> 01:24:10,060
然后我们基本知道如何做事。

1007
01:24:10,060 --> 01:24:14,860
在我在PBS周围提到的这张夜间照片之外，

1008
01:24:14,859 --> 01:24:17,019
我认为这几乎是要走的路。

1009
01:24:17,019 --> 01:24:20,259
如果有什么事情说，我会感到惊讶

1010
01:24:20,380 --> 01:24:24,259
嘿，我们可以以更简单的方式解决所有这些问题。

1011
01:24:24,599 --> 01:24:26,420
但是我肯定欢迎它。

1012
01:24:28,219 --> 01:24:33,920
我很好奇您对此路线图的广度有任何意见

1013
01:24:33,920 --> 01:24:38,979
以及骨化的潜力和核心开发人员的能力

1014
01:24:38,979 --> 01:24:41,879
实际完成所有这些

1015
01:24:41,879 --> 01:24:44,979
在协议可能抛弃之前。

1016
01:24:47,339 --> 01:24:48,599
是的，骨化。

1017
01:24:48,859 --> 01:24:51,219
在我看来，我们还没有准备好骨化。

1018
01:24:53,019 --> 01:24:55,699
你认为骨化是什么吗

1019
01:24:55,699 --> 01:24:57,639
我们可以控制

1020
01:24:57,639 --> 01:25:00,379
还是即将发生的事情

1021
01:25:00,379 --> 01:25:04,579
从工作协议的人的手中？

1022
01:25:05,599 --> 01:25:08,000
这确实取决于我们准备好了

1023
01:25:08,000 --> 01:25:14,180
为剩余项目带来所需的风险和实施时间。

1024
01:25:14,699 --> 01:25:19,000
我认为此时路线图本身大部分是僵化的。

1025
01:25:19,260 --> 01:25:22,899
因此，有一个普遍的共识，我们将要做垂直树，

1026
01:25:22,939 --> 01:25:27,380
即使在过渡方面这是超级复杂和风险。

1027
01:25:27,739 --> 01:25:29,920
但这是我们知道我们将要做的事情。

1028
01:25:31,279 --> 01:25:35,359
但是我认为在某个时候，例如现在的10，15年，

1029
01:25:35,359 --> 01:25:36,519
当所有这些事情都完成时。

1030
01:25:36,699 --> 01:25:38,019
我认为这会更加困难

1031
01:25:38,019 --> 01:25:40,779
继续提出一些改变

1032
01:25:40,779 --> 01:25:43,019
那是相同的风险

1033
01:25:43,019 --> 01:25:45,059
作为我们将要承担的事情。

1034
01:25:45,579 --> 01:25:49,659
但是我认为就像尼克索在聊天中所说的那样

1035
01:25:49,819 --> 01:25:53,219
像骨化不一定是可能的。

1036
01:25:53,479 --> 01:25:55,299
就像总是有可能的

1037
01:25:55,299 --> 01:25:56,579
发生了什么事

1038
01:25:56,579 --> 01:25:59,460
然后我们必须改变一些东西。

1039
01:25:59,659 --> 01:26:01,460
但是就像有充分的理由一样。

1040
01:26:01,679 --> 01:26:04,039
就像我宁愿看到那扇门

1041
01:26:04,039 --> 01:26:11,479
即使这就像一场越来越困难的艰苦的战斗，也要保持开放

1042
01:26:11,479 --> 01:26:19,140
每一个堡垒肯定是的，只是为了澄清骨化是类似的过程

1043
01:26:19,140 --> 01:26:26,300
协议的硬化或使其使它更具挑战性，您知道

1044
01:26:26,300 --> 01:26:32,140
无论出于何种原因，您都知道很多人在什么中占有一席之地的升级

1045
01:26:32,140 --> 01:26:39,020
发生了，你知道对话和共识更难达到，嗯

1046
01:26:39,020 --> 01:26:45,660
知道多种不同的方式可能是，该协议的更改具有挑战性

1047
01:26:46,300 --> 01:26:54,460
在这里聊天中的任何其他问题

1048
01:27:02,140 --> 01:27:07,280
是的。

1049
01:27:07,280 --> 01:27:13,900
本身不一定是一件坏事。

1050
01:27:13,900 --> 01:27:19,420
就像，你知道。

1051
01:27:19,420 --> 01:27:20,420
是的。

1052
01:27:20,420 --> 01:27:21,420
惊人的。

1053
01:27:21,420 --> 01:27:24,320
马里奥有最后的想法吗？

1054
01:27:24,320 --> 01:27:26,940
我还有一个问题。

1055
01:27:26,939 --> 01:27:28,739
猫叫什么名字？

1056
01:27:28,739 --> 01:27:32,419
就像，我们是否使其成为EPF的吉祥物，

1057
01:27:32,419 --> 01:27:33,639
研究小组？

1058
01:27:33,639 --> 01:27:36,460
就像我们还在寻找吉祥物一样。

1059
01:27:36,460 --> 01:27:38,979
因此，这真的会和我们在一起。

1060
01:27:38,979 --> 01:27:39,779
是的。

1061
01:27:39,779 --> 01:27:41,339
橙色猫是mimir。

1062
01:27:41,339 --> 01:27:43,079
我刚刚在聊天中输入了他的名字。

1063
01:27:43,079 --> 01:27:43,919
m-i-n-i-r。

1064
01:27:43,919 --> 01:27:47,199
他非常橙色。

1065
01:27:47,199 --> 01:27:48,039
太感谢了。

1066
01:27:48,039 --> 01:27:48,879
我们喜欢它。

1067
01:27:48,879 --> 01:27:49,719
我们喜欢你的谈话。

1068
01:27:49,719 --> 01:27:50,559
是的。非常感谢，Dom。

1069
01:27:50,559 --> 01:27:51,399
真的很棒。

1070
01:27:51,399 --> 01:27:53,439
是的。

1071
01:27:53,439 --> 01:27:56,759
非常感谢它整个部分

1072
01:27:56,760 --> 01:28:02,680
路线图所有杂草的所有杂草都尤其是在聊天中的所有分心期间

1073
01:28:02,680 --> 01:28:08,520
不断问，猫不断乞求关注，所以我们真的很感激它

1074
01:28:08,520 --> 01:28:13,079
嗯，非常感谢您与我们在一起的不和谐，我想我们可以继续

1075
01:28:13,079 --> 01:28:19,480
还有一些问题，嗯，希望有你的嗯，谢谢你让我

1076
01:28:19,479 --> 01:28:21,139
所以真的很好。

1077
01:28:21,139 --> 01:28:24,619
我一般喜欢路线图。

1078
01:28:24,619 --> 01:28:25,619
是的。

1079
01:28:25,619 --> 01:28:26,619
好的。

1080
01:28:26,619 --> 01:28:35,459
好吧，我们将在下周四见到大家参加与马里奥（Mario）一起运行节点的研讨会。

1081
01:28:35,459 --> 01:28:36,579
是的。

1082
01:28:36,579 --> 01:28:42,379
因此，要在本周星期四继续

1083
01:28:42,379 --> 01:28:45,659
动手研讨会。

1084
01:28:45,659 --> 01:28:48,159
也喜欢下周让您注意。

1085
01:28:48,159 --> 01:28:50,139
我们还将在星期一继续。

1086
01:28:50,139 --> 01:28:57,819
我们将开始研究小组的第二阶段。

1087
01:28:57,819 --> 01:29:03,139
我将分享接下来五个星期的确切时间表

1088
01:29:03,139 --> 01:29:05,139
在本周晚些时候的Wiki中。

1089
01:29:05,139 --> 01:29:06,720
但是要让你注意下周，

1090
01:29:06,720 --> 01:29:09,279
周一和周四也会谈话

1091
01:29:09,279 --> 01:29:10,079
在常规时间。

1092
01:29:10,079 --> 01:29:13,699
所以我将在星期四和下周见。

1093
01:29:13,699 --> 01:29:14,199
是的。

1094
01:29:14,199 --> 01:29:20,899
非常感谢大家，我们将在星期四见到你，谢谢你见

1095
01:29:20,899 --> 01:29:23,359
非常感谢您再次感谢一点圆顶

1096
01:29:41,559 --> 01:29:41,559
1097

1097
01:30:11,560 --> 01:30:13,560
所以

